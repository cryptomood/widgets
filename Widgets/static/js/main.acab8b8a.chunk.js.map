{"version":3,"sources":["assets/fonts/AvertaStd-Regular.eot","assets/fonts/AvertaStd-Regular.woff","assets/fonts/AvertaStd-Regular.woff2","assets/fonts/AvertaStd-Regular.svg","components/loader.tsx","utils/withSuspense.tsx","components/list/index.tsx","widgets/emotion-meter/index.ts","widgets/ticker-widget/index.ts","widgets/tag-cloud/index.ts","widgets/daily-overview/index.tsx","widgets/sentiment-news/index.ts","widgets/popular-accounts/index.ts","widgets/data-table/index.ts","widgets/popular-currencies/index.ts","widgets/crypto-sentiment/index.ts","widgets/tweets-on-chart/index.ts","utils/theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Loader","withSuspense","WrappedComponent","props","Suspense","fallback","React","lazy","colors","sentimentMeter","depression","sad","normal","happy","euphoria","sentiment","positive","negative","neutral","light","cryptoMoodLogo","border","fill","text","interval","background","backgroundActive","textActive","emotionMeter","handle","header","tickerMarquee","sentimentBarBackground","articleText","delimiter","timePublished","cryptoSentiment","primary","secondary","tagCloud","color","tags","monochrome","colorful","dailyOverview","sentimentNews","popularAccounts","orderBg","orderColor","popularCurrencies","dataTable","headerColor","rowItemColor","borderBottom","dark","mergeDeepRight","base","FontEOT","require","FontWOFF","FontWOFF2","FontSVG","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","cache","InMemoryCache","link","HttpLink","uri","process","client","ApolloClient","appTheme","URLSearchParams","window","location","search","get","theme","GlobalStyle","createGlobalStyle","App","Grommet","plain","path","exact","component","List","EmotionMeter","TickerWidget","TagCloud","DailyOverview","SentimentNews","PopularAccounts","DataTableWidget","TweetsOnChart","PopularCurrencies","CryptoSentiment","to","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.acab8b8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AvertaStd-Regular.2e2326e3.eot\";","module.exports = __webpack_public_path__ + \"static/media/AvertaStd-Regular.828fa8f7.woff\";","module.exports = __webpack_public_path__ + \"static/media/AvertaStd-Regular.cf988d46.woff2\";","module.exports = __webpack_public_path__ + \"static/media/AvertaStd-Regular.18808057.svg\";","import React from \"react\";\n\nexport const Loader = () => <p>Loading...</p>;\n","import React from \"react\";\n\nimport { Loader } from \"../components/loader\";\n\nexport function withSuspense<P>(WrappedComponent: React.FC<P>) {\n  return (props: P) => (\n    <React.Suspense fallback={<Loader />}>\n      <WrappedComponent {...props} />\n    </React.Suspense>\n  );\n}\n","import React from \"react\";\n\nimport { withSuspense } from \"../../utils/withSuspense\";\n\nexport default withSuspense(React.lazy(() => import(\"./component\")));\n","import { lazy } from \"react\";\n\nimport { withSuspense } from \"../../utils/withSuspense\";\n\nexport default withSuspense(lazy(() => import(\"./emotion-meter\")));\n","import { lazy } from \"react\";\n\nimport { withSuspense } from \"../../utils/withSuspense\";\n\nexport default withSuspense(lazy(() => import(\"./TickerWidget\")));\n","import { lazy } from \"react\";\n\nimport { withSuspense } from \"../../utils/withSuspense\";\n\nexport default withSuspense(lazy(() => import(\"./tag-cloud\")));\n","import { lazy } from \"react\";\n\nimport { withSuspense } from \"../../utils/withSuspense\";\n\nexport default withSuspense(lazy(() => import(\"./component\")));\n","import { lazy } from \"react\";\n\nimport { withSuspense } from \"../../utils/withSuspense\";\n\nexport default withSuspense(lazy(() => import(\"./component\")));\n","import { lazy } from \"react\";\n\nimport { withSuspense } from \"../../utils/withSuspense\";\n\nexport default withSuspense(lazy(() => import(\"./component\")));\n","import { lazy } from \"react\";\n\nimport { withSuspense } from \"../../utils/withSuspense\";\n\n// export default withSuspense(lazy(() => import(\"./mock\")));\nexport default withSuspense(lazy(() => import(\"./container\")));\n","import { lazy } from \"react\";\n\nimport { withSuspense } from \"../../utils/withSuspense\";\n\nexport default withSuspense(lazy(() => import(\"./component\")));\n","import { lazy } from \"react\";\n\nimport { withSuspense } from \"../../utils/withSuspense\";\n\nexport default withSuspense(lazy(() => import(\"./component\")));\n","import { lazy } from \"react\";\n\nimport { withSuspense } from \"../../utils/withSuspense\";\n\nexport default withSuspense(lazy(() => import(\"./component\")));\n","import { base } from \"grommet\";\nimport { mergeDeepRight } from \"ramda\";\n\nconst colors = {\n  sentimentMeter: {\n    depression: \"#E8354D\",\n    sad: \"#FC7E1E\",\n    normal: \"#FFCE2B\",\n    happy: \"#ACD91A\",\n    euphoria: \"#4ECC58\"\n  },\n  sentiment: {\n    positive: \"#6FFFB0\",\n    negative: \"#E8354D\",\n    neutral: \"#B4B4B4\"\n  }\n};\n\nconst light = {\n  colors,\n  cryptoMoodLogo: {\n    border: \"#B4B4B4\",\n    fill: \"#FFFFFF\",\n    text: \"#2F0B47\"\n  },\n  interval: {\n    background: \"#FFFFFF\",\n    backgroundActive: \"#EEEEEE\",\n    text: \"#777777\",\n    textActive: \"#000000\"\n  },\n  emotionMeter: {\n    handle: \"#000000\",\n    background: \"#ffffff\",\n    header: \"#000000\"\n  },\n  tickerMarquee: {\n    sentimentBarBackground: \"#EEEEEE\",\n    articleText: \"#777777\",\n    delimiter: \"#777777\",\n    timePublished: \"#B4B4B4\",\n    background: \"#FFFFFF\"\n  },\n  cryptoSentiment: {\n    primary: \"#000\",\n    secondary: \"#000\",\n    background: \"#fff\"\n  },\n  tagCloud: {\n    color: {\n      header: \"#EEEEEE\"\n    },\n    background: \"#ffffff\",\n    tags: {\n      monochrome: [\"#B4B4B4\", \"#777777\"],\n      colorful: [\"#FF009E\", \"#FF8820\", \"#211927\", \"#777777\"]\n    }\n  },\n  dailyOverview: {\n    primary: \"#000\",\n    secondary: \"#000\",\n    background: \"#fff\"\n  },\n  sentimentNews: {\n    primary: \"#211927\",\n    secondary: \"#b4b4b4\",\n    background: \"#fff\"\n  },\n  popularAccounts: {\n    primary: \"#000\",\n    secondary: \"#000\",\n    background: \"#fff\",\n    orderBg: \"#000\",\n    orderColor: \"#fff\"\n  },\n  popularCurrencies: {\n    primary: \"#000\",\n    secondary: \"#777\",\n    background: \"#fff\",\n    orderColor: \"white\",\n    orderBg: \"black\"\n  },\n  dataTable: {\n    background: \"#EEEEEE\",\n    headerColor: \"#919699\",\n    rowItemColor: \"#000000\",\n    borderBottom: \"#E3E5E6\"\n  }\n};\n\nconst dark = {\n  colors,\n  cryptoMoodLogo: {\n    border: \"#777777\",\n    fill: \"#211927\",\n    text: \"#EEEEEE\"\n  },\n  interval: {\n    background: \"#211927\",\n    backgroundActive: \"#777777\",\n    text: \"#b4b4b4\",\n    textActive: \"#EEEEEE\"\n  },\n  emotionMeter: {\n    handle: \"#EEEEEE\",\n    background: \"#211927\",\n    header: \"#EEEEEE\"\n  },\n  tickerMarquee: {\n    sentimentBarBackground: \"#777777\",\n    articleText: \"#B4B4B4\",\n    delimiter: \"#777777\",\n    timePublished: \"#777777\",\n    background: \"#211927\"\n  },\n  tagCloud: {\n    color: {\n      header: \"#EEEEEE\"\n    },\n    background: \"#ffffff\",\n    tags: {\n      monochrome: [\"#B4B4B4\", \"#777777\"],\n      colorful: [\"#FF009E\", \"#FF8820\", \"#211927\", \"#777777\"]\n    }\n  },\n  dailyOverview: {\n    primary: \"#fff\",\n    secondary: \"#b4b4b4\",\n    background: \"#211927\"\n  },\n  sentimentNews: {\n    primary: \"#fff\",\n    secondary: \"#b4b4b4\",\n    background: \"#211927\"\n  },\n  popularAccounts: {\n    primary: \"#fff\",\n    secondary: \"#b4b4b4\",\n    background: \"#211927\",\n    orderBg: \"#fff\",\n    orderColor: \"#000\"\n  },\n  popularCurrencies: {\n    primary: \"#fff\",\n    secondary: \"#b4b4b4\",\n    background: \"#211927\",\n    orderColor: \"black\",\n    orderBg: \"white\"\n  },\n  dataTable: {\n    background: \"#777777\",\n    headerColor: \"#919699\",\n    rowItemColor: \"#B4B4B4\",\n    borderBottom: \"#777777\"\n  },\n  cryptoSentiment: {\n    primary: \"#fff\",\n    secondary: \"#b4b4b4\",\n    background: \"#211927\"\n  }\n};\n\nexport default {\n  light: mergeDeepRight(base, light),\n  dark: mergeDeepRight(base, dark)\n};\n","import React from \"react\";\nimport { Grommet } from \"grommet\";\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch\n} from \"react-router-dom\";\nimport ApolloClient from \"apollo-client\";\nimport {\n  InMemoryCache,\n  IntrospectionFragmentMatcher\n} from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { createGlobalStyle } from \"styled-components\";\n\nimport List from \"./components/list\";\nimport {\n  EmotionMeter,\n  TickerWidget,\n  TagCloud,\n  DailyOverview,\n  PopularAccounts,\n  SentimentNews,\n  PopularCurrencies,\n  DataTableWidget,\n  CryptoSentiment,\n  TweetsOnChart\n} from \"./widgets\";\n\nimport theme from \"./utils/theme\";\n\nimport introspectionQueryResultData from \"./generated/fragment-types.json\";\n\nconst FontEOT = require(\"./assets/fonts/AvertaStd-Regular.eot\");\nconst FontWOFF = require(\"./assets/fonts/AvertaStd-Regular.woff\");\nconst FontWOFF2 = require(\"./assets/fonts/AvertaStd-Regular.woff2\");\nconst FontSVG = require(\"./assets/fonts/AvertaStd-Regular.svg\");\n\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData\n});\n\nconst cache = new InMemoryCache({ fragmentMatcher });\nconst link = new HttpLink({ uri: process.env.REACT_APP_API });\n\nconst client = new ApolloClient({ cache: cache, link: link });\n\nconst getParams = new URLSearchParams(window.location.search);\nconst appTheme = getParams.get(\"theme\") === \"dark\" ? theme.dark : theme.light;\n\nconst GlobalStyle = createGlobalStyle`\n  @font-face {\n    font-family: 'Averta';    \n    src: url(${FontEOT});\n    src: url(${FontWOFF2}), \n        url(${FontWOFF}),      \n        url(${FontSVG}) format('svg'); \n  }\n\n  body {\n    margin: 0;\n    font-family: 'Averta', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    overflow-y: auto;\n    overflow-x: hidden;\n    width: 100vw;\n  }\n`;\n\nconst App: React.FC = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Grommet theme={appTheme} plain>\n        <GlobalStyle />\n        <Router>\n          <Switch>\n            <Route path=\"/\" exact component={List} />\n\n            <Route path=\"/emotion-meter\" exact component={EmotionMeter} />\n            <Route path=\"/ticker-widget\" exact component={TickerWidget} />\n            <Route path=\"/tag-cloud\" exact component={TagCloud} />\n            <Route path=\"/daily-overview\" exact component={DailyOverview} />\n            <Route path=\"/sentiment-news\" exact component={SentimentNews} />\n            <Route path=\"/popular-accounts\" exact component={PopularAccounts} />\n            <Route path=\"/data-table\" exact component={DataTableWidget} />\n            <Route path=\"/tweets-on-chart\" exact component={TweetsOnChart} />\n            <Route\n              path=\"/popular-currencies\"\n              exact\n              component={PopularCurrencies}\n            />\n            <Route path=\"/crypto-sentiment\" exact component={CryptoSentiment} />\n\n            <Redirect to=\"/\" />\n          </Switch>\n        </Router>\n      </Grommet>\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
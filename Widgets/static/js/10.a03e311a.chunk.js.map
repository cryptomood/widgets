{"version":3,"sources":["generated/apollo.ts","components/cryptomood-svg.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/grommet/es6/components/Heading/StyledHeading.js","../node_modules/grommet/es6/components/Heading/Heading.js","../node_modules/grommet/es6/components/Image/StyledImage.js","../node_modules/grommet/es6/components/Image/Image.js","widgets/daily-overview/styles.tsx","widgets/daily-overview/utils/utils.tsx","widgets/daily-overview/component.tsx"],"names":["FragmentSentimentFragmentDoc","gql","CryptoSentimentDocument","useCryptoSentimentQuery","baseOptions","ApolloReactHooks","GetDailyOverviewDocument","useGetDailyOverviewQuery","GetAssetDetailsDocument","GetSentimentDocument","TwitterInfluenceDocument","useTwitterInfluenceQuery","TopAssetsDocument","useTopAssetsQuery","ChartSentimentsDocument","useChartSentimentsQuery","AssetsDocument","useAssetsQuery","HeadlinesDocument","useHeadlinesQuery","GetAssetTagsDocument","useGetAssetTagsQuery","GetPublicationsDocument","TweetsOnChartDocument","useTweetsOnChartQuery","CryptomoodSvg","props","theme","useContext","ThemeContext","style","width","height","viewBox","fill","x","y","rx","cryptoMoodLogo","stroke","border","strokeWidth","d","opacity","text","id","x1","y1","x2","y2","gradientUnits","stopColor","offset","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","TypeError","TEXT_ALIGN_MAP","center","end","start","textAlignStyle","textAlign","colorStyle","colorProp","StyledHeading","h1","withConfig","displayName","componentId","font","heading","level","family","size","headingTheme","levelStyle","data","styles","maxWidth","medium","weight","responsive","responsiveBreakpoint","breakpoint","global","breakpoints","responsiveData","Math","min","console","warn","truncate","extend","_extends","assign","target","arguments","source","key","hasOwnProperty","apply","this","defaultProps","setPrototypeOf","color","rest","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","createElement","as","HeadingWrapper","FIT_MAP","cover","contain","fitStyle","fit","StyledImage","img","image","opacityProp","ImageWrapper","_ref","fallback","forwardRef","onError","src","_useState","imageMissing","setImageMissing","extraProps","event","ref","Link","styled","a","dailyOverview","primary","StyledIcon","ConvertSentiment","sentiment","urlRegex","wwwRemoveRegex","DailyOverviewComponent","asset","useRef","URLSearchParams","window","location","search","current","get","variables","toUpperCase","loading","useState","imageHash","setImageHash","useEffect","timer","setTimeout","Date","now","clearTimeout","Box","background","pad","justify","href","Heading","getAssets","assets","direction","marginBottom","Text","marginLeft","news_sentiment_value","social_sentiment_value","secondary","lineHeight","getGeneratedOverview","message","map","margin","vertical","UID","DELIMITER_OPEN_TAG","DELIMITER_CLOSED_TAG","DELIMITER_SPLITTER_REGEX","RegExp","splittedParts","replace","url","split","part","match","URL","hostname","linkify","images","rel","Image"],"mappings":"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","file":"static/js/10.a03e311a.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\nimport * as ApolloReactCommon from \"@apollo/react-common\";\nimport * as ApolloReactHooks from \"@apollo/react-hooks\";\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type AddCommentRequest = {\n  commentId?: Maybe<Scalars[\"ID\"]>;\n  postId: Scalars[\"String\"];\n  content: Scalars[\"String\"];\n};\n\nexport type AddCommentResponse = {\n  __typename: \"AddCommentResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  comment?: Maybe<Comment>;\n};\n\nexport type Alarm = {\n  __typename: \"Alarm\";\n  id: Scalars[\"ID\"];\n  enabled: Scalars[\"Boolean\"];\n  parts: Array<AlarmPart>;\n};\n\nexport type AlarmEnableRequest = {\n  alarm_id: Scalars[\"ID\"];\n  enabled: Scalars[\"Boolean\"];\n};\n\nexport type AlarmEnableResponse = {\n  __typename: \"AlarmEnableResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  enabled: Scalars[\"Boolean\"];\n};\n\nexport type AlarmOption = {\n  __typename: \"AlarmOption\";\n  id: Scalars[\"ID\"];\n  code: Scalars[\"String\"];\n  position: Scalars[\"Int\"];\n  has_custom: Scalars[\"Boolean\"];\n  childs: Array<AlarmOption>;\n};\n\nexport type AlarmPart = {\n  __typename: \"AlarmPart\";\n  asset: Scalars[\"String\"];\n  alarm_options: Array<AlarmOption>;\n  custom?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type AlarmPartRequest = {\n  asset: Scalars[\"String\"];\n  alarm_options: Array<Scalars[\"ID\"]>;\n  custom?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type Article = {\n  __typename: \"Article\";\n  base: BaseModel;\n  sentiment: SentimentModel;\n  named_entities: NamedEntitiesModel;\n  comments: Array<Comment>;\n  comment_count: Scalars[\"Int\"];\n  votes: Array<PostVote>;\n  votes_value: Scalars[\"Int\"];\n  my_vote: Scalars[\"Int\"];\n  topicsLength: Scalars[\"Int\"];\n  topics: Array<Article>;\n};\n\nexport type Asset = {\n  __typename: \"Asset\";\n  id: Scalars[\"ID\"];\n  name: Scalars[\"String\"];\n  cap: Scalars[\"Float\"];\n  price: Scalars[\"Float\"];\n  icon: Scalars[\"String\"];\n  social_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  news_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  social_sentiments: Array<Scalars[\"Float\"]>;\n  news_sentiments: Array<Scalars[\"Float\"]>;\n  social_sentiment_volumes: Array<Scalars[\"Int\"]>;\n  news_sentiment_volumes: Array<Scalars[\"Int\"]>;\n  price_change: Scalars[\"Float\"];\n  articlesCount: Scalars[\"Int\"];\n  tweetsCount: Scalars[\"Int\"];\n  redditPostsCount: Scalars[\"Int\"];\n  telegramMessagesCount: Scalars[\"Int\"];\n  bitmexMessagesCount: Scalars[\"Int\"];\n  historyM1: Array<Histocandle>;\n  historyH1: Array<Histocandle>;\n};\n\nexport type AssetDetailsResponse = {\n  __typename: \"AssetDetailsResponse\";\n  id: Scalars[\"ID\"];\n  icon: Scalars[\"String\"];\n  name: Scalars[\"String\"];\n  social_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  news_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  change?: Maybe<SentimentChange>;\n  stats?: Maybe<GetPublicationsStatsResponse>;\n  transactions?: Maybe<GenericCount>;\n};\n\nexport type AssetListResponse = {\n  __typename: \"AssetListResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  assets: Array<LimitedAsset>;\n};\n\nexport type AssetSentiment = {\n  __typename: \"AssetSentiment\";\n  id: Scalars[\"ID\"];\n  name: Scalars[\"String\"];\n  icon: Scalars[\"String\"];\n  change: Scalars[\"Float\"];\n};\n\nexport type AssetsFilter = {\n  assets?: Maybe<Array<Scalars[\"String\"]>>;\n  allAssets?: Maybe<Scalars[\"Boolean\"]>;\n};\n\nexport type AssetsResponse = {\n  __typename: \"AssetsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  assets: Array<Asset>;\n};\n\nexport type BaseGetResponse = {\n  __typename: \"BaseGetResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type BaseModel = {\n  __typename: \"BaseModel\";\n  id: Scalars[\"ID\"];\n  title: Scalars[\"String\"];\n  content: Scalars[\"String\"];\n  crawler: Scalars[\"String\"];\n  pub_date: Scalars[\"Int\"];\n  created: Scalars[\"Int\"];\n  source: Scalars[\"String\"];\n  excerpt: Scalars[\"String\"];\n  videos: Array<Scalars[\"String\"]>;\n  images: Array<Scalars[\"String\"]>;\n  links: Array<Scalars[\"String\"]>;\n  author: Scalars[\"String\"];\n  lang: Scalars[\"String\"];\n  weight: Scalars[\"Float\"];\n  spam: Scalars[\"Float\"];\n  domain: Scalars[\"String\"];\n  favicon: Scalars[\"String\"];\n  editors_pick: Scalars[\"Boolean\"];\n};\n\nexport type CancelUserSubscriptionRequest = {\n  userId: Scalars[\"Int\"];\n  planId: Scalars[\"Int\"];\n};\n\nexport type Candle = {\n  __typename: \"Candle\";\n  id: Scalars[\"ID\"];\n  timestamp: Scalars[\"Int\"];\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  pv: Scalars[\"Int\"];\n  nv: Scalars[\"Int\"];\n  ps: Scalars[\"Float\"];\n  ns: Scalars[\"Float\"];\n  a: Scalars[\"Float\"];\n};\n\nexport type CandleId = {\n  __typename: \"CandleId\";\n  year: Scalars[\"Int\"];\n  month: Scalars[\"Int\"];\n  day: Scalars[\"Int\"];\n  hour: Scalars[\"Int\"];\n  minute: Scalars[\"Int\"];\n};\n\nexport type Category = {\n  __typename: \"Category\";\n  id: Scalars[\"ID\"];\n  text: Scalars[\"String\"];\n  stats?: Maybe<CategoryStats>;\n};\n\nexport type CategoryStats = {\n  __typename: \"CategoryStats\";\n  posts: Scalars[\"Int\"];\n};\n\nexport type ChangePasswordResponse = {\n  __typename: \"ChangePasswordResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  user?: Maybe<User>;\n};\n\nexport type ChangeProfileResponse = {\n  __typename: \"ChangeProfileResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  user?: Maybe<User>;\n};\n\nexport type ChangeSettingsRequest = {\n  savedPosts?: Maybe<Array<Scalars[\"String\"]>>;\n  defaultExchange?: Maybe<Scalars[\"String\"]>;\n  theme?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type ChangeSettingsResponse = {\n  __typename: \"ChangeSettingsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type ChannelLocalization = {\n  __typename: \"ChannelLocalization\";\n  description: Scalars[\"String\"];\n  title: Scalars[\"String\"];\n  force_send_fields: Array<Scalars[\"String\"]>;\n  null_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type ChannelSnippet = {\n  __typename: \"ChannelSnippet\";\n  country: Scalars[\"String\"];\n  custom_url: Scalars[\"String\"];\n  default_language: Scalars[\"String\"];\n  description: Scalars[\"String\"];\n  localized: ChannelLocalization;\n  published_at: Scalars[\"String\"];\n  thumbnails: ThumbnailDetails;\n  title: Scalars[\"String\"];\n  force_send_fields: Array<Scalars[\"String\"]>;\n  null_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type ChannelStatistics = {\n  __typename: \"ChannelStatistics\";\n  comment_count: Scalars[\"Float\"];\n  hidden_subscriber_count: Scalars[\"Boolean\"];\n  subscriber_count: Scalars[\"Float\"];\n  video_count: Scalars[\"Float\"];\n  view_count: Scalars[\"Float\"];\n  force_send_fields: Array<Scalars[\"String\"]>;\n  null_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type Comment = {\n  __typename: \"Comment\";\n  id: Scalars[\"ID\"];\n  user: User;\n  user_id: Scalars[\"ID\"];\n  post: Scalars[\"String\"];\n  votes: Array<CommentVote>;\n  my_vote: Scalars[\"Boolean\"];\n  reply_to?: Maybe<Comment>;\n  reply_to_id?: Maybe<Scalars[\"ID\"]>;\n  content: Scalars[\"String\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type CommentVote = {\n  __typename: \"CommentVote\";\n  id: Scalars[\"ID\"];\n  user_id: Scalars[\"ID\"];\n  comment_id: Scalars[\"ID\"];\n  value: Scalars[\"Int\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type CommentVoteRequest = {\n  commentId: Scalars[\"ID\"];\n};\n\nexport type CommentVoteResponse = {\n  __typename: \"CommentVoteResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  votes: Array<CommentVote>;\n  my_vote: Scalars[\"Boolean\"];\n};\n\nexport type CursorPagination = {\n  cursor: Scalars[\"Int\"];\n};\n\nexport type DailySummaryRequest = {\n  asset: Scalars[\"String\"];\n};\n\nexport type DailySummaryResponse = {\n  __typename: \"DailySummaryResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  id: Scalars[\"ID\"];\n  maxTrans: Scalars[\"Float\"];\n  biggestTrans: Array<Transaction>;\n  transToEx: Scalars[\"Float\"];\n  transFromEx: Scalars[\"Float\"];\n  socialSentimentSma: Array<Scalars[\"Float\"]>;\n  newsSentimentSma: Array<Scalars[\"Float\"]>;\n  promoted: Array<Article>;\n  editorsPick?: Maybe<Article>;\n};\n\nexport type DeleteAlarmRequest = {\n  alarm_id: Scalars[\"ID\"];\n};\n\nexport type EmotionListResponse = {\n  __typename: \"EmotionListResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  emotions: Array<Scalars[\"String\"]>;\n};\n\nexport type Event = {\n  __typename: \"Event\";\n  id: Scalars[\"ID\"];\n  title: Scalars[\"String\"];\n  description: Scalars[\"String\"];\n  start: Scalars[\"Int\"];\n  thumbnail: Scalars[\"String\"];\n  location_name: Scalars[\"String\"];\n  location_link: Scalars[\"String\"];\n  ticket_link: Scalars[\"String\"];\n  ticket_provider: Scalars[\"String\"];\n};\n\nexport type Exchange = {\n  __typename: \"Exchange\";\n  id: Scalars[\"ID\"];\n  name: Scalars[\"String\"];\n  url: Scalars[\"String\"];\n  icon: Scalars[\"String\"];\n};\n\nexport type ExtendedTweet = {\n  __typename: \"ExtendedTweet\";\n  favourite_count: Scalars[\"Int\"];\n  filter_level: Scalars[\"String\"];\n  id_str: Scalars[\"String\"];\n  in_reply_to_screen_name: Scalars[\"String\"];\n  in_reply_to_status_id_str: Scalars[\"String\"];\n  in_reply_to_user_id_str: Scalars[\"String\"];\n  is_quote_status: Scalars[\"String\"];\n  lang: Scalars[\"String\"];\n  possibly_sensitive: Scalars[\"Boolean\"];\n  quote_count: Scalars[\"Int\"];\n  reply_count: Scalars[\"Int\"];\n  retweet_count: Scalars[\"Int\"];\n  user_mentions: Array<Scalars[\"String\"]>;\n  source: Scalars[\"String\"];\n  author_created_at: Scalars[\"String\"];\n  author_default_profile: Scalars[\"Boolean\"];\n  author_default_profile_image: Scalars[\"Boolean\"];\n  author_followers_count: Scalars[\"Int\"];\n  author_friends_count: Scalars[\"Int\"];\n  author_id_str: Scalars[\"String\"];\n  author_lang: Scalars[\"String\"];\n  author_location: Scalars[\"String\"];\n  author_name: Scalars[\"String\"];\n  author_screen_name: Scalars[\"String\"];\n  author_profile_image_url_http: Scalars[\"String\"];\n  author_statuses_count: Scalars[\"Int\"];\n  categories: Array<Scalars[\"String\"]>;\n  truncated: Scalars[\"Boolean\"];\n  full_text: Scalars[\"String\"];\n};\n\nexport type GenericCount = {\n  __typename: \"GenericCount\";\n  count: Scalars[\"Int\"];\n};\n\nexport type GetAlarmOptionsResponse = {\n  __typename: \"GetAlarmOptionsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  options: Array<AlarmOption>;\n};\n\nexport type GetAlarmsResponse = {\n  __typename: \"GetAlarmsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  alarms: Array<Alarm>;\n};\n\nexport type GetArticlesResponse = {\n  __typename: \"GetArticlesResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  articles: Array<Article>;\n};\n\nexport type GetAssetDetailsRequest = {\n  assets: Array<Scalars[\"String\"]>;\n  time_window: Scalars[\"String\"];\n};\n\nexport type GetAssetsBySentimentRequest = {\n  time_window: Scalars[\"String\"];\n};\n\nexport type GetAssetsBySentimentResponse = {\n  __typename: \"GetAssetsBySentimentResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  assets: Array<AssetSentiment>;\n};\n\nexport type GetCategoriesResponse = {\n  __typename: \"GetCategoriesResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  categories: Array<Category>;\n};\n\nexport type GetChatbotQueryResponse = {\n  __typename: \"GetChatbotQueryResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  message: Scalars[\"String\"];\n};\n\nexport type GetChatbotRawQueryRequest = {\n  asset: Scalars[\"String\"];\n  indicators: Array<Scalars[\"String\"]>;\n  resImg?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetChatbotRawQueryResponse = {\n  __typename: \"GetChatbotRawQueryResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  message: Scalars[\"String\"];\n  images: Array<Scalars[\"String\"]>;\n};\n\nexport type GetCommentsResponse = {\n  __typename: \"GetCommentsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  comments: Array<Comment>;\n};\n\nexport type GetEventsRequest = {\n  asset: Scalars[\"String\"];\n};\n\nexport type GetEventsResponse = {\n  __typename: \"GetEventsResponse\";\n  events: Array<Event>;\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetFeedHeadlinesResponse = {\n  __typename: \"GetFeedHeadlinesResponse\";\n  entries: Array<Publication>;\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetGeneratedOverviewResponse = {\n  __typename: \"GetGeneratedOverviewResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  message: Array<Scalars[\"String\"]>;\n  images: Array<Scalars[\"String\"]>;\n};\n\nexport type GetHistoricGithubIndicatorResponse = {\n  __typename: \"GetHistoricGithubIndicatorResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  candles: Array<GithubCandle>;\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetNotificationConfigRequest = {\n  token: Scalars[\"String\"];\n};\n\nexport type GetPublicationsResponse = {\n  __typename: \"GetPublicationsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  publications: Array<Maybe<Publication>>;\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetPublicationsSearchResponse = {\n  __typename: \"GetPublicationsSearchResponse\";\n  entries: Array<Publication>;\n};\n\nexport type GetPublicationsStatsRequest = {\n  asset: Scalars[\"String\"];\n  time_window?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type GetPublicationsStatsResponse = {\n  __typename: \"GetPublicationsStatsResponse\";\n  articles_count: Scalars[\"Int\"];\n  tweets_count: Scalars[\"Int\"];\n  reddit_posts_count: Scalars[\"Int\"];\n  telegram_messages_count: Scalars[\"Int\"];\n  bitmex_messages_count: Scalars[\"Int\"];\n};\n\nexport type GetRedditPostsResponse = {\n  __typename: \"GetRedditPostsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  reddit_posts: Array<RedditPost>;\n};\n\nexport type GetRelatedArticlesResponse = {\n  __typename: \"GetRelatedArticlesResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  related: Array<Article>;\n};\n\nexport type GetSentimentsResponse = {\n  __typename: \"GetSentimentsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  candles: Array<Candle>;\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetSentimentValueRequest = {\n  asset: Scalars[\"String\"];\n  time_window: Scalars[\"String\"];\n};\n\nexport type GetSentimentValueResponse = {\n  __typename: \"GetSentimentValueResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  social_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  news_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  social_sentiment_sma: Array<Scalars[\"Float\"]>;\n  news_sentiment_sma: Array<Scalars[\"Float\"]>;\n};\n\nexport type GetTagsRequest = {\n  limit: Scalars[\"Int\"];\n  asset: Scalars[\"String\"];\n  time_window: Scalars[\"String\"];\n};\n\nexport type GetTagsResponse = {\n  __typename: \"GetTagsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  tags: Array<TagCount>;\n};\n\nexport type GetTopicsResponse = {\n  __typename: \"GetTopicsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  topics: Array<Topic>;\n};\n\nexport type GetTopTwitterInfluencersRequest = {\n  limit?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetTopTwitterInfluencersResponse = {\n  __typename: \"GetTopTwitterInfluencersResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  users: Array<TwitterUser>;\n};\n\nexport type GetTransactionsResponse = {\n  __typename: \"GetTransactionsResponse\";\n  transactions: Array<Transaction>;\n  count: Scalars[\"Int\"];\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetTweetChartRequest = {\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  time_window?: Maybe<Scalars[\"String\"]>;\n  tweet_limit?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetTweetsResponse = {\n  __typename: \"GetTweetsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  tweets: Array<Tweet>;\n};\n\nexport type GetVideosResponse = {\n  __typename: \"GetVideosResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  videos: Array<Video>;\n};\n\nexport type GithubCandle = {\n  __typename: \"GithubCandle\";\n  id: Scalars[\"ID\"];\n  timestamp: Scalars[\"Int\"];\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  sum: Scalars[\"Int\"];\n};\n\nexport type HeadlinesFeedRequest = {\n  asset?: Maybe<Scalars[\"String\"]>;\n  categories?: Maybe<Array<Scalars[\"String\"]>>;\n  text?: Maybe<Scalars[\"String\"]>;\n  pagination?: Maybe<CursorPagination>;\n};\n\nexport type Histocandle = {\n  __typename: \"Histocandle\";\n  time: Scalars[\"Int\"];\n  close: Scalars[\"Float\"];\n  high: Scalars[\"Float\"];\n  low: Scalars[\"Float\"];\n  open: Scalars[\"Float\"];\n  volume_from: Scalars[\"Float\"];\n  volume_to: Scalars[\"Float\"];\n};\n\nexport type HistoricGithubIndicatorRequest = {\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  event_type: Scalars[\"Int\"];\n  time_window?: Maybe<Scalars[\"String\"]>;\n  pagination?: Maybe<CursorPagination>;\n};\n\nexport type HistoricPublicationsRequest = {\n  asset: Scalars[\"String\"];\n  timeframe?: Maybe<Scalars[\"String\"]>;\n  weight?: Maybe<WeightParameter>;\n  pagination?: Maybe<CursorPagination>;\n  expressionFilter?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type HistoricSentimentsRequest = {\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  emotion?: Maybe<Scalars[\"String\"]>;\n  page_size?: Maybe<Scalars[\"String\"]>;\n  pagination?: Maybe<CursorPagination>;\n};\n\nexport type HistoricTransactionsRequest = {\n  asset: Scalars[\"String\"];\n  time_window?: Maybe<Scalars[\"String\"]>;\n  pagination?: Maybe<CursorPagination>;\n  expressionFilter?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type LimitedAsset = {\n  __typename: \"LimitedAsset\";\n  id: Scalars[\"ID\"];\n  name: Scalars[\"String\"];\n  icon: Scalars[\"String\"];\n};\n\nexport type LoginLog = {\n  __typename: \"LoginLog\";\n  id: Scalars[\"ID\"];\n  user: User;\n  ip: Scalars[\"String\"];\n  location: Scalars[\"String\"];\n};\n\nexport type Membership = {\n  __typename: \"Membership\";\n  id: Scalars[\"ID\"];\n  user_id: Scalars[\"ID\"];\n  plan_id: Scalars[\"ID\"];\n  due: Scalars[\"String\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type Mutation = {\n  __typename: \"Mutation\";\n  signUp: SignUpResponse;\n  signIn: SignInResponse;\n  refreshToken: RefreshTokenResponse;\n  signOut: SignOutResponse;\n  changePassword: ChangePasswordResponse;\n  passwordChangeRequest: BaseGetResponse;\n  changeProfile: ChangeProfileResponse;\n  updateUserWatchlist: UpdateUserWatchlistResponse;\n  updateUserSubscription: UpdateUserSubscriptionResponse;\n  cancelUserSubscription: UpdateUserSubscriptionResponse;\n  changeSettings: ChangeSettingsResponse;\n  postVote: PostVotingResponse;\n  commentUpvote: CommentVoteResponse;\n  commentUnvote: CommentVoteResponse;\n  addComment: AddCommentResponse;\n  setAlarm: SetAlarmResponse;\n  deleteAlarm: BaseGetResponse;\n  setAlarmEnabled: AlarmEnableResponse;\n  setNotificationToken: NotificationToken;\n};\n\nexport type MutationSignUpArgs = {\n  request: SignUpRequest;\n};\n\nexport type MutationSignInArgs = {\n  email: Scalars[\"String\"];\n  password: Scalars[\"String\"];\n};\n\nexport type MutationRefreshTokenArgs = {\n  request: RefreshTokenRequest;\n};\n\nexport type MutationChangePasswordArgs = {\n  password: Scalars[\"String\"];\n};\n\nexport type MutationPasswordChangeRequestArgs = {\n  request: PasswordChangeRequest;\n};\n\nexport type MutationChangeProfileArgs = {\n  bio?: Maybe<Scalars[\"String\"]>;\n  avatar?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type MutationUpdateUserWatchlistArgs = {\n  assets: Array<Scalars[\"String\"]>;\n};\n\nexport type MutationUpdateUserSubscriptionArgs = {\n  request: UpdateUserSubscriptionRequest;\n};\n\nexport type MutationCancelUserSubscriptionArgs = {\n  request: CancelUserSubscriptionRequest;\n};\n\nexport type MutationChangeSettingsArgs = {\n  request: ChangeSettingsRequest;\n};\n\nexport type MutationPostVoteArgs = {\n  request: PostVoteRequest;\n};\n\nexport type MutationCommentUpvoteArgs = {\n  request: CommentVoteRequest;\n};\n\nexport type MutationCommentUnvoteArgs = {\n  request: CommentVoteRequest;\n};\n\nexport type MutationAddCommentArgs = {\n  request: AddCommentRequest;\n};\n\nexport type MutationSetAlarmArgs = {\n  request: SetAlarmRequest;\n};\n\nexport type MutationDeleteAlarmArgs = {\n  request: DeleteAlarmRequest;\n};\n\nexport type MutationSetAlarmEnabledArgs = {\n  request: AlarmEnableRequest;\n};\n\nexport type MutationSetNotificationTokenArgs = {\n  request: SetNotificationTokenRequest;\n};\n\nexport type NamedEntitiesModel = {\n  __typename: \"NamedEntitiesModel\";\n  symbols: Array<Scalars[\"String\"]>;\n  tags: Array<Scalars[\"String\"]>;\n};\n\nexport type NotificationToken = {\n  __typename: \"NotificationToken\";\n  id: Scalars[\"ID\"];\n  token: Scalars[\"String\"];\n  notification_other: Scalars[\"Boolean\"];\n  notification_alarms: Scalars[\"Boolean\"];\n  notification_important: Scalars[\"Boolean\"];\n};\n\nexport type PasswordChangeRequest = {\n  email?: Maybe<Scalars[\"String\"]>;\n  token?: Maybe<Scalars[\"String\"]>;\n  password?: Maybe<Scalars[\"String\"]>;\n  passwordRepeat?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type PostVote = {\n  __typename: \"PostVote\";\n  id: Scalars[\"ID\"];\n  user_id: Scalars[\"ID\"];\n  post: Scalars[\"String\"];\n  value: Scalars[\"Int\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type PostVoteRequest = {\n  postId: Scalars[\"String\"];\n  value: Scalars[\"Int\"];\n};\n\nexport type PostVotingResponse = {\n  __typename: \"PostVotingResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  publication?: Maybe<Publication>;\n};\n\nexport type PriceUpdate = {\n  __typename: \"PriceUpdate\";\n  price: Scalars[\"Float\"];\n};\n\nexport type Publication = Article | Tweet | RedditPost | Video;\n\nexport type PublicationByIdRequest = {\n  id: Scalars[\"String\"];\n};\n\nexport type PublicationsSearchRequest = {\n  assets?: Maybe<Array<Scalars[\"String\"]>>;\n  categories?: Maybe<Array<Scalars[\"String\"]>>;\n  text?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type Query = {\n  __typename: \"Query\";\n  getAssets: AssetsResponse;\n  getAssetList: AssetListResponse;\n  getMyProfile: UserProfileResponse;\n  getTopics: GetTopicsResponse;\n  getEmotions: EmotionListResponse;\n  getHistoricSocialSentiments: GetSentimentsResponse;\n  getHistoricNewsSentiments: GetSentimentsResponse;\n  getHistoricBuzzSentiments: GetSentimentsResponse;\n  getHistoricTransactions: GetTransactionsResponse;\n  getHistoricArticles: GetArticlesResponse;\n  getHistoricTweets: GetTweetsResponse;\n  getHistoricRedditPosts: GetRedditPostsResponse;\n  getHistoricVideos: GetVideosResponse;\n  getHistoricPublications: GetPublicationsResponse;\n  getHistoricGithubIndicator: GetHistoricGithubIndicatorResponse;\n  getFeedHeadlines: GetFeedHeadlinesResponse;\n  getEvents: GetEventsResponse;\n  getUserById: UserProfileResponse;\n  getDailySummary: DailySummaryResponse;\n  getCategories: GetCategoriesResponse;\n  getPublications: GetPublicationsSearchResponse;\n  getPublication: Publication;\n  getSocialChart: SocialChartResponse;\n  getAlarmOptions: GetAlarmOptionsResponse;\n  getAlarms?: Maybe<GetAlarmsResponse>;\n  getComments: GetCommentsResponse;\n  getRelatedArticles: GetRelatedArticlesResponse;\n  getPublicationStats: GetPublicationsStatsResponse;\n  getChatbotQuery: GetChatbotQueryResponse;\n  getChatbotRawQuery: GetChatbotRawQueryResponse;\n  getGeneratedOverview: GetGeneratedOverviewResponse;\n  getTags: GetTagsResponse;\n  getSentimentValue: GetSentimentValueResponse;\n  getTopTwitterInfluencers: GetTopTwitterInfluencersResponse;\n  getAssetsBySentiment: GetAssetsBySentimentResponse;\n  getExchanges: Array<Exchange>;\n  getNotificationTokens: Array<NotificationToken>;\n  getNotificationConfig: NotificationToken;\n  getAssetDetails: Array<AssetDetailsResponse>;\n  getTweetChart: TweetChartResponse;\n};\n\nexport type QueryGetAssetsArgs = {\n  assets?: Maybe<Array<Scalars[\"String\"]>>;\n  limit?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type QueryGetTopicsArgs = {\n  asset: Scalars[\"String\"];\n};\n\nexport type QueryGetHistoricSocialSentimentsArgs = {\n  request: HistoricSentimentsRequest;\n};\n\nexport type QueryGetHistoricNewsSentimentsArgs = {\n  request: HistoricSentimentsRequest;\n};\n\nexport type QueryGetHistoricBuzzSentimentsArgs = {\n  request: HistoricSentimentsRequest;\n};\n\nexport type QueryGetHistoricTransactionsArgs = {\n  request: HistoricTransactionsRequest;\n};\n\nexport type QueryGetHistoricArticlesArgs = {\n  request: HistoricPublicationsRequest;\n};\n\nexport type QueryGetHistoricTweetsArgs = {\n  request: HistoricPublicationsRequest;\n};\n\nexport type QueryGetHistoricRedditPostsArgs = {\n  request: HistoricPublicationsRequest;\n};\n\nexport type QueryGetHistoricVideosArgs = {\n  request: HistoricPublicationsRequest;\n};\n\nexport type QueryGetHistoricPublicationsArgs = {\n  request: HistoricPublicationsRequest;\n};\n\nexport type QueryGetHistoricGithubIndicatorArgs = {\n  request: HistoricGithubIndicatorRequest;\n};\n\nexport type QueryGetFeedHeadlinesArgs = {\n  request: HeadlinesFeedRequest;\n};\n\nexport type QueryGetEventsArgs = {\n  request: GetEventsRequest;\n};\n\nexport type QueryGetUserByIdArgs = {\n  id: Scalars[\"Int\"];\n};\n\nexport type QueryGetDailySummaryArgs = {\n  request: DailySummaryRequest;\n};\n\nexport type QueryGetPublicationsArgs = {\n  request: PublicationsSearchRequest;\n};\n\nexport type QueryGetPublicationArgs = {\n  request: PublicationByIdRequest;\n};\n\nexport type QueryGetSocialChartArgs = {\n  request: SocialChartRequest;\n};\n\nexport type QueryGetCommentsArgs = {\n  request: PublicationByIdRequest;\n};\n\nexport type QueryGetRelatedArticlesArgs = {\n  request: PublicationByIdRequest;\n};\n\nexport type QueryGetPublicationStatsArgs = {\n  request: GetPublicationsStatsRequest;\n};\n\nexport type QueryGetChatbotQueryArgs = {\n  query: Scalars[\"String\"];\n};\n\nexport type QueryGetChatbotRawQueryArgs = {\n  request: GetChatbotRawQueryRequest;\n};\n\nexport type QueryGetGeneratedOverviewArgs = {\n  asset: Scalars[\"String\"];\n};\n\nexport type QueryGetTagsArgs = {\n  request: GetTagsRequest;\n};\n\nexport type QueryGetSentimentValueArgs = {\n  request?: Maybe<GetSentimentValueRequest>;\n};\n\nexport type QueryGetTopTwitterInfluencersArgs = {\n  limit?: Maybe<Scalars[\"Int\"]>;\n  resolution: Scalars[\"String\"];\n};\n\nexport type QueryGetAssetsBySentimentArgs = {\n  request: GetAssetsBySentimentRequest;\n};\n\nexport type QueryGetNotificationConfigArgs = {\n  request: GetNotificationConfigRequest;\n};\n\nexport type QueryGetAssetDetailsArgs = {\n  request: GetAssetDetailsRequest;\n};\n\nexport type QueryGetTweetChartArgs = {\n  request: GetTweetChartRequest;\n};\n\nexport type RedditPost = {\n  __typename: \"RedditPost\";\n  base: BaseModel;\n  sentiment: SentimentModel;\n  named_entities: NamedEntitiesModel;\n  reddit_post_model: RedditPostModel;\n  comments: Array<Comment>;\n  votes: Array<PostVote>;\n  votes_value: Scalars[\"Int\"];\n  my_vote: Scalars[\"Int\"];\n  comment_count: Scalars[\"Int\"];\n};\n\nexport type RedditPostModel = {\n  __typename: \"RedditPostModel\";\n  id: Scalars[\"ID\"];\n  url: Scalars[\"String\"];\n  author: Scalars[\"String\"];\n  self_text: Scalars[\"String\"];\n  name: Scalars[\"String\"];\n  permalink: Scalars[\"String\"];\n  deleted: Scalars[\"Boolean\"];\n  ups: Scalars[\"Int\"];\n  downs: Scalars[\"Int\"];\n  likes: Scalars[\"Boolean\"];\n  num_comments: Scalars[\"Int\"];\n  score: Scalars[\"Int\"];\n  domain: Scalars[\"String\"];\n  subreddit_id: Scalars[\"String\"];\n  hidden: Scalars[\"Boolean\"];\n  locked: Scalars[\"Boolean\"];\n  thumbnail: Scalars[\"String\"];\n  gilded: Scalars[\"Int\"];\n  distinguished: Scalars[\"String\"];\n  stickied: Scalars[\"Boolean\"];\n  is_reddit_media_domain: Scalars[\"Boolean\"];\n  hot_rate: Scalars[\"Float\"];\n  subreddit: Scalars[\"String\"];\n  is_self: Scalars[\"Boolean\"];\n  nsfw: Scalars[\"Boolean\"];\n  is_update: Scalars[\"Boolean\"];\n};\n\nexport type RefreshTokenRequest = {\n  token: Scalars[\"String\"];\n};\n\nexport type RefreshTokenResponse = {\n  __typename: \"RefreshTokenResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  accessToken: Scalars[\"String\"];\n  refreshToken: Scalars[\"String\"];\n};\n\nexport type Role = {\n  __typename: \"Role\";\n  id: Scalars[\"ID\"];\n  label: Scalars[\"String\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type SentimentChange = {\n  __typename: \"SentimentChange\";\n  change: Scalars[\"Float\"];\n};\n\nexport type SentimentModel = {\n  __typename: \"SentimentModel\";\n  sentiment: Scalars[\"Float\"];\n  market_impact: Scalars[\"Float\"];\n};\n\nexport type SetAlarmRequest = {\n  update_id?: Maybe<Scalars[\"ID\"]>;\n  parts: Array<AlarmPartRequest>;\n  enabled: Scalars[\"Boolean\"];\n};\n\nexport type SetAlarmResponse = {\n  __typename: \"SetAlarmResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type SetNotificationTokenRequest = {\n  token: Scalars[\"String\"];\n  notification_other?: Maybe<Scalars[\"Boolean\"]>;\n  notification_alarms?: Maybe<Scalars[\"Boolean\"]>;\n  notification_important?: Maybe<Scalars[\"Boolean\"]>;\n};\n\nexport type Settings = {\n  __typename: \"Settings\";\n  id: Scalars[\"ID\"];\n  saved_posts: Array<Scalars[\"String\"]>;\n  default_exchange: Scalars[\"String\"];\n  theme: Scalars[\"String\"];\n};\n\nexport type SignInResponse = {\n  __typename: \"SignInResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  token: Scalars[\"String\"];\n  refreshToken: Scalars[\"String\"];\n};\n\nexport type SignOutResponse = {\n  __typename: \"SignOutResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type SignUpRequest = {\n  email: Scalars[\"String\"];\n  password: Scalars[\"String\"];\n  referral?: Maybe<Scalars[\"String\"]>;\n  username: Scalars[\"String\"];\n};\n\nexport type SignUpResponse = {\n  __typename: \"SignUpResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  user?: Maybe<User>;\n};\n\nexport type SocialChartData = {\n  __typename: \"SocialChartData\";\n  positive: Scalars[\"Int\"];\n  neutral: Scalars[\"Int\"];\n  negative: Scalars[\"Int\"];\n};\n\nexport type SocialChartRequest = {\n  publicationId: Scalars[\"String\"];\n};\n\nexport type SocialChartResponse = {\n  __typename: \"SocialChartResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  values: Array<SocialChartData>;\n};\n\nexport type Subscription = {\n  __typename: \"Subscription\";\n  assetPrice: PriceUpdate;\n  socialSentimentSubscription: Candle;\n  newsSentimentSubscription: Candle;\n  buzzSentimentSubscription: Candle;\n  article: Article;\n  tweet: Tweet;\n  redditPost: RedditPost;\n  video: Video;\n};\n\nexport type SubscriptionAssetPriceArgs = {\n  asset?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type TagCount = {\n  __typename: \"TagCount\";\n  tag: Scalars[\"String\"];\n  count: Scalars[\"Int\"];\n};\n\nexport type Tags = {\n  __typename: \"Tags\";\n  id: Scalars[\"ID\"];\n  label: Scalars[\"String\"];\n  visible: Scalars[\"Boolean\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type Thumbnail = {\n  __typename: \"Thumbnail\";\n  height: Scalars[\"Float\"];\n  url: Scalars[\"String\"];\n  width: Scalars[\"Float\"];\n  force_send_fields: Array<Scalars[\"String\"]>;\n  null_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type ThumbnailDetails = {\n  __typename: \"ThumbnailDetails\";\n  default: Thumbnail;\n  high: Thumbnail;\n  maxres: Thumbnail;\n  medium: Thumbnail;\n  standard: Thumbnail;\n  force_send_fields: Array<Scalars[\"String\"]>;\n  null_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type Topic = {\n  __typename: \"Topic\";\n  id: Scalars[\"ID\"];\n  weight: Scalars[\"Float\"];\n  title: Scalars[\"String\"];\n  source: Scalars[\"String\"];\n  crawler: Scalars[\"String\"];\n  pub_date: Scalars[\"Int\"];\n  symbols: Array<Scalars[\"String\"]>;\n  topics: Array<Scalars[\"String\"]>;\n};\n\nexport type Transaction = {\n  __typename: \"Transaction\";\n  id: Scalars[\"ID\"];\n  hash: Scalars[\"String\"];\n  from_address: Scalars[\"String\"];\n  to_address: Scalars[\"String\"];\n  from_owner: Scalars[\"String\"];\n  to_owner: Scalars[\"String\"];\n  time: Scalars[\"Int\"];\n  comment: Scalars[\"String\"];\n  asset: Scalars[\"String\"];\n  size: Scalars[\"Float\"];\n  USD_size: Scalars[\"Float\"];\n};\n\nexport type Tweet = {\n  __typename: \"Tweet\";\n  base: BaseModel;\n  sentiment: SentimentModel;\n  named_entities: NamedEntitiesModel;\n  extended_tweet: ExtendedTweet;\n  comments: Array<Comment>;\n  votes: Array<PostVote>;\n  votes_value: Scalars[\"Int\"];\n  my_vote: Scalars[\"Int\"];\n  comment_count: Scalars[\"Int\"];\n};\n\nexport type TweetChartResponse = {\n  __typename: \"TweetChartResponse\";\n  candles: Array<Candle>;\n  tweets: Array<Tweet>;\n};\n\nexport type TwitterUser = {\n  __typename: \"TwitterUser\";\n  id_str: Scalars[\"String\"];\n  name: Scalars[\"String\"];\n  screen_name: Scalars[\"String\"];\n  profile_banner_url: Scalars[\"String\"];\n  profile_image_url_https: Scalars[\"String\"];\n  order_change: Scalars[\"Int\"];\n};\n\nexport type UpdateUserSubscriptionRequest = {\n  userId: Scalars[\"Int\"];\n  planId: Scalars[\"Int\"];\n};\n\nexport type UpdateUserSubscriptionResponse = {\n  __typename: \"UpdateUserSubscriptionResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type UpdateUserWatchlistResponse = {\n  __typename: \"UpdateUserWatchlistResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type User = {\n  __typename: \"User\";\n  id: Scalars[\"ID\"];\n  email: Scalars[\"String\"];\n  password: Scalars[\"String\"];\n  username: Scalars[\"String\"];\n  role?: Maybe<Role>;\n  bio: Scalars[\"String\"];\n  avatar: Scalars[\"String\"];\n  referral: Scalars[\"String\"];\n  created_at: Scalars[\"String\"];\n  updated_at: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n  watchlist: Array<Scalars[\"String\"]>;\n  memberships?: Maybe<Array<Membership>>;\n  settings: Settings;\n  notification_tokens: Array<Scalars[\"String\"]>;\n};\n\nexport type UserProfileResponse = {\n  __typename: \"UserProfileResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  user?: Maybe<User>;\n};\n\nexport type Video = {\n  __typename: \"Video\";\n  base: BaseModel;\n  sentiment: SentimentModel;\n  named_entities: NamedEntitiesModel;\n  channel_snippet: ChannelSnippet;\n  channel_statistics: ChannelStatistics;\n  video_statistics: VideoStatistics;\n  comments: Array<Comment>;\n  votes: Array<PostVote>;\n  votes_value: Scalars[\"Int\"];\n  my_vote: Scalars[\"Int\"];\n  comment_count: Scalars[\"Int\"];\n};\n\nexport type VideoStatistics = {\n  __typename: \"VideoStatistics\";\n  comment_count: Scalars[\"Float\"];\n  dislike_count: Scalars[\"Float\"];\n  favorite_count: Scalars[\"Float\"];\n  like_count: Scalars[\"Float\"];\n  view_count: Scalars[\"Float\"];\n  force_send_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type WeightParameter = {\n  gte: Scalars[\"Float\"];\n  lte: Scalars[\"Float\"];\n};\n\nexport type CryptoSentimentQueryVariables = {\n  assets: Array<Scalars[\"String\"]>;\n  time_window: Scalars[\"String\"];\n};\n\nexport type CryptoSentimentQuery = { __typename: \"Query\" } & {\n  getAssetDetails: Array<\n    { __typename: \"AssetDetailsResponse\" } & Pick<\n      AssetDetailsResponse,\n      \"id\" | \"name\" | \"icon\" | \"social_sentiment_value\" | \"news_sentiment_value\"\n    >\n  >;\n};\n\nexport type GetDailyOverviewQueryVariables = {\n  asset: Scalars[\"String\"];\n};\n\nexport type GetDailyOverviewQuery = { __typename: \"Query\" } & {\n  getAssets: { __typename: \"AssetsResponse\" } & {\n    assets: Array<\n      { __typename: \"Asset\" } & Pick<\n        Asset,\n        \"id\" | \"news_sentiment_value\" | \"social_sentiment_value\"\n      >\n    >;\n  };\n  getGeneratedOverview: { __typename: \"GetGeneratedOverviewResponse\" } & Pick<\n    GetGeneratedOverviewResponse,\n    \"ok\" | \"error\" | \"message\" | \"images\"\n  >;\n};\n\nexport type GetAssetDetailsQueryVariables = {\n  assets: Array<Scalars[\"String\"]>;\n  timeWindow: Scalars[\"String\"];\n};\n\nexport type GetAssetDetailsQuery = { __typename: \"Query\" } & {\n  getAssetDetails: Array<\n    { __typename: \"AssetDetailsResponse\" } & Pick<\n      AssetDetailsResponse,\n      \"id\" | \"name\" | \"social_sentiment_value\" | \"news_sentiment_value\"\n    > & {\n        stats: Maybe<\n          { __typename: \"GetPublicationsStatsResponse\" } & Pick<\n            GetPublicationsStatsResponse,\n            | \"articles_count\"\n            | \"tweets_count\"\n            | \"reddit_posts_count\"\n            | \"telegram_messages_count\"\n            | \"bitmex_messages_count\"\n          >\n        >;\n        transactions: Maybe<\n          { __typename: \"GenericCount\" } & Pick<GenericCount, \"count\">\n        >;\n      }\n  >;\n};\n\nexport type GetSentimentQueryVariables = {\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n};\n\nexport type GetSentimentQuery = { __typename: \"Query\" } & {\n  getSentimentValue: { __typename: \"GetSentimentValueResponse\" } & Pick<\n    GetSentimentValueResponse,\n    \"ok\" | \"error\" | \"social_sentiment_value\" | \"news_sentiment_value\"\n  >;\n};\n\nexport type TwitterInfluenceQueryVariables = {\n  limit?: Maybe<Scalars[\"Int\"]>;\n  resolution: Scalars[\"String\"];\n};\n\nexport type TwitterInfluenceQuery = { __typename: \"Query\" } & {\n  getTopTwitterInfluencers: {\n    __typename: \"GetTopTwitterInfluencersResponse\";\n  } & Pick<GetTopTwitterInfluencersResponse, \"ok\" | \"error\"> & {\n      users: Array<\n        { __typename: \"TwitterUser\" } & Pick<\n          TwitterUser,\n          \"name\" | \"screen_name\" | \"profile_image_url_https\" | \"order_change\"\n        >\n      >;\n    };\n};\n\nexport type TopAssetsQueryVariables = {\n  time_window: Scalars[\"String\"];\n};\n\nexport type TopAssetsQuery = { __typename: \"Query\" } & {\n  getAssetsBySentiment: { __typename: \"GetAssetsBySentimentResponse\" } & Pick<\n    GetAssetsBySentimentResponse,\n    \"ok\" | \"error\"\n  > & {\n      assets: Array<\n        { __typename: \"AssetSentiment\" } & Pick<\n          AssetSentiment,\n          \"id\" | \"icon\" | \"change\" | \"name\"\n        >\n      >;\n    };\n};\n\nexport type FragmentSentimentFragment = { __typename: \"Candle\" } & Pick<\n  Candle,\n  \"id\" | \"asset\" | \"resolution\" | \"a\" | \"pv\" | \"nv\"\n>;\n\nexport type ChartSentimentsQueryVariables = {\n  currencyId: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  page_size?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type ChartSentimentsQuery = { __typename: \"Query\" } & {\n  getHistoricNewsSentiments: { __typename: \"GetSentimentsResponse\" } & {\n    candles: Array<{ __typename: \"Candle\" } & FragmentSentimentFragment>;\n  };\n  getHistoricSocialSentiments: { __typename: \"GetSentimentsResponse\" } & {\n    candles: Array<{ __typename: \"Candle\" } & FragmentSentimentFragment>;\n  };\n};\n\nexport type AssetsQueryVariables = {\n  assets?: Maybe<Array<Scalars[\"String\"]>>;\n};\n\nexport type AssetsQuery = { __typename: \"Query\" } & {\n  getAssets: { __typename: \"AssetsResponse\" } & Pick<\n    AssetsResponse,\n    \"ok\" | \"error\"\n  > & {\n      assets: Array<\n        { __typename: \"Asset\" } & Pick<\n          Asset,\n          | \"id\"\n          | \"name\"\n          | \"price\"\n          | \"icon\"\n          | \"social_sentiment_value\"\n          | \"price_change\"\n        >\n      >;\n    };\n};\n\nexport type HeadlinesQueryVariables = {\n  asset: Scalars[\"String\"];\n};\n\nexport type HeadlinesQuery = { __typename: \"Query\" } & {\n  getFeedHeadlines: { __typename: \"GetFeedHeadlinesResponse\" } & {\n    entries: Array<\n      | ({ __typename: \"Article\" } & {\n          sentiment: { __typename: \"SentimentModel\" } & Pick<\n            SentimentModel,\n            \"sentiment\"\n          >;\n          base: { __typename: \"BaseModel\" } & Pick<\n            BaseModel,\n            \"title\" | \"content\" | \"domain\" | \"images\" | \"favicon\" | \"source\"\n          >;\n        })\n      | ({ __typename: \"Tweet\" } & {\n          sentiment: { __typename: \"SentimentModel\" } & Pick<\n            SentimentModel,\n            \"sentiment\"\n          >;\n          base: { __typename: \"BaseModel\" } & Pick<\n            BaseModel,\n            \"title\" | \"content\" | \"domain\" | \"images\" | \"favicon\" | \"source\"\n          >;\n        })\n      | ({ __typename: \"RedditPost\" } & {\n          sentiment: { __typename: \"SentimentModel\" } & Pick<\n            SentimentModel,\n            \"sentiment\"\n          >;\n          base: { __typename: \"BaseModel\" } & Pick<\n            BaseModel,\n            \"title\" | \"content\" | \"domain\" | \"images\" | \"favicon\" | \"source\"\n          >;\n        })\n      | ({ __typename: \"Video\" } & {\n          sentiment: { __typename: \"SentimentModel\" } & Pick<\n            SentimentModel,\n            \"sentiment\"\n          >;\n          base: { __typename: \"BaseModel\" } & Pick<\n            BaseModel,\n            \"title\" | \"content\" | \"domain\" | \"images\" | \"favicon\" | \"source\"\n          >;\n        })\n    >;\n  };\n};\n\nexport type GetAssetTagsQueryVariables = {\n  asset: Scalars[\"String\"];\n  timeFrame: Scalars[\"String\"];\n};\n\nexport type GetAssetTagsQuery = { __typename: \"Query\" } & {\n  getTags: { __typename: \"GetTagsResponse\" } & Pick<\n    GetTagsResponse,\n    \"ok\" | \"error\"\n  > & {\n      tags: Array<{ __typename: \"TagCount\" } & Pick<TagCount, \"tag\" | \"count\">>;\n    };\n};\n\nexport type GetPublicationsQueryVariables = {\n  asset?: Maybe<Array<Scalars[\"String\"]>>;\n};\n\nexport type GetPublicationsQuery = { __typename: \"Query\" } & {\n  getPublications: { __typename: \"GetPublicationsSearchResponse\" } & {\n    entries: Array<\n      | ({ __typename: \"Article\" } & {\n          sentiment: { __typename: \"SentimentModel\" } & Pick<\n            SentimentModel,\n            \"sentiment\"\n          >;\n          base: { __typename: \"BaseModel\" } & Pick<\n            BaseModel,\n            | \"id\"\n            | \"title\"\n            | \"content\"\n            | \"pub_date\"\n            | \"source\"\n            | \"excerpt\"\n            | \"favicon\"\n          >;\n        })\n      | { __typename: \"Tweet\" }\n      | { __typename: \"RedditPost\" }\n      | { __typename: \"Video\" }\n    >;\n  };\n};\n\nexport type TweetsOnChartQueryVariables = {\n  asset: Scalars[\"String\"];\n  limit: Scalars[\"Int\"];\n};\n\nexport type TweetsOnChartQuery = { __typename: \"Query\" } & {\n  getTweetChart: { __typename: \"TweetChartResponse\" } & {\n    candles: Array<\n      { __typename: \"Candle\" } & Pick<Candle, \"a\" | \"timestamp\" | \"pv\" | \"nv\">\n    >;\n    tweets: Array<\n      { __typename: \"Tweet\" } & {\n        base: { __typename: \"BaseModel\" } & Pick<\n          BaseModel,\n          \"id\" | \"source\" | \"content\" | \"author\" | \"pub_date\"\n        >;\n        extended_tweet: { __typename: \"ExtendedTweet\" } & Pick<\n          ExtendedTweet,\n          \"id_str\" | \"author_profile_image_url_http\"\n        >;\n      }\n    >;\n  };\n  getAssets: { __typename: \"AssetsResponse\" } & {\n    assets: Array<\n      { __typename: \"Asset\" } & Pick<\n        Asset,\n        \"id\" | \"name\" | \"price\" | \"price_change\"\n      > & {\n          historyM1: Array<\n            { __typename: \"Histocandle\" } & Pick<Histocandle, \"close\" | \"time\">\n          >;\n        }\n    >;\n  };\n};\n\nexport const FragmentSentimentFragmentDoc = gql`\n  fragment FragmentSentiment on Candle {\n    id\n    asset\n    resolution\n    a\n    pv\n    nv\n  }\n`;\nexport const CryptoSentimentDocument = gql`\n  query CryptoSentiment($assets: [String!]!, $time_window: String!) {\n    getAssetDetails(request: { assets: $assets, time_window: $time_window }) {\n      id\n      name\n      icon\n      social_sentiment_value\n      news_sentiment_value\n    }\n  }\n`;\n\n/**\n * __useCryptoSentimentQuery__\n *\n * To run a query within a React component, call `useCryptoSentimentQuery` and pass it any options that fit your needs.\n * When your component renders, `useCryptoSentimentQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCryptoSentimentQuery({\n *   variables: {\n *      assets: // value for 'assets'\n *      time_window: // value for 'time_window'\n *   },\n * });\n */\nexport function useCryptoSentimentQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    CryptoSentimentQuery,\n    CryptoSentimentQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    CryptoSentimentQuery,\n    CryptoSentimentQueryVariables\n  >(CryptoSentimentDocument, baseOptions);\n}\nexport function useCryptoSentimentLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    CryptoSentimentQuery,\n    CryptoSentimentQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    CryptoSentimentQuery,\n    CryptoSentimentQueryVariables\n  >(CryptoSentimentDocument, baseOptions);\n}\nexport type CryptoSentimentQueryHookResult = ReturnType<\n  typeof useCryptoSentimentQuery\n>;\nexport type CryptoSentimentLazyQueryHookResult = ReturnType<\n  typeof useCryptoSentimentLazyQuery\n>;\nexport type CryptoSentimentQueryResult = ApolloReactCommon.QueryResult<\n  CryptoSentimentQuery,\n  CryptoSentimentQueryVariables\n>;\nexport const GetDailyOverviewDocument = gql`\n  query GetDailyOverview($asset: String!) {\n    getAssets(assets: [$asset]) {\n      assets {\n        id\n        news_sentiment_value\n        social_sentiment_value\n      }\n    }\n    getGeneratedOverview(asset: $asset) {\n      ok\n      error\n      message\n      images\n    }\n  }\n`;\n\n/**\n * __useGetDailyOverviewQuery__\n *\n * To run a query within a React component, call `useGetDailyOverviewQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetDailyOverviewQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetDailyOverviewQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *   },\n * });\n */\nexport function useGetDailyOverviewQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    GetDailyOverviewQuery,\n    GetDailyOverviewQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    GetDailyOverviewQuery,\n    GetDailyOverviewQueryVariables\n  >(GetDailyOverviewDocument, baseOptions);\n}\nexport function useGetDailyOverviewLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    GetDailyOverviewQuery,\n    GetDailyOverviewQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    GetDailyOverviewQuery,\n    GetDailyOverviewQueryVariables\n  >(GetDailyOverviewDocument, baseOptions);\n}\nexport type GetDailyOverviewQueryHookResult = ReturnType<\n  typeof useGetDailyOverviewQuery\n>;\nexport type GetDailyOverviewLazyQueryHookResult = ReturnType<\n  typeof useGetDailyOverviewLazyQuery\n>;\nexport type GetDailyOverviewQueryResult = ApolloReactCommon.QueryResult<\n  GetDailyOverviewQuery,\n  GetDailyOverviewQueryVariables\n>;\nexport const GetAssetDetailsDocument = gql`\n  query GetAssetDetails($assets: [String!]!, $timeWindow: String!) {\n    getAssetDetails(request: { assets: $assets, time_window: $timeWindow }) {\n      id\n      name\n      social_sentiment_value\n      news_sentiment_value\n      stats {\n        articles_count\n        tweets_count\n        reddit_posts_count\n        telegram_messages_count\n        bitmex_messages_count\n      }\n      transactions {\n        count\n      }\n    }\n  }\n`;\n\n/**\n * __useGetAssetDetailsQuery__\n *\n * To run a query within a React component, call `useGetAssetDetailsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAssetDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAssetDetailsQuery({\n *   variables: {\n *      assets: // value for 'assets'\n *      timeWindow: // value for 'timeWindow'\n *   },\n * });\n */\nexport function useGetAssetDetailsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    GetAssetDetailsQuery,\n    GetAssetDetailsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    GetAssetDetailsQuery,\n    GetAssetDetailsQueryVariables\n  >(GetAssetDetailsDocument, baseOptions);\n}\nexport function useGetAssetDetailsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    GetAssetDetailsQuery,\n    GetAssetDetailsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    GetAssetDetailsQuery,\n    GetAssetDetailsQueryVariables\n  >(GetAssetDetailsDocument, baseOptions);\n}\nexport type GetAssetDetailsQueryHookResult = ReturnType<\n  typeof useGetAssetDetailsQuery\n>;\nexport type GetAssetDetailsLazyQueryHookResult = ReturnType<\n  typeof useGetAssetDetailsLazyQuery\n>;\nexport type GetAssetDetailsQueryResult = ApolloReactCommon.QueryResult<\n  GetAssetDetailsQuery,\n  GetAssetDetailsQueryVariables\n>;\nexport const GetSentimentDocument = gql`\n  query GetSentiment($asset: String!, $resolution: String!) {\n    getSentimentValue(request: { asset: $asset, time_window: $resolution }) {\n      ok\n      error\n      social_sentiment_value\n      news_sentiment_value\n    }\n  }\n`;\n\n/**\n * __useGetSentimentQuery__\n *\n * To run a query within a React component, call `useGetSentimentQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSentimentQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSentimentQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *      resolution: // value for 'resolution'\n *   },\n * });\n */\nexport function useGetSentimentQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    GetSentimentQuery,\n    GetSentimentQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    GetSentimentQuery,\n    GetSentimentQueryVariables\n  >(GetSentimentDocument, baseOptions);\n}\nexport function useGetSentimentLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    GetSentimentQuery,\n    GetSentimentQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    GetSentimentQuery,\n    GetSentimentQueryVariables\n  >(GetSentimentDocument, baseOptions);\n}\nexport type GetSentimentQueryHookResult = ReturnType<\n  typeof useGetSentimentQuery\n>;\nexport type GetSentimentLazyQueryHookResult = ReturnType<\n  typeof useGetSentimentLazyQuery\n>;\nexport type GetSentimentQueryResult = ApolloReactCommon.QueryResult<\n  GetSentimentQuery,\n  GetSentimentQueryVariables\n>;\nexport const TwitterInfluenceDocument = gql`\n  query twitterInfluence($limit: Int, $resolution: String!) {\n    getTopTwitterInfluencers(limit: $limit, resolution: $resolution) {\n      ok\n      error\n      users {\n        name\n        screen_name\n        profile_image_url_https\n        order_change\n      }\n    }\n  }\n`;\n\n/**\n * __useTwitterInfluenceQuery__\n *\n * To run a query within a React component, call `useTwitterInfluenceQuery` and pass it any options that fit your needs.\n * When your component renders, `useTwitterInfluenceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTwitterInfluenceQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      resolution: // value for 'resolution'\n *   },\n * });\n */\nexport function useTwitterInfluenceQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    TwitterInfluenceQuery,\n    TwitterInfluenceQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    TwitterInfluenceQuery,\n    TwitterInfluenceQueryVariables\n  >(TwitterInfluenceDocument, baseOptions);\n}\nexport function useTwitterInfluenceLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    TwitterInfluenceQuery,\n    TwitterInfluenceQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    TwitterInfluenceQuery,\n    TwitterInfluenceQueryVariables\n  >(TwitterInfluenceDocument, baseOptions);\n}\nexport type TwitterInfluenceQueryHookResult = ReturnType<\n  typeof useTwitterInfluenceQuery\n>;\nexport type TwitterInfluenceLazyQueryHookResult = ReturnType<\n  typeof useTwitterInfluenceLazyQuery\n>;\nexport type TwitterInfluenceQueryResult = ApolloReactCommon.QueryResult<\n  TwitterInfluenceQuery,\n  TwitterInfluenceQueryVariables\n>;\nexport const TopAssetsDocument = gql`\n  query TopAssets($time_window: String!) {\n    getAssetsBySentiment(request: { time_window: $time_window }) {\n      ok\n      error\n      assets {\n        id\n        icon\n        change\n        name\n      }\n    }\n  }\n`;\n\n/**\n * __useTopAssetsQuery__\n *\n * To run a query within a React component, call `useTopAssetsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTopAssetsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTopAssetsQuery({\n *   variables: {\n *      time_window: // value for 'time_window'\n *   },\n * });\n */\nexport function useTopAssetsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    TopAssetsQuery,\n    TopAssetsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<TopAssetsQuery, TopAssetsQueryVariables>(\n    TopAssetsDocument,\n    baseOptions\n  );\n}\nexport function useTopAssetsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    TopAssetsQuery,\n    TopAssetsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<TopAssetsQuery, TopAssetsQueryVariables>(\n    TopAssetsDocument,\n    baseOptions\n  );\n}\nexport type TopAssetsQueryHookResult = ReturnType<typeof useTopAssetsQuery>;\nexport type TopAssetsLazyQueryHookResult = ReturnType<\n  typeof useTopAssetsLazyQuery\n>;\nexport type TopAssetsQueryResult = ApolloReactCommon.QueryResult<\n  TopAssetsQuery,\n  TopAssetsQueryVariables\n>;\nexport const ChartSentimentsDocument = gql`\n  query ChartSentiments(\n    $currencyId: String!\n    $resolution: String!\n    $page_size: String\n  ) {\n    getHistoricNewsSentiments(\n      request: {\n        asset: $currencyId\n        resolution: $resolution\n        page_size: $page_size\n      }\n    ) {\n      candles {\n        ...FragmentSentiment\n      }\n    }\n    getHistoricSocialSentiments(\n      request: {\n        asset: $currencyId\n        resolution: $resolution\n        page_size: $page_size\n      }\n    ) {\n      candles {\n        ...FragmentSentiment\n      }\n    }\n  }\n  ${FragmentSentimentFragmentDoc}\n`;\n\n/**\n * __useChartSentimentsQuery__\n *\n * To run a query within a React component, call `useChartSentimentsQuery` and pass it any options that fit your needs.\n * When your component renders, `useChartSentimentsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useChartSentimentsQuery({\n *   variables: {\n *      currencyId: // value for 'currencyId'\n *      resolution: // value for 'resolution'\n *      page_size: // value for 'page_size'\n *   },\n * });\n */\nexport function useChartSentimentsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    ChartSentimentsQuery,\n    ChartSentimentsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    ChartSentimentsQuery,\n    ChartSentimentsQueryVariables\n  >(ChartSentimentsDocument, baseOptions);\n}\nexport function useChartSentimentsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    ChartSentimentsQuery,\n    ChartSentimentsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    ChartSentimentsQuery,\n    ChartSentimentsQueryVariables\n  >(ChartSentimentsDocument, baseOptions);\n}\nexport type ChartSentimentsQueryHookResult = ReturnType<\n  typeof useChartSentimentsQuery\n>;\nexport type ChartSentimentsLazyQueryHookResult = ReturnType<\n  typeof useChartSentimentsLazyQuery\n>;\nexport type ChartSentimentsQueryResult = ApolloReactCommon.QueryResult<\n  ChartSentimentsQuery,\n  ChartSentimentsQueryVariables\n>;\nexport const AssetsDocument = gql`\n  query Assets($assets: [String!]) {\n    getAssets(assets: $assets) {\n      ok\n      error\n      assets {\n        id\n        name\n        price\n        icon\n        social_sentiment_value\n        price_change\n      }\n    }\n  }\n`;\n\n/**\n * __useAssetsQuery__\n *\n * To run a query within a React component, call `useAssetsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAssetsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAssetsQuery({\n *   variables: {\n *      assets: // value for 'assets'\n *   },\n * });\n */\nexport function useAssetsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    AssetsQuery,\n    AssetsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<AssetsQuery, AssetsQueryVariables>(\n    AssetsDocument,\n    baseOptions\n  );\n}\nexport function useAssetsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    AssetsQuery,\n    AssetsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<AssetsQuery, AssetsQueryVariables>(\n    AssetsDocument,\n    baseOptions\n  );\n}\nexport type AssetsQueryHookResult = ReturnType<typeof useAssetsQuery>;\nexport type AssetsLazyQueryHookResult = ReturnType<typeof useAssetsLazyQuery>;\nexport type AssetsQueryResult = ApolloReactCommon.QueryResult<\n  AssetsQuery,\n  AssetsQueryVariables\n>;\nexport const HeadlinesDocument = gql`\n  query Headlines($asset: String!) {\n    getFeedHeadlines(request: { asset: $asset }) {\n      entries {\n        ... on Article {\n          sentiment {\n            sentiment\n          }\n          base {\n            title\n            content\n            domain\n            images\n            favicon\n            source\n          }\n        }\n        ... on Tweet {\n          sentiment {\n            sentiment\n          }\n          base {\n            title\n            content\n            domain\n            images\n            favicon\n            source\n          }\n        }\n        ... on RedditPost {\n          sentiment {\n            sentiment\n          }\n          base {\n            title\n            content\n            domain\n            images\n            favicon\n            source\n          }\n        }\n        ... on Video {\n          sentiment {\n            sentiment\n          }\n          base {\n            title\n            content\n            domain\n            images\n            favicon\n            source\n          }\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useHeadlinesQuery__\n *\n * To run a query within a React component, call `useHeadlinesQuery` and pass it any options that fit your needs.\n * When your component renders, `useHeadlinesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHeadlinesQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *   },\n * });\n */\nexport function useHeadlinesQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    HeadlinesQuery,\n    HeadlinesQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<HeadlinesQuery, HeadlinesQueryVariables>(\n    HeadlinesDocument,\n    baseOptions\n  );\n}\nexport function useHeadlinesLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    HeadlinesQuery,\n    HeadlinesQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<HeadlinesQuery, HeadlinesQueryVariables>(\n    HeadlinesDocument,\n    baseOptions\n  );\n}\nexport type HeadlinesQueryHookResult = ReturnType<typeof useHeadlinesQuery>;\nexport type HeadlinesLazyQueryHookResult = ReturnType<\n  typeof useHeadlinesLazyQuery\n>;\nexport type HeadlinesQueryResult = ApolloReactCommon.QueryResult<\n  HeadlinesQuery,\n  HeadlinesQueryVariables\n>;\nexport const GetAssetTagsDocument = gql`\n  query GetAssetTags($asset: String!, $timeFrame: String!) {\n    getTags(request: { limit: 20, asset: $asset, time_window: $timeFrame }) {\n      ok\n      error\n      tags {\n        tag\n        count\n      }\n    }\n  }\n`;\n\n/**\n * __useGetAssetTagsQuery__\n *\n * To run a query within a React component, call `useGetAssetTagsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAssetTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAssetTagsQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *      timeFrame: // value for 'timeFrame'\n *   },\n * });\n */\nexport function useGetAssetTagsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    GetAssetTagsQuery,\n    GetAssetTagsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    GetAssetTagsQuery,\n    GetAssetTagsQueryVariables\n  >(GetAssetTagsDocument, baseOptions);\n}\nexport function useGetAssetTagsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    GetAssetTagsQuery,\n    GetAssetTagsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    GetAssetTagsQuery,\n    GetAssetTagsQueryVariables\n  >(GetAssetTagsDocument, baseOptions);\n}\nexport type GetAssetTagsQueryHookResult = ReturnType<\n  typeof useGetAssetTagsQuery\n>;\nexport type GetAssetTagsLazyQueryHookResult = ReturnType<\n  typeof useGetAssetTagsLazyQuery\n>;\nexport type GetAssetTagsQueryResult = ApolloReactCommon.QueryResult<\n  GetAssetTagsQuery,\n  GetAssetTagsQueryVariables\n>;\nexport const GetPublicationsDocument = gql`\n  query GetPublications($asset: [String!]) {\n    getPublications(request: { assets: $asset }) {\n      entries {\n        ... on Article {\n          sentiment {\n            sentiment\n          }\n          base {\n            id\n            title\n            content\n            pub_date\n            source\n            excerpt\n            favicon\n          }\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useGetPublicationsQuery__\n *\n * To run a query within a React component, call `useGetPublicationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPublicationsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPublicationsQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *   },\n * });\n */\nexport function useGetPublicationsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    GetPublicationsQuery,\n    GetPublicationsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    GetPublicationsQuery,\n    GetPublicationsQueryVariables\n  >(GetPublicationsDocument, baseOptions);\n}\nexport function useGetPublicationsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    GetPublicationsQuery,\n    GetPublicationsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    GetPublicationsQuery,\n    GetPublicationsQueryVariables\n  >(GetPublicationsDocument, baseOptions);\n}\nexport type GetPublicationsQueryHookResult = ReturnType<\n  typeof useGetPublicationsQuery\n>;\nexport type GetPublicationsLazyQueryHookResult = ReturnType<\n  typeof useGetPublicationsLazyQuery\n>;\nexport type GetPublicationsQueryResult = ApolloReactCommon.QueryResult<\n  GetPublicationsQuery,\n  GetPublicationsQueryVariables\n>;\nexport const TweetsOnChartDocument = gql`\n  query tweetsOnChart($asset: String!, $limit: Int!) {\n    getTweetChart(\n      request: {\n        asset: $asset\n        resolution: \"M1\"\n        time_window: \"H1\"\n        tweet_limit: $limit\n      }\n    ) {\n      candles {\n        a\n        timestamp\n        pv\n        nv\n      }\n      tweets {\n        base {\n          id\n          source\n          content\n          author\n          pub_date\n        }\n        extended_tweet {\n          id_str\n          author_profile_image_url_http\n        }\n      }\n    }\n    getAssets(assets: [$asset]) {\n      assets {\n        id\n        name\n        price\n        price_change\n        historyM1 {\n          close\n          time\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useTweetsOnChartQuery__\n *\n * To run a query within a React component, call `useTweetsOnChartQuery` and pass it any options that fit your needs.\n * When your component renders, `useTweetsOnChartQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTweetsOnChartQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useTweetsOnChartQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    TweetsOnChartQuery,\n    TweetsOnChartQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    TweetsOnChartQuery,\n    TweetsOnChartQueryVariables\n  >(TweetsOnChartDocument, baseOptions);\n}\nexport function useTweetsOnChartLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    TweetsOnChartQuery,\n    TweetsOnChartQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    TweetsOnChartQuery,\n    TweetsOnChartQueryVariables\n  >(TweetsOnChartDocument, baseOptions);\n}\nexport type TweetsOnChartQueryHookResult = ReturnType<\n  typeof useTweetsOnChartQuery\n>;\nexport type TweetsOnChartLazyQueryHookResult = ReturnType<\n  typeof useTweetsOnChartLazyQuery\n>;\nexport type TweetsOnChartQueryResult = ApolloReactCommon.QueryResult<\n  TweetsOnChartQuery,\n  TweetsOnChartQueryVariables\n>;\n","import * as React from \"react\";\nimport { CSSProperties } from \"styled-components\";\nimport { useContext } from \"react\";\nimport { ThemeContext } from \"grommet\";\n\ninterface CryptoMoodIconProps {\n  width: number;\n  height: number;\n  style?: CSSProperties;\n}\n\nexport const CryptomoodSvg = (props: CryptoMoodIconProps) => {\n  const theme: any = useContext(ThemeContext);\n  return (\n    <div style={props.style}>\n      <svg\n        width={props.width}\n        height={props.height}\n        viewBox={\"0 0 155 39\"}\n        fill=\"none\"\n      >\n        <rect\n          x={1.478}\n          y={1.451}\n          width={152.043}\n          height={36.098}\n          rx={9}\n          fill={theme.cryptoMoodLogo.fill}\n          stroke={theme.cryptoMoodLogo.border}\n          strokeWidth={2}\n        />\n        <path\n          d=\"M32.49 20.475h-9.793a1.21 1.21 0 00-1.052.626l-2.969 5.326a.196.196 0 01-.169.101h-.267c-.657 0-1.265-.359-1.594-.943l-.087-.155a.201.201 0 010-.2l2.979-5.365a1.273 1.273 0 000-1.239l-3-5.352a.201.201 0 010-.2l.108-.194c.327-.58.932-.938 1.586-.938h.176c.069 0 .133.038.168.098l3.052 5.321a1.21 1.21 0 001.053.626h9.809c.645 0 1.05-.717.726-1.29l-4.384-7.774-.008-.016-.015-.026a2.973 2.973 0 00-2.571-1.504h-9.913a2.96 2.96 0 00-2.405 1.256c-.063.087-.121.178-.173.27L8.79 17.707a3.088 3.088 0 00-.399 1.527c0 .527.133 1.053.4 1.526l4.956 8.803c.068.122.145.239.228.347a2.964 2.964 0 002.35 1.186H26.227c.242 0 .478-.031.706-.088a3.009 3.009 0 001.878-1.426l.015-.024.003-.007 4.388-7.784c.322-.574-.082-1.29-.727-1.29z\"\n          fill=\"url(#prefix__paint0_linear)\"\n        />\n        <path\n          opacity={0.25}\n          d=\"M32.49 20.475h-9.793a1.21 1.21 0 00-1.052.626l-2.969 5.326a.196.196 0 01-.169.101h-.267c-.657 0-1.265-.359-1.594-.943l-.087-.155a.201.201 0 010-.2l2.979-5.365a1.273 1.273 0 000-1.239l-3-5.352a.201.201 0 010-.2l.108-.194c.327-.58.932-.938 1.586-.938h.176c.069 0 .133.038.168.098l3.052 5.321a1.21 1.21 0 001.053.626h9.809c.645 0 1.05-.717.726-1.29l-4.384-7.774-.008-.016-.015-.026a2.973 2.973 0 00-2.571-1.504h-9.913a2.96 2.96 0 00-2.405 1.256c-.063.087-.121.178-.173.27L8.79 17.707a3.088 3.088 0 00-.399 1.527c0 .527.133 1.053.4 1.526l4.956 8.803c.068.122.145.239.228.347a2.964 2.964 0 002.35 1.186H26.227c.242 0 .478-.031.706-.088a3.009 3.009 0 001.878-1.426l.015-.024.003-.007 4.388-7.784c.322-.574-.082-1.29-.727-1.29z\"\n          fill=\"#FF0BD1\"\n        />\n        <path\n          d=\"M44.211 14.142c1.537 0 2.927.839 3.854 2.01l1.793-1.555c-1.567-1.98-3.685-2.818-5.647-2.818-4.641 0-7.233 3.375-7.233 7.569 0 4.819 3.331 7.426 7.233 7.426 2.523 0 4.415-1.201 5.647-2.79l-1.793-1.565c-.907 1.162-2.238 2-3.854 2-2.73 0-4.691-2.06-4.691-5.071.001-3.125 1.912-5.206 4.691-5.206zM56.012 16.395c-1.202 0-2.297.597-3.065 1.667h-.03v-1.515h-2.256V26.64h2.256v-4.79c0-1.636.976-2.9 2.69-2.9.158 0 .425.011.681.032v-2.576c-.08-.01-.18-.01-.276-.01zM62.024 23.357h-.02l-2.719-6.81H56.91l4.001 9.527-1.775 4.66h2.375l5.411-14.188h-2.365l-2.533 6.811zM72.973 16.395c-1.3 0-2.375.475-3.125 1.375h-.04v-1.222h-2.254v14.186h2.256v-5.335h.03c.72.9 1.773 1.404 3.114 1.404 2.73 0 4.77-2.041 4.77-5.162 0-3.053-2.04-5.246-4.751-5.246zm-.374 8.306c-1.606 0-2.878-1.221-2.878-3.052 0-1.789 1.173-3.152 2.868-3.152 1.577 0 2.838 1.213 2.838 3.152 0 1.79-1.162 3.052-2.828 3.052zM82.326 24.641c-.63 0-.945-.374-.945-1.404v-4.72h2.898v-1.969H81.38v-3.607h-2.256v3.607h-1.202v1.97h1.202v4.93c0 2.254 1.054 3.355 2.749 3.355 1.29 0 1.912-.273 2.502-.596l-.592-2c-.52.281-1.074.434-1.458.434zM89.724 16.395c-3.115 0-5.175 2.233-5.175 5.215 0 2.96 2.06 5.193 5.175 5.193 3.015 0 5.164-2.122 5.164-5.193 0-3.092-2.149-5.215-5.164-5.215zm0 8.306c-1.695 0-2.878-1.364-2.878-3.091 0-1.758 1.153-3.113 2.878-3.113 1.616 0 2.868 1.263 2.868 3.113 0 1.818-1.27 3.091-2.868 3.091zM102.986 20.74h-.04l-4.73-8.8h-2.444v14.702h2.433V16.79h.03l3.923 7.024h1.596l3.922-7.024h.03v9.852h2.434V11.94h-2.444l-4.71 8.8zM116.197 16.395c-3.114 0-5.174 2.233-5.174 5.215 0 2.96 2.06 5.193 5.174 5.193 3.016 0 5.165-2.122 5.165-5.193-.002-3.092-2.149-5.215-5.165-5.215zm0 8.306c-1.694 0-2.878-1.364-2.878-3.091 0-1.758 1.154-3.113 2.878-3.113 1.616 0 2.868 1.263 2.868 3.113-.001 1.818-1.272 3.091-2.868 3.091zM127.429 16.395c-3.114 0-5.174 2.233-5.174 5.215 0 2.96 2.06 5.193 5.174 5.193 3.016 0 5.165-2.122 5.165-5.193 0-3.092-2.149-5.215-5.165-5.215zm0 8.306c-1.694 0-2.878-1.364-2.878-3.091 0-1.758 1.154-3.113 2.878-3.113 1.616 0 2.868 1.263 2.868 3.113 0 1.818-1.272 3.091-2.868 3.091zM141.392 17.76h-.048c-.739-.898-1.824-1.364-3.115-1.364-2.71 0-4.75 2.193-4.75 5.244 0 3.122 2.04 5.162 4.77 5.162 1.4 0 2.485-.545 3.204-1.516h.04v1.355h2.159V11.94h-2.256v5.82h-.004zm-2.789 6.942c-1.666 0-2.828-1.263-2.828-3.05 0-1.94 1.263-3.152 2.838-3.152 1.695 0 2.868 1.364 2.868 3.151 0 1.827-1.272 3.051-2.878 3.051z\"\n          fill={theme.cryptoMoodLogo.text}\n        />\n        <defs>\n          <linearGradient\n            id=\"prefix__paint0_linear\"\n            x1={14.968}\n            y1={31.187}\n            x2={27.828}\n            y2={7.967}\n            gradientUnits=\"userSpaceOnUse\"\n          >\n            <stop stopColor=\"#FF009E\" />\n            <stop offset={1} stopColor=\"#FF8820\" />\n          </linearGradient>\n        </defs>\n      </svg>\n    </div>\n  );\n};\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import styled, { css } from 'styled-components';\nimport { breakpointStyle, genericStyles, normalizeColor } from '../../utils';\nimport { defaultProps } from '../../default-props';\n\nvar sizeStyle = function sizeStyle(props) {\n  // size is a combination of the level and size properties\n  var size = props.size || 'medium';\n  var headingTheme = props.theme.heading;\n  var levelStyle = headingTheme.level[props.level];\n\n  if (levelStyle) {\n    var data = levelStyle[size];\n    var styles = [css([\"font-size:\", \";line-height:\", \";max-width:\", \";font-weight:\", \";\"], data ? data.size : size, data ? data.height : 'normal', data ? data.maxWidth : levelStyle.medium.maxWidth, levelStyle.font.weight || headingTheme.weight)];\n\n    if (props.responsive && headingTheme.responsiveBreakpoint) {\n      var breakpoint = props.theme.global.breakpoints[headingTheme.responsiveBreakpoint];\n\n      if (breakpoint) {\n        var responsiveData = headingTheme.level[Math.min(props.level + 1, 4)][size];\n\n        if (responsiveData) {\n          styles.push(breakpointStyle(breakpoint, \"\\n            font-size: \" + responsiveData.size + \";\\n            line-height: \" + responsiveData.height + \";\\n            max-width: \" + responsiveData.maxWidth + \";\\n          \"));\n        }\n      }\n    }\n\n    return styles;\n  }\n\n  console.warn(\"Heading level \" + props.level + \" is not defined in your theme.\");\n  return '';\n};\n\nvar fontFamily = function fontFamily(props) {\n  var font = props.theme.heading.level[props.level].font;\n\n  if (font && font.family) {\n    return css([\"font-family:\", \";\"], font.family);\n  }\n\n  return props.theme.heading.font ? css([\"font-family:\", \";\"], props.theme.heading.font.family) : '';\n};\n\nvar TEXT_ALIGN_MAP = {\n  center: 'center',\n  end: 'right',\n  start: 'left'\n};\nvar textAlignStyle = css([\"text-align:\", \";\"], function (props) {\n  return TEXT_ALIGN_MAP[props.textAlign];\n});\nvar truncateStyle = \"\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n\";\nvar colorStyle = css([\"color:\", \";\"], function (props) {\n  return normalizeColor(props.colorProp, props.theme);\n});\nvar StyledHeading = styled.h1.withConfig({\n  displayName: \"StyledHeading\",\n  componentId: \"sc-1rdh4aw-0\"\n})([\"\", \" \", \" \", \" \", \" \", \" \", \" \", \"\"], genericStyles, function (props) {\n  return fontFamily(props);\n}, function (props) {\n  return sizeStyle(props);\n}, function (props) {\n  return props.textAlign && textAlignStyle;\n}, function (props) {\n  return props.truncate && truncateStyle;\n}, function (props) {\n  return props.colorProp && colorStyle;\n}, function (props) {\n  return props.theme.heading && props.theme.heading.extend;\n});\nStyledHeading.defaultProps = {};\nObject.setPrototypeOf(StyledHeading.defaultProps, defaultProps);\nexport { StyledHeading };","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport { StyledHeading } from './StyledHeading';\n\nvar Heading = function Heading(props) {\n  var color = props.color,\n      level = props.level,\n      rest = _objectWithoutPropertiesLoose(props, [\"color\", \"level\"]); // enforce level to be a number\n\n\n  return React.createElement(StyledHeading, _extends({\n    as: \"h\" + level,\n    colorProp: color,\n    level: +level\n  }, rest));\n};\n\nHeading.defaultProps = {\n  level: 1,\n  responsive: true\n};\nvar HeadingDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  HeadingDoc = require('./doc').doc(Heading);\n}\n\nvar HeadingWrapper = HeadingDoc || Heading;\nexport { HeadingWrapper as Heading };","import styled, { css } from 'styled-components';\nimport { genericStyles } from '../../utils';\nimport { defaultProps } from '../../default-props';\nvar FIT_MAP = {\n  cover: 'cover',\n  contain: 'contain'\n};\nvar fitStyle = css([\"flex:1 1;overflow:hidden;object-fit:\", \";\"], function (props) {\n  return FIT_MAP[props.fit];\n});\nvar StyledImage = styled.img.withConfig({\n  displayName: \"StyledImage\",\n  componentId: \"ey4zx9-0\"\n})([\"\", \" \", \" \", \" \", \"\"], genericStyles, function (props) {\n  return props.fit && fitStyle;\n}, function (props) {\n  return props.theme.image && props.theme.image.extend;\n}, function (props) {\n  return props.opacityProp && \"opacity: \" + (props.opacityProp === true ? props.theme.global.opacity.medium : props.theme.global.opacity[props.opacityProp] || props.opacityProp) + \";\\n  \";\n});\nStyledImage.defaultProps = {};\nObject.setPrototypeOf(StyledImage.defaultProps, defaultProps);\nexport { StyledImage };","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useState } from 'react';\nimport { compose } from 'recompose';\nimport { withForwardRef } from '../hocs';\nimport { StyledImage } from './StyledImage';\n\nvar Image = function Image(_ref) {\n  var fallback = _ref.fallback,\n      forwardRef = _ref.forwardRef,\n      onError = _ref.onError,\n      opacity = _ref.opacity,\n      src = _ref.src,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"fallback\", \"forwardRef\", \"onError\", \"opacity\", \"src\"]);\n\n  var _useState = useState(false),\n      imageMissing = _useState[0],\n      setImageMissing = _useState[1];\n\n  var handleError = function handleError(event) {\n    if (onError) {\n      onError(event);\n    }\n\n    setImageMissing(true);\n  };\n\n  var extraProps = {\n    onError: (onError || fallback) && handleError\n  };\n  return React.createElement(StyledImage, _extends({}, rest, extraProps, {\n    ref: forwardRef,\n    opacityProp: opacity,\n    src: !imageMissing ? src : fallback\n  }));\n};\n\nvar ImageDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  ImageDoc = require('./doc').doc(Image); // eslint-disable-line global-require\n}\n\nvar ImageWrapper = compose(withForwardRef)(ImageDoc || Image);\nexport { ImageWrapper as Image };","import styled from \"styled-components\";\n\nexport const Link = styled.a`\n  color: ${props => props.theme.dailyOverview.primary};\n  text-decoration: none;\n  :hover {\n    text-decoration: underline;\n  }\n`;\nexport const StyledIcon = styled.a`\n  position: fixed;\n  top: 8px;\n  right: 0;\n  transform: translate3d(119px, 0, 0);\n  transition: ease 0.7s;\n  :hover {\n    right: 0;\n    transform: translate3d(7px, 0, 0);\n    transition: ease 0.7s;\n  }\n`;\n","import React from \"react\";\nimport * as S from \"./../styles\";\nexport const ConvertSentiment = (sentiment: number) => {\n  if (sentiment > 3.33) {\n    return \" positive\";\n  } else if (sentiment < -3.33) {\n    return \" negative\";\n  } else {\n    return \" neutral\";\n  }\n};\nconst urlRegex = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#/%?=~_|!:,.;]*[-A-Z0-9+&@#/%=~_|])/gi;\nconst wwwRemoveRegex = /(?:www\\.)/;\n\nexport const linkify = (text: string) => {\n  // eslint-disable-next-line\n\n  const UID = \"fcbedd3c-fd2e-4c54-b4b7-30afb3bd84fd\";\n  const DELIMITER_OPEN_TAG = `<${UID}>`;\n  const DELIMITER_CLOSED_TAG = `</${UID}>`;\n  const DELIMITER_SPLITTER_REGEX = new RegExp(\n    `${DELIMITER_OPEN_TAG}(.*?)${DELIMITER_CLOSED_TAG}`\n  );\n\n  const wrappedLinksByDelimiter = text.replace(urlRegex, (url: string) => {\n    return ` ${DELIMITER_OPEN_TAG}${url}${DELIMITER_CLOSED_TAG}`;\n  });\n\n  const splittedParts = wrappedLinksByDelimiter.split(DELIMITER_SPLITTER_REGEX);\n  let id = 0;\n\n  return splittedParts.map((part: any) => {\n    if (part.match(urlRegex)) {\n      id++;\n      return (\n        <S.Link key={id} href={part} target=\"_blank\">\n          {new URL(part).hostname.replace(wwwRemoveRegex, \"\")}\n        </S.Link>\n      );\n    } else {\n      id++;\n      return <span key={id}>{part}</span>;\n    }\n  });\n};\n","import React, { useRef, useContext, useState, useEffect } from \"react\";\nimport { Box, Heading, Text, ThemeContext, Image } from \"grommet\";\nimport * as S from \"./styles\";\n\nimport { useGetDailyOverviewQuery } from \"../../generated/apollo\";\nimport { CryptomoodSvg } from \"../../components/cryptomood-svg\";\nimport { ConvertSentiment, linkify } from \"./utils/utils\";\n\nexport const DailyOverviewComponent = () => {\n  const theme: any = useContext(ThemeContext);\n  const params = useRef(new URLSearchParams(window.location.search));\n  const asset = params.current.get(\"asset\") || \"BTC\";\n\n  const { data, loading } = useGetDailyOverviewQuery({\n    variables: { asset: asset.toUpperCase() }\n  });\n\n  let [imageHash, setImageHash] = useState(0);\n\n  // reload images - after 4 seconds refresh image timehash parameter using state\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setImageHash(Date.now());\n    }, 8000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div>\n      {loading ? (\n        \"Loading...\"\n      ) : data ? (\n        <Box\n          background={theme.dailyOverview.background}\n          pad=\"20px\"\n          justify=\"stretch\"\n        >\n          <S.StyledIcon target=\"_\" href={\"https://cryptomood.com\"}>\n            <CryptomoodSvg width={155} height={40} />\n          </S.StyledIcon>\n          <Heading size=\"24px\" color={theme.primary}>\n            Daily overview for {data.getAssets.assets[0].id}\n          </Heading>\n          <Box direction=\"row\" style={{ marginBottom: \"6px\" }}>\n            <Text size=\"16px\" color=\"#B4B4B4\" weight=\"bold\">\n              News sentiment:{\" \"}\n            </Text>\n            <Text\n              size=\"16px\"\n              weight=\"bold\"\n              style={{ marginLeft: \"10px\" }}\n              color={theme.primary}\n            >\n              {ConvertSentiment(\n                data &&\n                  (data.getAssets.assets[0].news_sentiment_value as number)\n              )}\n            </Text>\n          </Box>\n          <Box style={{ marginBottom: \"30px\" }} direction=\"row\">\n            <Text size=\"16px\" color=\"#B4B4B4\" weight=\"bold\">\n              Social sentiment:{\" \"}\n            </Text>\n            <Text\n              size=\"16px\"\n              weight=\"bold\"\n              style={{ marginLeft: \"10px\" }}\n              color={theme.primary}\n            >\n              {ConvertSentiment(\n                data &&\n                  (data.getAssets.assets[0].social_sentiment_value as number)\n              )}\n            </Text>\n          </Box>\n          <Text\n            size=\"18px\"\n            color={theme.secondary}\n            style={{ lineHeight: \"128.8%\" }}\n          >\n            {data &&\n              data.getGeneratedOverview.message.map(\n                (message: string, key: number) => (\n                  <Box key={key}>\n                    <Text margin={{ vertical: \"small\" }}>\n                      {linkify(message)}\n                    </Text>\n                    <Box>\n                      {data.getGeneratedOverview.images[key] && (\n                        <a\n                          href={data.getGeneratedOverview.images[key]}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          <Image\n                            src={`${data.getGeneratedOverview.images[key]}?${imageHash}`}\n                            style={{ width: \"100%\" }}\n                          />\n                        </a>\n                      )}\n                    </Box>\n                  </Box>\n                )\n              )}\n          </Text>\n        </Box>\n      ) : (\n        \"..no data\"\n      )}\n    </div>\n  );\n};\n\nexport default DailyOverviewComponent;\n"],"sourceRoot":""}
{"version":3,"sources":["generated/apollo.ts","components/cryptomood-svg.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/interval.tsx","../node_modules/grommet/es6/components/Image/StyledImage.js","../node_modules/grommet/es6/components/Image/Image.js","widgets/sentiment-news/utils/euphoria.svg","widgets/sentiment-news/utils/normal.svg","widgets/sentiment-news/utils/positive.svg","widgets/sentiment-news/utils/negative.svg","widgets/sentiment-news/utils/depression.svg","widgets/sentiment-news/utils/logo.svg","../node_modules/grommet/es6/components/Meter/StyledMeter.js","../node_modules/grommet/es6/components/Meter/utils.js","../node_modules/grommet/es6/components/Meter/Bar.js","../node_modules/grommet/es6/utils/graphics.js","../node_modules/grommet/es6/components/Meter/Circle.js","../node_modules/grommet/es6/components/Meter/Meter.js","../node_modules/ramda/es/defaultTo.js","../node_modules/ramda/es/path.js","../node_modules/ramda/es/pathOr.js","widgets/sentiment-news/styled.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","widgets/sentiment-news/utils/utils.tsx","widgets/sentiment-news/components/asset.tsx","widgets/sentiment-news/components/small-header.tsx","widgets/sentiment-news/components/large-header.tsx","widgets/sentiment-news/components/headlines.tsx","widgets/sentiment-news/component.tsx"],"names":["FragmentSentimentFragmentDoc","gql","CryptoSentimentDocument","useCryptoSentimentQuery","baseOptions","ApolloReactHooks","GetDailyOverviewDocument","useGetDailyOverviewQuery","GetAssetDetailsDocument","GetSentimentDocument","TwitterInfluenceDocument","useTwitterInfluenceQuery","TopAssetsDocument","useTopAssetsQuery","ChartSentimentsDocument","useChartSentimentsQuery","AssetsDocument","useAssetsQuery","HeadlinesDocument","useHeadlinesQuery","GetAssetTagsDocument","useGetAssetTagsQuery","GetPublicationsDocument","TweetsOnChartDocument","useTweetsOnChartQuery","CryptomoodSvg","props","theme","useContext","ThemeContext","style","width","height","viewBox","fill","x","y","rx","cryptoMoodLogo","stroke","border","strokeWidth","d","opacity","text","id","x1","y1","x2","y2","gradientUnits","stopColor","offset","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","TypeError","StyledInterval","styled","div","StyledIntervalInput","input","fontSize","active","interval","textActive","backgroundActive","background","Interval","inputIntervals","map","split","intervalNumber","intervalText","key","type","currentInterval","toUpperCase","includes","onClick","changeInterval","FIT_MAP","cover","contain","fitStyle","fit","StyledImage","img","withConfig","displayName","componentId","image","extend","opacityProp","global","medium","_extends","assign","target","arguments","source","hasOwnProperty","apply","this","defaultProps","setPrototypeOf","ImageWrapper","_ref","fallback","forwardRef","onError","src","rest","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","_useState","imageMissing","setImageMissing","extraProps","event","createElement","ref","module","exports","roundStyle","edgeSize","round","size","StyledMeter","svg","meter","color","result","strokeOpacity","neutralExp","defaultColor","index","neutralColors","colors","filter","k","test","max","thickness","values","capOffset","mid","someHighlight","some","v","highlight","start","paths","valueArg","hoverProps","onHover","label","pathRest","delta","colorName","onMouseOver","onMouseLeave","strokeLinecap","reverse","preserveAspectRatio","BarWrapper","polarToCartesian","centerX","centerY","radius","angleInDegrees","angleInRadians","Math","PI","cos","sin","arcCommands","startAngle","endAngle","normalizedEndAngle","end","arcSweep","toFixed","join","anglePer","startValue","pathCaps","forEach","min","translateEndAngle","d1","unshift","d2","pathCap","cx","cy","r","CircleWrapper","_defineProperty","obj","defineProperty","enumerable","configurable","writable","_Component","subClass","superClass","Meter","_this","_len","args","_key","self","ReferenceError","_assertThisInitialized","concat","create","constructor","__proto__","getDerivedStateFromProps","nextProps","prevState","nextMax","deriveMax","render","content","_this$props","state","MeterWrapper","_curry2","val","idx","_curry3","p","HoverContainer","StyledIcon","a","_toConsumableArray","arr2","iter","from","Asset","memo","icon","name","activeId","Box","pad","flex","cursor","Image","alt","moodsTypes","moodColors","moodIcons","Depression","Negative","Normal","Positive","Euphoria","SmallHeader","asset","socSentiment","social_sentiment_value","mood","sentiment","direction","Text","weight","sentimentNews","secondary","primary","align","Heading","margin","vertical","LargeHeader","justify","price","price_change","Headlines","href","rel","textDecoration","gap","favicon","Logo","borderRadius","domain","truncate","title","lineHeight","maxHeight","overflow","images","top","SentimentNewsComponent","params","useRef","URLSearchParams","window","location","search","current","get","useState","setCurrentInterval","useCallback","currencies","activeAsset","setActiveAsset","data","variables","assets","R","newsData","sentimentData","fetchPolicy","currencyId","resolution","page_size","loading","getHistoricNewsSentiments","candles","slice","item","getHistoricSocialSentiments","labels","minmax","abs","socialBaseLine","newsBaseLine","useChartData","chartData","useMemo","datasets","borderColor","borderWidth","pointRadius","borderDash","backgroundColor","lineTension","headlineData","headlines","__typename","find","minWidth","minHeight","horizontal","position","left","options","responsive","maintainAspectRatio","scales","xAxes","ticks","display","gridLines","drawBorder","tickMarkLength","yAxes","legend","base"],"mappings":"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","file":"static/js/7.bbf4166b.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\nimport * as ApolloReactCommon from \"@apollo/react-common\";\nimport * as ApolloReactHooks from \"@apollo/react-hooks\";\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type AddCommentRequest = {\n  commentId?: Maybe<Scalars[\"ID\"]>;\n  postId: Scalars[\"String\"];\n  content: Scalars[\"String\"];\n};\n\nexport type AddCommentResponse = {\n  __typename: \"AddCommentResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  comment?: Maybe<Comment>;\n};\n\nexport type Alarm = {\n  __typename: \"Alarm\";\n  id: Scalars[\"ID\"];\n  enabled: Scalars[\"Boolean\"];\n  parts: Array<AlarmPart>;\n};\n\nexport type AlarmEnableRequest = {\n  alarm_id: Scalars[\"ID\"];\n  enabled: Scalars[\"Boolean\"];\n};\n\nexport type AlarmEnableResponse = {\n  __typename: \"AlarmEnableResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  enabled: Scalars[\"Boolean\"];\n};\n\nexport type AlarmOption = {\n  __typename: \"AlarmOption\";\n  id: Scalars[\"ID\"];\n  code: Scalars[\"String\"];\n  position: Scalars[\"Int\"];\n  has_custom: Scalars[\"Boolean\"];\n  childs: Array<AlarmOption>;\n};\n\nexport type AlarmPart = {\n  __typename: \"AlarmPart\";\n  asset: Scalars[\"String\"];\n  alarm_options: Array<AlarmOption>;\n  custom?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type AlarmPartRequest = {\n  asset: Scalars[\"String\"];\n  alarm_options: Array<Scalars[\"ID\"]>;\n  custom?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type Article = {\n  __typename: \"Article\";\n  base: BaseModel;\n  sentiment: SentimentModel;\n  named_entities: NamedEntitiesModel;\n  comments: Array<Comment>;\n  comment_count: Scalars[\"Int\"];\n  votes: Array<PostVote>;\n  votes_value: Scalars[\"Int\"];\n  my_vote: Scalars[\"Int\"];\n  topicsLength: Scalars[\"Int\"];\n  topics: Array<Article>;\n};\n\nexport type Asset = {\n  __typename: \"Asset\";\n  id: Scalars[\"ID\"];\n  name: Scalars[\"String\"];\n  cap: Scalars[\"Float\"];\n  price: Scalars[\"Float\"];\n  icon: Scalars[\"String\"];\n  social_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  news_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  social_sentiments: Array<Scalars[\"Float\"]>;\n  news_sentiments: Array<Scalars[\"Float\"]>;\n  social_sentiment_volumes: Array<Scalars[\"Int\"]>;\n  news_sentiment_volumes: Array<Scalars[\"Int\"]>;\n  price_change: Scalars[\"Float\"];\n  articlesCount: Scalars[\"Int\"];\n  tweetsCount: Scalars[\"Int\"];\n  redditPostsCount: Scalars[\"Int\"];\n  telegramMessagesCount: Scalars[\"Int\"];\n  bitmexMessagesCount: Scalars[\"Int\"];\n  historyM1: Array<Histocandle>;\n  historyH1: Array<Histocandle>;\n};\n\nexport type AssetDetailsResponse = {\n  __typename: \"AssetDetailsResponse\";\n  id: Scalars[\"ID\"];\n  icon: Scalars[\"String\"];\n  name: Scalars[\"String\"];\n  social_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  news_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  change?: Maybe<SentimentChange>;\n  stats?: Maybe<GetPublicationsStatsResponse>;\n  transactions?: Maybe<GenericCount>;\n};\n\nexport type AssetListResponse = {\n  __typename: \"AssetListResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  assets: Array<LimitedAsset>;\n};\n\nexport type AssetSentiment = {\n  __typename: \"AssetSentiment\";\n  id: Scalars[\"ID\"];\n  name: Scalars[\"String\"];\n  icon: Scalars[\"String\"];\n  change: Scalars[\"Float\"];\n};\n\nexport type AssetsFilter = {\n  assets?: Maybe<Array<Scalars[\"String\"]>>;\n  allAssets?: Maybe<Scalars[\"Boolean\"]>;\n};\n\nexport type AssetsResponse = {\n  __typename: \"AssetsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  assets: Array<Asset>;\n};\n\nexport type BaseGetResponse = {\n  __typename: \"BaseGetResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type BaseModel = {\n  __typename: \"BaseModel\";\n  id: Scalars[\"ID\"];\n  title: Scalars[\"String\"];\n  content: Scalars[\"String\"];\n  crawler: Scalars[\"String\"];\n  pub_date: Scalars[\"Int\"];\n  created: Scalars[\"Int\"];\n  source: Scalars[\"String\"];\n  excerpt: Scalars[\"String\"];\n  videos: Array<Scalars[\"String\"]>;\n  images: Array<Scalars[\"String\"]>;\n  links: Array<Scalars[\"String\"]>;\n  author: Scalars[\"String\"];\n  lang: Scalars[\"String\"];\n  weight: Scalars[\"Float\"];\n  spam: Scalars[\"Float\"];\n  domain: Scalars[\"String\"];\n  favicon: Scalars[\"String\"];\n  editors_pick: Scalars[\"Boolean\"];\n};\n\nexport type CancelUserSubscriptionRequest = {\n  userId: Scalars[\"Int\"];\n  planId: Scalars[\"Int\"];\n};\n\nexport type Candle = {\n  __typename: \"Candle\";\n  id: Scalars[\"ID\"];\n  timestamp: Scalars[\"Int\"];\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  pv: Scalars[\"Int\"];\n  nv: Scalars[\"Int\"];\n  ps: Scalars[\"Float\"];\n  ns: Scalars[\"Float\"];\n  a: Scalars[\"Float\"];\n};\n\nexport type CandleId = {\n  __typename: \"CandleId\";\n  year: Scalars[\"Int\"];\n  month: Scalars[\"Int\"];\n  day: Scalars[\"Int\"];\n  hour: Scalars[\"Int\"];\n  minute: Scalars[\"Int\"];\n};\n\nexport type Category = {\n  __typename: \"Category\";\n  id: Scalars[\"ID\"];\n  text: Scalars[\"String\"];\n  stats?: Maybe<CategoryStats>;\n};\n\nexport type CategoryStats = {\n  __typename: \"CategoryStats\";\n  posts: Scalars[\"Int\"];\n};\n\nexport type ChangePasswordResponse = {\n  __typename: \"ChangePasswordResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  user?: Maybe<User>;\n};\n\nexport type ChangeProfileResponse = {\n  __typename: \"ChangeProfileResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  user?: Maybe<User>;\n};\n\nexport type ChangeSettingsRequest = {\n  savedPosts?: Maybe<Array<Scalars[\"String\"]>>;\n  defaultExchange?: Maybe<Scalars[\"String\"]>;\n  theme?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type ChangeSettingsResponse = {\n  __typename: \"ChangeSettingsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type ChannelLocalization = {\n  __typename: \"ChannelLocalization\";\n  description: Scalars[\"String\"];\n  title: Scalars[\"String\"];\n  force_send_fields: Array<Scalars[\"String\"]>;\n  null_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type ChannelSnippet = {\n  __typename: \"ChannelSnippet\";\n  country: Scalars[\"String\"];\n  custom_url: Scalars[\"String\"];\n  default_language: Scalars[\"String\"];\n  description: Scalars[\"String\"];\n  localized: ChannelLocalization;\n  published_at: Scalars[\"String\"];\n  thumbnails: ThumbnailDetails;\n  title: Scalars[\"String\"];\n  force_send_fields: Array<Scalars[\"String\"]>;\n  null_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type ChannelStatistics = {\n  __typename: \"ChannelStatistics\";\n  comment_count: Scalars[\"Float\"];\n  hidden_subscriber_count: Scalars[\"Boolean\"];\n  subscriber_count: Scalars[\"Float\"];\n  video_count: Scalars[\"Float\"];\n  view_count: Scalars[\"Float\"];\n  force_send_fields: Array<Scalars[\"String\"]>;\n  null_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type Comment = {\n  __typename: \"Comment\";\n  id: Scalars[\"ID\"];\n  user: User;\n  user_id: Scalars[\"ID\"];\n  post: Scalars[\"String\"];\n  votes: Array<CommentVote>;\n  my_vote: Scalars[\"Boolean\"];\n  reply_to?: Maybe<Comment>;\n  reply_to_id?: Maybe<Scalars[\"ID\"]>;\n  content: Scalars[\"String\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type CommentVote = {\n  __typename: \"CommentVote\";\n  id: Scalars[\"ID\"];\n  user_id: Scalars[\"ID\"];\n  comment_id: Scalars[\"ID\"];\n  value: Scalars[\"Int\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type CommentVoteRequest = {\n  commentId: Scalars[\"ID\"];\n};\n\nexport type CommentVoteResponse = {\n  __typename: \"CommentVoteResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  votes: Array<CommentVote>;\n  my_vote: Scalars[\"Boolean\"];\n};\n\nexport type CursorPagination = {\n  cursor: Scalars[\"Int\"];\n};\n\nexport type DailySummaryRequest = {\n  asset: Scalars[\"String\"];\n};\n\nexport type DailySummaryResponse = {\n  __typename: \"DailySummaryResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  id: Scalars[\"ID\"];\n  maxTrans: Scalars[\"Float\"];\n  biggestTrans: Array<Transaction>;\n  transToEx: Scalars[\"Float\"];\n  transFromEx: Scalars[\"Float\"];\n  socialSentimentSma: Array<Scalars[\"Float\"]>;\n  newsSentimentSma: Array<Scalars[\"Float\"]>;\n  promoted: Array<Article>;\n  editorsPick?: Maybe<Article>;\n};\n\nexport type DeleteAlarmRequest = {\n  alarm_id: Scalars[\"ID\"];\n};\n\nexport type EmotionListResponse = {\n  __typename: \"EmotionListResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  emotions: Array<Scalars[\"String\"]>;\n};\n\nexport type Event = {\n  __typename: \"Event\";\n  id: Scalars[\"ID\"];\n  title: Scalars[\"String\"];\n  description: Scalars[\"String\"];\n  start: Scalars[\"Int\"];\n  thumbnail: Scalars[\"String\"];\n  location_name: Scalars[\"String\"];\n  location_link: Scalars[\"String\"];\n  ticket_link: Scalars[\"String\"];\n  ticket_provider: Scalars[\"String\"];\n};\n\nexport type Exchange = {\n  __typename: \"Exchange\";\n  id: Scalars[\"ID\"];\n  name: Scalars[\"String\"];\n  url: Scalars[\"String\"];\n  icon: Scalars[\"String\"];\n};\n\nexport type ExtendedTweet = {\n  __typename: \"ExtendedTweet\";\n  favourite_count: Scalars[\"Int\"];\n  filter_level: Scalars[\"String\"];\n  id_str: Scalars[\"String\"];\n  in_reply_to_screen_name: Scalars[\"String\"];\n  in_reply_to_status_id_str: Scalars[\"String\"];\n  in_reply_to_user_id_str: Scalars[\"String\"];\n  is_quote_status: Scalars[\"String\"];\n  lang: Scalars[\"String\"];\n  possibly_sensitive: Scalars[\"Boolean\"];\n  quote_count: Scalars[\"Int\"];\n  reply_count: Scalars[\"Int\"];\n  retweet_count: Scalars[\"Int\"];\n  user_mentions: Array<Scalars[\"String\"]>;\n  source: Scalars[\"String\"];\n  author_created_at: Scalars[\"String\"];\n  author_default_profile: Scalars[\"Boolean\"];\n  author_default_profile_image: Scalars[\"Boolean\"];\n  author_followers_count: Scalars[\"Int\"];\n  author_friends_count: Scalars[\"Int\"];\n  author_id_str: Scalars[\"String\"];\n  author_lang: Scalars[\"String\"];\n  author_location: Scalars[\"String\"];\n  author_name: Scalars[\"String\"];\n  author_screen_name: Scalars[\"String\"];\n  author_profile_image_url_http: Scalars[\"String\"];\n  author_statuses_count: Scalars[\"Int\"];\n  categories: Array<Scalars[\"String\"]>;\n  truncated: Scalars[\"Boolean\"];\n  full_text: Scalars[\"String\"];\n};\n\nexport type GenericCount = {\n  __typename: \"GenericCount\";\n  count: Scalars[\"Int\"];\n};\n\nexport type GetAlarmOptionsResponse = {\n  __typename: \"GetAlarmOptionsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  options: Array<AlarmOption>;\n};\n\nexport type GetAlarmsResponse = {\n  __typename: \"GetAlarmsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  alarms: Array<Alarm>;\n};\n\nexport type GetArticlesResponse = {\n  __typename: \"GetArticlesResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  articles: Array<Article>;\n};\n\nexport type GetAssetDetailsRequest = {\n  assets: Array<Scalars[\"String\"]>;\n  time_window: Scalars[\"String\"];\n};\n\nexport type GetAssetsBySentimentRequest = {\n  time_window: Scalars[\"String\"];\n};\n\nexport type GetAssetsBySentimentResponse = {\n  __typename: \"GetAssetsBySentimentResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  assets: Array<AssetSentiment>;\n};\n\nexport type GetCategoriesResponse = {\n  __typename: \"GetCategoriesResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  categories: Array<Category>;\n};\n\nexport type GetChatbotQueryResponse = {\n  __typename: \"GetChatbotQueryResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  message: Scalars[\"String\"];\n};\n\nexport type GetChatbotRawQueryRequest = {\n  asset: Scalars[\"String\"];\n  indicators: Array<Scalars[\"String\"]>;\n  resImg?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetChatbotRawQueryResponse = {\n  __typename: \"GetChatbotRawQueryResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  message: Scalars[\"String\"];\n  images: Array<Scalars[\"String\"]>;\n};\n\nexport type GetCommentsResponse = {\n  __typename: \"GetCommentsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  comments: Array<Comment>;\n};\n\nexport type GetEventsRequest = {\n  asset: Scalars[\"String\"];\n};\n\nexport type GetEventsResponse = {\n  __typename: \"GetEventsResponse\";\n  events: Array<Event>;\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetFeedHeadlinesResponse = {\n  __typename: \"GetFeedHeadlinesResponse\";\n  entries: Array<Publication>;\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetGeneratedOverviewResponse = {\n  __typename: \"GetGeneratedOverviewResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  message: Array<Scalars[\"String\"]>;\n  images: Array<Scalars[\"String\"]>;\n};\n\nexport type GetHistoricGithubIndicatorResponse = {\n  __typename: \"GetHistoricGithubIndicatorResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  candles: Array<GithubCandle>;\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetNotificationConfigRequest = {\n  token: Scalars[\"String\"];\n};\n\nexport type GetPublicationsResponse = {\n  __typename: \"GetPublicationsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  publications: Array<Maybe<Publication>>;\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetPublicationsSearchResponse = {\n  __typename: \"GetPublicationsSearchResponse\";\n  entries: Array<Publication>;\n};\n\nexport type GetPublicationsStatsRequest = {\n  asset: Scalars[\"String\"];\n  time_window?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type GetPublicationsStatsResponse = {\n  __typename: \"GetPublicationsStatsResponse\";\n  articles_count: Scalars[\"Int\"];\n  tweets_count: Scalars[\"Int\"];\n  reddit_posts_count: Scalars[\"Int\"];\n  telegram_messages_count: Scalars[\"Int\"];\n  bitmex_messages_count: Scalars[\"Int\"];\n};\n\nexport type GetRedditPostsResponse = {\n  __typename: \"GetRedditPostsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  reddit_posts: Array<RedditPost>;\n};\n\nexport type GetRelatedArticlesResponse = {\n  __typename: \"GetRelatedArticlesResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  related: Array<Article>;\n};\n\nexport type GetSentimentsResponse = {\n  __typename: \"GetSentimentsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  candles: Array<Candle>;\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetSentimentValueRequest = {\n  asset: Scalars[\"String\"];\n  time_window: Scalars[\"String\"];\n};\n\nexport type GetSentimentValueResponse = {\n  __typename: \"GetSentimentValueResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  social_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  news_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  social_sentiment_sma: Array<Scalars[\"Float\"]>;\n  news_sentiment_sma: Array<Scalars[\"Float\"]>;\n};\n\nexport type GetTagsRequest = {\n  limit: Scalars[\"Int\"];\n  asset: Scalars[\"String\"];\n  time_window: Scalars[\"String\"];\n};\n\nexport type GetTagsResponse = {\n  __typename: \"GetTagsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  tags: Array<TagCount>;\n};\n\nexport type GetTopicsResponse = {\n  __typename: \"GetTopicsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  topics: Array<Topic>;\n};\n\nexport type GetTopTwitterInfluencersRequest = {\n  limit?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetTopTwitterInfluencersResponse = {\n  __typename: \"GetTopTwitterInfluencersResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  users: Array<TwitterUser>;\n};\n\nexport type GetTransactionsResponse = {\n  __typename: \"GetTransactionsResponse\";\n  transactions: Array<Transaction>;\n  count: Scalars[\"Int\"];\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetTweetChartRequest = {\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  time_window?: Maybe<Scalars[\"String\"]>;\n  tweet_limit?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetTweetsResponse = {\n  __typename: \"GetTweetsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  tweets: Array<Tweet>;\n};\n\nexport type GetVideosResponse = {\n  __typename: \"GetVideosResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  videos: Array<Video>;\n};\n\nexport type GithubCandle = {\n  __typename: \"GithubCandle\";\n  id: Scalars[\"ID\"];\n  timestamp: Scalars[\"Int\"];\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  sum: Scalars[\"Int\"];\n};\n\nexport type HeadlinesFeedRequest = {\n  asset?: Maybe<Scalars[\"String\"]>;\n  categories?: Maybe<Array<Scalars[\"String\"]>>;\n  text?: Maybe<Scalars[\"String\"]>;\n  pagination?: Maybe<CursorPagination>;\n};\n\nexport type Histocandle = {\n  __typename: \"Histocandle\";\n  time: Scalars[\"Int\"];\n  close: Scalars[\"Float\"];\n  high: Scalars[\"Float\"];\n  low: Scalars[\"Float\"];\n  open: Scalars[\"Float\"];\n  volume_from: Scalars[\"Float\"];\n  volume_to: Scalars[\"Float\"];\n};\n\nexport type HistoricGithubIndicatorRequest = {\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  event_type: Scalars[\"Int\"];\n  time_window?: Maybe<Scalars[\"String\"]>;\n  pagination?: Maybe<CursorPagination>;\n};\n\nexport type HistoricPublicationsRequest = {\n  asset: Scalars[\"String\"];\n  timeframe?: Maybe<Scalars[\"String\"]>;\n  weight?: Maybe<WeightParameter>;\n  pagination?: Maybe<CursorPagination>;\n  expressionFilter?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type HistoricSentimentsRequest = {\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  emotion?: Maybe<Scalars[\"String\"]>;\n  page_size?: Maybe<Scalars[\"String\"]>;\n  pagination?: Maybe<CursorPagination>;\n};\n\nexport type HistoricTransactionsRequest = {\n  asset: Scalars[\"String\"];\n  time_window?: Maybe<Scalars[\"String\"]>;\n  pagination?: Maybe<CursorPagination>;\n  expressionFilter?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type LimitedAsset = {\n  __typename: \"LimitedAsset\";\n  id: Scalars[\"ID\"];\n  name: Scalars[\"String\"];\n  icon: Scalars[\"String\"];\n};\n\nexport type LoginLog = {\n  __typename: \"LoginLog\";\n  id: Scalars[\"ID\"];\n  user: User;\n  ip: Scalars[\"String\"];\n  location: Scalars[\"String\"];\n};\n\nexport type Membership = {\n  __typename: \"Membership\";\n  id: Scalars[\"ID\"];\n  user_id: Scalars[\"ID\"];\n  plan_id: Scalars[\"ID\"];\n  due: Scalars[\"String\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type Mutation = {\n  __typename: \"Mutation\";\n  signUp: SignUpResponse;\n  signIn: SignInResponse;\n  refreshToken: RefreshTokenResponse;\n  signOut: SignOutResponse;\n  changePassword: ChangePasswordResponse;\n  passwordChangeRequest: BaseGetResponse;\n  changeProfile: ChangeProfileResponse;\n  updateUserWatchlist: UpdateUserWatchlistResponse;\n  updateUserSubscription: UpdateUserSubscriptionResponse;\n  cancelUserSubscription: UpdateUserSubscriptionResponse;\n  changeSettings: ChangeSettingsResponse;\n  postVote: PostVotingResponse;\n  commentUpvote: CommentVoteResponse;\n  commentUnvote: CommentVoteResponse;\n  addComment: AddCommentResponse;\n  setAlarm: SetAlarmResponse;\n  deleteAlarm: BaseGetResponse;\n  setAlarmEnabled: AlarmEnableResponse;\n  setNotificationToken: NotificationToken;\n};\n\nexport type MutationSignUpArgs = {\n  request: SignUpRequest;\n};\n\nexport type MutationSignInArgs = {\n  email: Scalars[\"String\"];\n  password: Scalars[\"String\"];\n};\n\nexport type MutationRefreshTokenArgs = {\n  request: RefreshTokenRequest;\n};\n\nexport type MutationChangePasswordArgs = {\n  password: Scalars[\"String\"];\n};\n\nexport type MutationPasswordChangeRequestArgs = {\n  request: PasswordChangeRequest;\n};\n\nexport type MutationChangeProfileArgs = {\n  bio?: Maybe<Scalars[\"String\"]>;\n  avatar?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type MutationUpdateUserWatchlistArgs = {\n  assets: Array<Scalars[\"String\"]>;\n};\n\nexport type MutationUpdateUserSubscriptionArgs = {\n  request: UpdateUserSubscriptionRequest;\n};\n\nexport type MutationCancelUserSubscriptionArgs = {\n  request: CancelUserSubscriptionRequest;\n};\n\nexport type MutationChangeSettingsArgs = {\n  request: ChangeSettingsRequest;\n};\n\nexport type MutationPostVoteArgs = {\n  request: PostVoteRequest;\n};\n\nexport type MutationCommentUpvoteArgs = {\n  request: CommentVoteRequest;\n};\n\nexport type MutationCommentUnvoteArgs = {\n  request: CommentVoteRequest;\n};\n\nexport type MutationAddCommentArgs = {\n  request: AddCommentRequest;\n};\n\nexport type MutationSetAlarmArgs = {\n  request: SetAlarmRequest;\n};\n\nexport type MutationDeleteAlarmArgs = {\n  request: DeleteAlarmRequest;\n};\n\nexport type MutationSetAlarmEnabledArgs = {\n  request: AlarmEnableRequest;\n};\n\nexport type MutationSetNotificationTokenArgs = {\n  request: SetNotificationTokenRequest;\n};\n\nexport type NamedEntitiesModel = {\n  __typename: \"NamedEntitiesModel\";\n  symbols: Array<Scalars[\"String\"]>;\n  tags: Array<Scalars[\"String\"]>;\n};\n\nexport type NotificationToken = {\n  __typename: \"NotificationToken\";\n  id: Scalars[\"ID\"];\n  token: Scalars[\"String\"];\n  notification_other: Scalars[\"Boolean\"];\n  notification_alarms: Scalars[\"Boolean\"];\n  notification_important: Scalars[\"Boolean\"];\n};\n\nexport type PasswordChangeRequest = {\n  email?: Maybe<Scalars[\"String\"]>;\n  token?: Maybe<Scalars[\"String\"]>;\n  password?: Maybe<Scalars[\"String\"]>;\n  passwordRepeat?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type PostVote = {\n  __typename: \"PostVote\";\n  id: Scalars[\"ID\"];\n  user_id: Scalars[\"ID\"];\n  post: Scalars[\"String\"];\n  value: Scalars[\"Int\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type PostVoteRequest = {\n  postId: Scalars[\"String\"];\n  value: Scalars[\"Int\"];\n};\n\nexport type PostVotingResponse = {\n  __typename: \"PostVotingResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  publication?: Maybe<Publication>;\n};\n\nexport type PriceUpdate = {\n  __typename: \"PriceUpdate\";\n  price: Scalars[\"Float\"];\n};\n\nexport type Publication = Article | Tweet | RedditPost | Video;\n\nexport type PublicationByIdRequest = {\n  id: Scalars[\"String\"];\n};\n\nexport type PublicationsSearchRequest = {\n  assets?: Maybe<Array<Scalars[\"String\"]>>;\n  categories?: Maybe<Array<Scalars[\"String\"]>>;\n  text?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type Query = {\n  __typename: \"Query\";\n  getAssets: AssetsResponse;\n  getAssetList: AssetListResponse;\n  getMyProfile: UserProfileResponse;\n  getTopics: GetTopicsResponse;\n  getEmotions: EmotionListResponse;\n  getHistoricSocialSentiments: GetSentimentsResponse;\n  getHistoricNewsSentiments: GetSentimentsResponse;\n  getHistoricBuzzSentiments: GetSentimentsResponse;\n  getHistoricTransactions: GetTransactionsResponse;\n  getHistoricArticles: GetArticlesResponse;\n  getHistoricTweets: GetTweetsResponse;\n  getHistoricRedditPosts: GetRedditPostsResponse;\n  getHistoricVideos: GetVideosResponse;\n  getHistoricPublications: GetPublicationsResponse;\n  getHistoricGithubIndicator: GetHistoricGithubIndicatorResponse;\n  getFeedHeadlines: GetFeedHeadlinesResponse;\n  getEvents: GetEventsResponse;\n  getUserById: UserProfileResponse;\n  getDailySummary: DailySummaryResponse;\n  getCategories: GetCategoriesResponse;\n  getPublications: GetPublicationsSearchResponse;\n  getPublication: Publication;\n  getSocialChart: SocialChartResponse;\n  getAlarmOptions: GetAlarmOptionsResponse;\n  getAlarms?: Maybe<GetAlarmsResponse>;\n  getComments: GetCommentsResponse;\n  getRelatedArticles: GetRelatedArticlesResponse;\n  getPublicationStats: GetPublicationsStatsResponse;\n  getChatbotQuery: GetChatbotQueryResponse;\n  getChatbotRawQuery: GetChatbotRawQueryResponse;\n  getGeneratedOverview: GetGeneratedOverviewResponse;\n  getTags: GetTagsResponse;\n  getSentimentValue: GetSentimentValueResponse;\n  getTopTwitterInfluencers: GetTopTwitterInfluencersResponse;\n  getAssetsBySentiment: GetAssetsBySentimentResponse;\n  getExchanges: Array<Exchange>;\n  getNotificationTokens: Array<NotificationToken>;\n  getNotificationConfig: NotificationToken;\n  getAssetDetails: Array<AssetDetailsResponse>;\n  getTweetChart: TweetChartResponse;\n};\n\nexport type QueryGetAssetsArgs = {\n  assets?: Maybe<Array<Scalars[\"String\"]>>;\n  limit?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type QueryGetTopicsArgs = {\n  asset: Scalars[\"String\"];\n};\n\nexport type QueryGetHistoricSocialSentimentsArgs = {\n  request: HistoricSentimentsRequest;\n};\n\nexport type QueryGetHistoricNewsSentimentsArgs = {\n  request: HistoricSentimentsRequest;\n};\n\nexport type QueryGetHistoricBuzzSentimentsArgs = {\n  request: HistoricSentimentsRequest;\n};\n\nexport type QueryGetHistoricTransactionsArgs = {\n  request: HistoricTransactionsRequest;\n};\n\nexport type QueryGetHistoricArticlesArgs = {\n  request: HistoricPublicationsRequest;\n};\n\nexport type QueryGetHistoricTweetsArgs = {\n  request: HistoricPublicationsRequest;\n};\n\nexport type QueryGetHistoricRedditPostsArgs = {\n  request: HistoricPublicationsRequest;\n};\n\nexport type QueryGetHistoricVideosArgs = {\n  request: HistoricPublicationsRequest;\n};\n\nexport type QueryGetHistoricPublicationsArgs = {\n  request: HistoricPublicationsRequest;\n};\n\nexport type QueryGetHistoricGithubIndicatorArgs = {\n  request: HistoricGithubIndicatorRequest;\n};\n\nexport type QueryGetFeedHeadlinesArgs = {\n  request: HeadlinesFeedRequest;\n};\n\nexport type QueryGetEventsArgs = {\n  request: GetEventsRequest;\n};\n\nexport type QueryGetUserByIdArgs = {\n  id: Scalars[\"Int\"];\n};\n\nexport type QueryGetDailySummaryArgs = {\n  request: DailySummaryRequest;\n};\n\nexport type QueryGetPublicationsArgs = {\n  request: PublicationsSearchRequest;\n};\n\nexport type QueryGetPublicationArgs = {\n  request: PublicationByIdRequest;\n};\n\nexport type QueryGetSocialChartArgs = {\n  request: SocialChartRequest;\n};\n\nexport type QueryGetCommentsArgs = {\n  request: PublicationByIdRequest;\n};\n\nexport type QueryGetRelatedArticlesArgs = {\n  request: PublicationByIdRequest;\n};\n\nexport type QueryGetPublicationStatsArgs = {\n  request: GetPublicationsStatsRequest;\n};\n\nexport type QueryGetChatbotQueryArgs = {\n  query: Scalars[\"String\"];\n};\n\nexport type QueryGetChatbotRawQueryArgs = {\n  request: GetChatbotRawQueryRequest;\n};\n\nexport type QueryGetGeneratedOverviewArgs = {\n  asset: Scalars[\"String\"];\n};\n\nexport type QueryGetTagsArgs = {\n  request: GetTagsRequest;\n};\n\nexport type QueryGetSentimentValueArgs = {\n  request?: Maybe<GetSentimentValueRequest>;\n};\n\nexport type QueryGetTopTwitterInfluencersArgs = {\n  limit?: Maybe<Scalars[\"Int\"]>;\n  resolution: Scalars[\"String\"];\n};\n\nexport type QueryGetAssetsBySentimentArgs = {\n  request: GetAssetsBySentimentRequest;\n};\n\nexport type QueryGetNotificationConfigArgs = {\n  request: GetNotificationConfigRequest;\n};\n\nexport type QueryGetAssetDetailsArgs = {\n  request: GetAssetDetailsRequest;\n};\n\nexport type QueryGetTweetChartArgs = {\n  request: GetTweetChartRequest;\n};\n\nexport type RedditPost = {\n  __typename: \"RedditPost\";\n  base: BaseModel;\n  sentiment: SentimentModel;\n  named_entities: NamedEntitiesModel;\n  reddit_post_model: RedditPostModel;\n  comments: Array<Comment>;\n  votes: Array<PostVote>;\n  votes_value: Scalars[\"Int\"];\n  my_vote: Scalars[\"Int\"];\n  comment_count: Scalars[\"Int\"];\n};\n\nexport type RedditPostModel = {\n  __typename: \"RedditPostModel\";\n  id: Scalars[\"ID\"];\n  url: Scalars[\"String\"];\n  author: Scalars[\"String\"];\n  self_text: Scalars[\"String\"];\n  name: Scalars[\"String\"];\n  permalink: Scalars[\"String\"];\n  deleted: Scalars[\"Boolean\"];\n  ups: Scalars[\"Int\"];\n  downs: Scalars[\"Int\"];\n  likes: Scalars[\"Boolean\"];\n  num_comments: Scalars[\"Int\"];\n  score: Scalars[\"Int\"];\n  domain: Scalars[\"String\"];\n  subreddit_id: Scalars[\"String\"];\n  hidden: Scalars[\"Boolean\"];\n  locked: Scalars[\"Boolean\"];\n  thumbnail: Scalars[\"String\"];\n  gilded: Scalars[\"Int\"];\n  distinguished: Scalars[\"String\"];\n  stickied: Scalars[\"Boolean\"];\n  is_reddit_media_domain: Scalars[\"Boolean\"];\n  hot_rate: Scalars[\"Float\"];\n  subreddit: Scalars[\"String\"];\n  is_self: Scalars[\"Boolean\"];\n  nsfw: Scalars[\"Boolean\"];\n  is_update: Scalars[\"Boolean\"];\n};\n\nexport type RefreshTokenRequest = {\n  token: Scalars[\"String\"];\n};\n\nexport type RefreshTokenResponse = {\n  __typename: \"RefreshTokenResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  accessToken: Scalars[\"String\"];\n  refreshToken: Scalars[\"String\"];\n};\n\nexport type Role = {\n  __typename: \"Role\";\n  id: Scalars[\"ID\"];\n  label: Scalars[\"String\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type SentimentChange = {\n  __typename: \"SentimentChange\";\n  change: Scalars[\"Float\"];\n};\n\nexport type SentimentModel = {\n  __typename: \"SentimentModel\";\n  sentiment: Scalars[\"Float\"];\n  market_impact: Scalars[\"Float\"];\n};\n\nexport type SetAlarmRequest = {\n  update_id?: Maybe<Scalars[\"ID\"]>;\n  parts: Array<AlarmPartRequest>;\n  enabled: Scalars[\"Boolean\"];\n};\n\nexport type SetAlarmResponse = {\n  __typename: \"SetAlarmResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type SetNotificationTokenRequest = {\n  token: Scalars[\"String\"];\n  notification_other?: Maybe<Scalars[\"Boolean\"]>;\n  notification_alarms?: Maybe<Scalars[\"Boolean\"]>;\n  notification_important?: Maybe<Scalars[\"Boolean\"]>;\n};\n\nexport type Settings = {\n  __typename: \"Settings\";\n  id: Scalars[\"ID\"];\n  saved_posts: Array<Scalars[\"String\"]>;\n  default_exchange: Scalars[\"String\"];\n  theme: Scalars[\"String\"];\n};\n\nexport type SignInResponse = {\n  __typename: \"SignInResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  token: Scalars[\"String\"];\n  refreshToken: Scalars[\"String\"];\n};\n\nexport type SignOutResponse = {\n  __typename: \"SignOutResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type SignUpRequest = {\n  email: Scalars[\"String\"];\n  password: Scalars[\"String\"];\n  referral?: Maybe<Scalars[\"String\"]>;\n  username: Scalars[\"String\"];\n};\n\nexport type SignUpResponse = {\n  __typename: \"SignUpResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  user?: Maybe<User>;\n};\n\nexport type SocialChartData = {\n  __typename: \"SocialChartData\";\n  positive: Scalars[\"Int\"];\n  neutral: Scalars[\"Int\"];\n  negative: Scalars[\"Int\"];\n};\n\nexport type SocialChartRequest = {\n  publicationId: Scalars[\"String\"];\n};\n\nexport type SocialChartResponse = {\n  __typename: \"SocialChartResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  values: Array<SocialChartData>;\n};\n\nexport type Subscription = {\n  __typename: \"Subscription\";\n  assetPrice: PriceUpdate;\n  socialSentimentSubscription: Candle;\n  newsSentimentSubscription: Candle;\n  buzzSentimentSubscription: Candle;\n  article: Article;\n  tweet: Tweet;\n  redditPost: RedditPost;\n  video: Video;\n};\n\nexport type SubscriptionAssetPriceArgs = {\n  asset?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type TagCount = {\n  __typename: \"TagCount\";\n  tag: Scalars[\"String\"];\n  count: Scalars[\"Int\"];\n};\n\nexport type Tags = {\n  __typename: \"Tags\";\n  id: Scalars[\"ID\"];\n  label: Scalars[\"String\"];\n  visible: Scalars[\"Boolean\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type Thumbnail = {\n  __typename: \"Thumbnail\";\n  height: Scalars[\"Float\"];\n  url: Scalars[\"String\"];\n  width: Scalars[\"Float\"];\n  force_send_fields: Array<Scalars[\"String\"]>;\n  null_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type ThumbnailDetails = {\n  __typename: \"ThumbnailDetails\";\n  default: Thumbnail;\n  high: Thumbnail;\n  maxres: Thumbnail;\n  medium: Thumbnail;\n  standard: Thumbnail;\n  force_send_fields: Array<Scalars[\"String\"]>;\n  null_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type Topic = {\n  __typename: \"Topic\";\n  id: Scalars[\"ID\"];\n  weight: Scalars[\"Float\"];\n  title: Scalars[\"String\"];\n  source: Scalars[\"String\"];\n  crawler: Scalars[\"String\"];\n  pub_date: Scalars[\"Int\"];\n  symbols: Array<Scalars[\"String\"]>;\n  topics: Array<Scalars[\"String\"]>;\n};\n\nexport type Transaction = {\n  __typename: \"Transaction\";\n  id: Scalars[\"ID\"];\n  hash: Scalars[\"String\"];\n  from_address: Scalars[\"String\"];\n  to_address: Scalars[\"String\"];\n  from_owner: Scalars[\"String\"];\n  to_owner: Scalars[\"String\"];\n  time: Scalars[\"Int\"];\n  comment: Scalars[\"String\"];\n  asset: Scalars[\"String\"];\n  size: Scalars[\"Float\"];\n  USD_size: Scalars[\"Float\"];\n};\n\nexport type Tweet = {\n  __typename: \"Tweet\";\n  base: BaseModel;\n  sentiment: SentimentModel;\n  named_entities: NamedEntitiesModel;\n  extended_tweet: ExtendedTweet;\n  comments: Array<Comment>;\n  votes: Array<PostVote>;\n  votes_value: Scalars[\"Int\"];\n  my_vote: Scalars[\"Int\"];\n  comment_count: Scalars[\"Int\"];\n};\n\nexport type TweetChartResponse = {\n  __typename: \"TweetChartResponse\";\n  candles: Array<Candle>;\n  tweets: Array<Tweet>;\n};\n\nexport type TwitterUser = {\n  __typename: \"TwitterUser\";\n  id_str: Scalars[\"String\"];\n  name: Scalars[\"String\"];\n  screen_name: Scalars[\"String\"];\n  profile_banner_url: Scalars[\"String\"];\n  profile_image_url_https: Scalars[\"String\"];\n  order_change: Scalars[\"Int\"];\n};\n\nexport type UpdateUserSubscriptionRequest = {\n  userId: Scalars[\"Int\"];\n  planId: Scalars[\"Int\"];\n};\n\nexport type UpdateUserSubscriptionResponse = {\n  __typename: \"UpdateUserSubscriptionResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type UpdateUserWatchlistResponse = {\n  __typename: \"UpdateUserWatchlistResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type User = {\n  __typename: \"User\";\n  id: Scalars[\"ID\"];\n  email: Scalars[\"String\"];\n  password: Scalars[\"String\"];\n  username: Scalars[\"String\"];\n  role?: Maybe<Role>;\n  bio: Scalars[\"String\"];\n  avatar: Scalars[\"String\"];\n  referral: Scalars[\"String\"];\n  created_at: Scalars[\"String\"];\n  updated_at: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n  watchlist: Array<Scalars[\"String\"]>;\n  memberships?: Maybe<Array<Membership>>;\n  settings: Settings;\n  notification_tokens: Array<Scalars[\"String\"]>;\n};\n\nexport type UserProfileResponse = {\n  __typename: \"UserProfileResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  user?: Maybe<User>;\n};\n\nexport type Video = {\n  __typename: \"Video\";\n  base: BaseModel;\n  sentiment: SentimentModel;\n  named_entities: NamedEntitiesModel;\n  channel_snippet: ChannelSnippet;\n  channel_statistics: ChannelStatistics;\n  video_statistics: VideoStatistics;\n  comments: Array<Comment>;\n  votes: Array<PostVote>;\n  votes_value: Scalars[\"Int\"];\n  my_vote: Scalars[\"Int\"];\n  comment_count: Scalars[\"Int\"];\n};\n\nexport type VideoStatistics = {\n  __typename: \"VideoStatistics\";\n  comment_count: Scalars[\"Float\"];\n  dislike_count: Scalars[\"Float\"];\n  favorite_count: Scalars[\"Float\"];\n  like_count: Scalars[\"Float\"];\n  view_count: Scalars[\"Float\"];\n  force_send_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type WeightParameter = {\n  gte: Scalars[\"Float\"];\n  lte: Scalars[\"Float\"];\n};\n\nexport type CryptoSentimentQueryVariables = {\n  assets: Array<Scalars[\"String\"]>;\n  time_window: Scalars[\"String\"];\n};\n\nexport type CryptoSentimentQuery = { __typename: \"Query\" } & {\n  getAssetDetails: Array<\n    { __typename: \"AssetDetailsResponse\" } & Pick<\n      AssetDetailsResponse,\n      \"id\" | \"name\" | \"icon\" | \"social_sentiment_value\" | \"news_sentiment_value\"\n    >\n  >;\n};\n\nexport type GetDailyOverviewQueryVariables = {\n  asset: Scalars[\"String\"];\n};\n\nexport type GetDailyOverviewQuery = { __typename: \"Query\" } & {\n  getAssets: { __typename: \"AssetsResponse\" } & {\n    assets: Array<\n      { __typename: \"Asset\" } & Pick<\n        Asset,\n        \"id\" | \"news_sentiment_value\" | \"social_sentiment_value\"\n      >\n    >;\n  };\n  getGeneratedOverview: { __typename: \"GetGeneratedOverviewResponse\" } & Pick<\n    GetGeneratedOverviewResponse,\n    \"ok\" | \"error\" | \"message\" | \"images\"\n  >;\n};\n\nexport type GetAssetDetailsQueryVariables = {\n  assets: Array<Scalars[\"String\"]>;\n  timeWindow: Scalars[\"String\"];\n};\n\nexport type GetAssetDetailsQuery = { __typename: \"Query\" } & {\n  getAssetDetails: Array<\n    { __typename: \"AssetDetailsResponse\" } & Pick<\n      AssetDetailsResponse,\n      \"id\" | \"name\" | \"social_sentiment_value\" | \"news_sentiment_value\"\n    > & {\n        stats: Maybe<\n          { __typename: \"GetPublicationsStatsResponse\" } & Pick<\n            GetPublicationsStatsResponse,\n            | \"articles_count\"\n            | \"tweets_count\"\n            | \"reddit_posts_count\"\n            | \"telegram_messages_count\"\n            | \"bitmex_messages_count\"\n          >\n        >;\n        transactions: Maybe<\n          { __typename: \"GenericCount\" } & Pick<GenericCount, \"count\">\n        >;\n      }\n  >;\n};\n\nexport type GetSentimentQueryVariables = {\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n};\n\nexport type GetSentimentQuery = { __typename: \"Query\" } & {\n  getSentimentValue: { __typename: \"GetSentimentValueResponse\" } & Pick<\n    GetSentimentValueResponse,\n    \"ok\" | \"error\" | \"social_sentiment_value\" | \"news_sentiment_value\"\n  >;\n};\n\nexport type TwitterInfluenceQueryVariables = {\n  limit?: Maybe<Scalars[\"Int\"]>;\n  resolution: Scalars[\"String\"];\n};\n\nexport type TwitterInfluenceQuery = { __typename: \"Query\" } & {\n  getTopTwitterInfluencers: {\n    __typename: \"GetTopTwitterInfluencersResponse\";\n  } & Pick<GetTopTwitterInfluencersResponse, \"ok\" | \"error\"> & {\n      users: Array<\n        { __typename: \"TwitterUser\" } & Pick<\n          TwitterUser,\n          \"name\" | \"screen_name\" | \"profile_image_url_https\" | \"order_change\"\n        >\n      >;\n    };\n};\n\nexport type TopAssetsQueryVariables = {\n  time_window: Scalars[\"String\"];\n};\n\nexport type TopAssetsQuery = { __typename: \"Query\" } & {\n  getAssetsBySentiment: { __typename: \"GetAssetsBySentimentResponse\" } & Pick<\n    GetAssetsBySentimentResponse,\n    \"ok\" | \"error\"\n  > & {\n      assets: Array<\n        { __typename: \"AssetSentiment\" } & Pick<\n          AssetSentiment,\n          \"id\" | \"icon\" | \"change\" | \"name\"\n        >\n      >;\n    };\n};\n\nexport type FragmentSentimentFragment = { __typename: \"Candle\" } & Pick<\n  Candle,\n  \"id\" | \"asset\" | \"resolution\" | \"a\" | \"pv\" | \"nv\"\n>;\n\nexport type ChartSentimentsQueryVariables = {\n  currencyId: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  page_size?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type ChartSentimentsQuery = { __typename: \"Query\" } & {\n  getHistoricNewsSentiments: { __typename: \"GetSentimentsResponse\" } & {\n    candles: Array<{ __typename: \"Candle\" } & FragmentSentimentFragment>;\n  };\n  getHistoricSocialSentiments: { __typename: \"GetSentimentsResponse\" } & {\n    candles: Array<{ __typename: \"Candle\" } & FragmentSentimentFragment>;\n  };\n};\n\nexport type AssetsQueryVariables = {\n  assets?: Maybe<Array<Scalars[\"String\"]>>;\n};\n\nexport type AssetsQuery = { __typename: \"Query\" } & {\n  getAssets: { __typename: \"AssetsResponse\" } & Pick<\n    AssetsResponse,\n    \"ok\" | \"error\"\n  > & {\n      assets: Array<\n        { __typename: \"Asset\" } & Pick<\n          Asset,\n          | \"id\"\n          | \"name\"\n          | \"price\"\n          | \"icon\"\n          | \"social_sentiment_value\"\n          | \"price_change\"\n        >\n      >;\n    };\n};\n\nexport type HeadlinesQueryVariables = {\n  asset: Scalars[\"String\"];\n};\n\nexport type HeadlinesQuery = { __typename: \"Query\" } & {\n  getFeedHeadlines: { __typename: \"GetFeedHeadlinesResponse\" } & {\n    entries: Array<\n      | ({ __typename: \"Article\" } & {\n          sentiment: { __typename: \"SentimentModel\" } & Pick<\n            SentimentModel,\n            \"sentiment\"\n          >;\n          base: { __typename: \"BaseModel\" } & Pick<\n            BaseModel,\n            \"title\" | \"content\" | \"domain\" | \"images\" | \"favicon\" | \"source\"\n          >;\n        })\n      | ({ __typename: \"Tweet\" } & {\n          sentiment: { __typename: \"SentimentModel\" } & Pick<\n            SentimentModel,\n            \"sentiment\"\n          >;\n          base: { __typename: \"BaseModel\" } & Pick<\n            BaseModel,\n            \"title\" | \"content\" | \"domain\" | \"images\" | \"favicon\" | \"source\"\n          >;\n        })\n      | ({ __typename: \"RedditPost\" } & {\n          sentiment: { __typename: \"SentimentModel\" } & Pick<\n            SentimentModel,\n            \"sentiment\"\n          >;\n          base: { __typename: \"BaseModel\" } & Pick<\n            BaseModel,\n            \"title\" | \"content\" | \"domain\" | \"images\" | \"favicon\" | \"source\"\n          >;\n        })\n      | ({ __typename: \"Video\" } & {\n          sentiment: { __typename: \"SentimentModel\" } & Pick<\n            SentimentModel,\n            \"sentiment\"\n          >;\n          base: { __typename: \"BaseModel\" } & Pick<\n            BaseModel,\n            \"title\" | \"content\" | \"domain\" | \"images\" | \"favicon\" | \"source\"\n          >;\n        })\n    >;\n  };\n};\n\nexport type GetAssetTagsQueryVariables = {\n  asset: Scalars[\"String\"];\n  timeFrame: Scalars[\"String\"];\n};\n\nexport type GetAssetTagsQuery = { __typename: \"Query\" } & {\n  getTags: { __typename: \"GetTagsResponse\" } & Pick<\n    GetTagsResponse,\n    \"ok\" | \"error\"\n  > & {\n      tags: Array<{ __typename: \"TagCount\" } & Pick<TagCount, \"tag\" | \"count\">>;\n    };\n};\n\nexport type GetPublicationsQueryVariables = {\n  asset?: Maybe<Array<Scalars[\"String\"]>>;\n};\n\nexport type GetPublicationsQuery = { __typename: \"Query\" } & {\n  getPublications: { __typename: \"GetPublicationsSearchResponse\" } & {\n    entries: Array<\n      | ({ __typename: \"Article\" } & {\n          sentiment: { __typename: \"SentimentModel\" } & Pick<\n            SentimentModel,\n            \"sentiment\"\n          >;\n          base: { __typename: \"BaseModel\" } & Pick<\n            BaseModel,\n            | \"id\"\n            | \"title\"\n            | \"content\"\n            | \"pub_date\"\n            | \"source\"\n            | \"excerpt\"\n            | \"favicon\"\n          >;\n        })\n      | { __typename: \"Tweet\" }\n      | { __typename: \"RedditPost\" }\n      | { __typename: \"Video\" }\n    >;\n  };\n};\n\nexport type TweetsOnChartQueryVariables = {\n  asset: Scalars[\"String\"];\n  limit: Scalars[\"Int\"];\n};\n\nexport type TweetsOnChartQuery = { __typename: \"Query\" } & {\n  getTweetChart: { __typename: \"TweetChartResponse\" } & {\n    candles: Array<\n      { __typename: \"Candle\" } & Pick<Candle, \"a\" | \"timestamp\" | \"pv\" | \"nv\">\n    >;\n    tweets: Array<\n      { __typename: \"Tweet\" } & {\n        base: { __typename: \"BaseModel\" } & Pick<\n          BaseModel,\n          \"id\" | \"source\" | \"content\" | \"author\" | \"pub_date\"\n        >;\n        extended_tweet: { __typename: \"ExtendedTweet\" } & Pick<\n          ExtendedTweet,\n          \"id_str\" | \"author_profile_image_url_http\"\n        >;\n      }\n    >;\n  };\n  getAssets: { __typename: \"AssetsResponse\" } & {\n    assets: Array<\n      { __typename: \"Asset\" } & Pick<\n        Asset,\n        \"id\" | \"name\" | \"price\" | \"price_change\"\n      > & {\n          historyM1: Array<\n            { __typename: \"Histocandle\" } & Pick<Histocandle, \"close\" | \"time\">\n          >;\n        }\n    >;\n  };\n};\n\nexport const FragmentSentimentFragmentDoc = gql`\n  fragment FragmentSentiment on Candle {\n    id\n    asset\n    resolution\n    a\n    pv\n    nv\n  }\n`;\nexport const CryptoSentimentDocument = gql`\n  query CryptoSentiment($assets: [String!]!, $time_window: String!) {\n    getAssetDetails(request: { assets: $assets, time_window: $time_window }) {\n      id\n      name\n      icon\n      social_sentiment_value\n      news_sentiment_value\n    }\n  }\n`;\n\n/**\n * __useCryptoSentimentQuery__\n *\n * To run a query within a React component, call `useCryptoSentimentQuery` and pass it any options that fit your needs.\n * When your component renders, `useCryptoSentimentQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCryptoSentimentQuery({\n *   variables: {\n *      assets: // value for 'assets'\n *      time_window: // value for 'time_window'\n *   },\n * });\n */\nexport function useCryptoSentimentQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    CryptoSentimentQuery,\n    CryptoSentimentQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    CryptoSentimentQuery,\n    CryptoSentimentQueryVariables\n  >(CryptoSentimentDocument, baseOptions);\n}\nexport function useCryptoSentimentLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    CryptoSentimentQuery,\n    CryptoSentimentQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    CryptoSentimentQuery,\n    CryptoSentimentQueryVariables\n  >(CryptoSentimentDocument, baseOptions);\n}\nexport type CryptoSentimentQueryHookResult = ReturnType<\n  typeof useCryptoSentimentQuery\n>;\nexport type CryptoSentimentLazyQueryHookResult = ReturnType<\n  typeof useCryptoSentimentLazyQuery\n>;\nexport type CryptoSentimentQueryResult = ApolloReactCommon.QueryResult<\n  CryptoSentimentQuery,\n  CryptoSentimentQueryVariables\n>;\nexport const GetDailyOverviewDocument = gql`\n  query GetDailyOverview($asset: String!) {\n    getAssets(assets: [$asset]) {\n      assets {\n        id\n        news_sentiment_value\n        social_sentiment_value\n      }\n    }\n    getGeneratedOverview(asset: $asset) {\n      ok\n      error\n      message\n      images\n    }\n  }\n`;\n\n/**\n * __useGetDailyOverviewQuery__\n *\n * To run a query within a React component, call `useGetDailyOverviewQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetDailyOverviewQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetDailyOverviewQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *   },\n * });\n */\nexport function useGetDailyOverviewQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    GetDailyOverviewQuery,\n    GetDailyOverviewQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    GetDailyOverviewQuery,\n    GetDailyOverviewQueryVariables\n  >(GetDailyOverviewDocument, baseOptions);\n}\nexport function useGetDailyOverviewLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    GetDailyOverviewQuery,\n    GetDailyOverviewQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    GetDailyOverviewQuery,\n    GetDailyOverviewQueryVariables\n  >(GetDailyOverviewDocument, baseOptions);\n}\nexport type GetDailyOverviewQueryHookResult = ReturnType<\n  typeof useGetDailyOverviewQuery\n>;\nexport type GetDailyOverviewLazyQueryHookResult = ReturnType<\n  typeof useGetDailyOverviewLazyQuery\n>;\nexport type GetDailyOverviewQueryResult = ApolloReactCommon.QueryResult<\n  GetDailyOverviewQuery,\n  GetDailyOverviewQueryVariables\n>;\nexport const GetAssetDetailsDocument = gql`\n  query GetAssetDetails($assets: [String!]!, $timeWindow: String!) {\n    getAssetDetails(request: { assets: $assets, time_window: $timeWindow }) {\n      id\n      name\n      social_sentiment_value\n      news_sentiment_value\n      stats {\n        articles_count\n        tweets_count\n        reddit_posts_count\n        telegram_messages_count\n        bitmex_messages_count\n      }\n      transactions {\n        count\n      }\n    }\n  }\n`;\n\n/**\n * __useGetAssetDetailsQuery__\n *\n * To run a query within a React component, call `useGetAssetDetailsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAssetDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAssetDetailsQuery({\n *   variables: {\n *      assets: // value for 'assets'\n *      timeWindow: // value for 'timeWindow'\n *   },\n * });\n */\nexport function useGetAssetDetailsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    GetAssetDetailsQuery,\n    GetAssetDetailsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    GetAssetDetailsQuery,\n    GetAssetDetailsQueryVariables\n  >(GetAssetDetailsDocument, baseOptions);\n}\nexport function useGetAssetDetailsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    GetAssetDetailsQuery,\n    GetAssetDetailsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    GetAssetDetailsQuery,\n    GetAssetDetailsQueryVariables\n  >(GetAssetDetailsDocument, baseOptions);\n}\nexport type GetAssetDetailsQueryHookResult = ReturnType<\n  typeof useGetAssetDetailsQuery\n>;\nexport type GetAssetDetailsLazyQueryHookResult = ReturnType<\n  typeof useGetAssetDetailsLazyQuery\n>;\nexport type GetAssetDetailsQueryResult = ApolloReactCommon.QueryResult<\n  GetAssetDetailsQuery,\n  GetAssetDetailsQueryVariables\n>;\nexport const GetSentimentDocument = gql`\n  query GetSentiment($asset: String!, $resolution: String!) {\n    getSentimentValue(request: { asset: $asset, time_window: $resolution }) {\n      ok\n      error\n      social_sentiment_value\n      news_sentiment_value\n    }\n  }\n`;\n\n/**\n * __useGetSentimentQuery__\n *\n * To run a query within a React component, call `useGetSentimentQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSentimentQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSentimentQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *      resolution: // value for 'resolution'\n *   },\n * });\n */\nexport function useGetSentimentQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    GetSentimentQuery,\n    GetSentimentQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    GetSentimentQuery,\n    GetSentimentQueryVariables\n  >(GetSentimentDocument, baseOptions);\n}\nexport function useGetSentimentLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    GetSentimentQuery,\n    GetSentimentQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    GetSentimentQuery,\n    GetSentimentQueryVariables\n  >(GetSentimentDocument, baseOptions);\n}\nexport type GetSentimentQueryHookResult = ReturnType<\n  typeof useGetSentimentQuery\n>;\nexport type GetSentimentLazyQueryHookResult = ReturnType<\n  typeof useGetSentimentLazyQuery\n>;\nexport type GetSentimentQueryResult = ApolloReactCommon.QueryResult<\n  GetSentimentQuery,\n  GetSentimentQueryVariables\n>;\nexport const TwitterInfluenceDocument = gql`\n  query twitterInfluence($limit: Int, $resolution: String!) {\n    getTopTwitterInfluencers(limit: $limit, resolution: $resolution) {\n      ok\n      error\n      users {\n        name\n        screen_name\n        profile_image_url_https\n        order_change\n      }\n    }\n  }\n`;\n\n/**\n * __useTwitterInfluenceQuery__\n *\n * To run a query within a React component, call `useTwitterInfluenceQuery` and pass it any options that fit your needs.\n * When your component renders, `useTwitterInfluenceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTwitterInfluenceQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      resolution: // value for 'resolution'\n *   },\n * });\n */\nexport function useTwitterInfluenceQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    TwitterInfluenceQuery,\n    TwitterInfluenceQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    TwitterInfluenceQuery,\n    TwitterInfluenceQueryVariables\n  >(TwitterInfluenceDocument, baseOptions);\n}\nexport function useTwitterInfluenceLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    TwitterInfluenceQuery,\n    TwitterInfluenceQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    TwitterInfluenceQuery,\n    TwitterInfluenceQueryVariables\n  >(TwitterInfluenceDocument, baseOptions);\n}\nexport type TwitterInfluenceQueryHookResult = ReturnType<\n  typeof useTwitterInfluenceQuery\n>;\nexport type TwitterInfluenceLazyQueryHookResult = ReturnType<\n  typeof useTwitterInfluenceLazyQuery\n>;\nexport type TwitterInfluenceQueryResult = ApolloReactCommon.QueryResult<\n  TwitterInfluenceQuery,\n  TwitterInfluenceQueryVariables\n>;\nexport const TopAssetsDocument = gql`\n  query TopAssets($time_window: String!) {\n    getAssetsBySentiment(request: { time_window: $time_window }) {\n      ok\n      error\n      assets {\n        id\n        icon\n        change\n        name\n      }\n    }\n  }\n`;\n\n/**\n * __useTopAssetsQuery__\n *\n * To run a query within a React component, call `useTopAssetsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTopAssetsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTopAssetsQuery({\n *   variables: {\n *      time_window: // value for 'time_window'\n *   },\n * });\n */\nexport function useTopAssetsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    TopAssetsQuery,\n    TopAssetsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<TopAssetsQuery, TopAssetsQueryVariables>(\n    TopAssetsDocument,\n    baseOptions\n  );\n}\nexport function useTopAssetsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    TopAssetsQuery,\n    TopAssetsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<TopAssetsQuery, TopAssetsQueryVariables>(\n    TopAssetsDocument,\n    baseOptions\n  );\n}\nexport type TopAssetsQueryHookResult = ReturnType<typeof useTopAssetsQuery>;\nexport type TopAssetsLazyQueryHookResult = ReturnType<\n  typeof useTopAssetsLazyQuery\n>;\nexport type TopAssetsQueryResult = ApolloReactCommon.QueryResult<\n  TopAssetsQuery,\n  TopAssetsQueryVariables\n>;\nexport const ChartSentimentsDocument = gql`\n  query ChartSentiments(\n    $currencyId: String!\n    $resolution: String!\n    $page_size: String\n  ) {\n    getHistoricNewsSentiments(\n      request: {\n        asset: $currencyId\n        resolution: $resolution\n        page_size: $page_size\n      }\n    ) {\n      candles {\n        ...FragmentSentiment\n      }\n    }\n    getHistoricSocialSentiments(\n      request: {\n        asset: $currencyId\n        resolution: $resolution\n        page_size: $page_size\n      }\n    ) {\n      candles {\n        ...FragmentSentiment\n      }\n    }\n  }\n  ${FragmentSentimentFragmentDoc}\n`;\n\n/**\n * __useChartSentimentsQuery__\n *\n * To run a query within a React component, call `useChartSentimentsQuery` and pass it any options that fit your needs.\n * When your component renders, `useChartSentimentsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useChartSentimentsQuery({\n *   variables: {\n *      currencyId: // value for 'currencyId'\n *      resolution: // value for 'resolution'\n *      page_size: // value for 'page_size'\n *   },\n * });\n */\nexport function useChartSentimentsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    ChartSentimentsQuery,\n    ChartSentimentsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    ChartSentimentsQuery,\n    ChartSentimentsQueryVariables\n  >(ChartSentimentsDocument, baseOptions);\n}\nexport function useChartSentimentsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    ChartSentimentsQuery,\n    ChartSentimentsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    ChartSentimentsQuery,\n    ChartSentimentsQueryVariables\n  >(ChartSentimentsDocument, baseOptions);\n}\nexport type ChartSentimentsQueryHookResult = ReturnType<\n  typeof useChartSentimentsQuery\n>;\nexport type ChartSentimentsLazyQueryHookResult = ReturnType<\n  typeof useChartSentimentsLazyQuery\n>;\nexport type ChartSentimentsQueryResult = ApolloReactCommon.QueryResult<\n  ChartSentimentsQuery,\n  ChartSentimentsQueryVariables\n>;\nexport const AssetsDocument = gql`\n  query Assets($assets: [String!]) {\n    getAssets(assets: $assets) {\n      ok\n      error\n      assets {\n        id\n        name\n        price\n        icon\n        social_sentiment_value\n        price_change\n      }\n    }\n  }\n`;\n\n/**\n * __useAssetsQuery__\n *\n * To run a query within a React component, call `useAssetsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAssetsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAssetsQuery({\n *   variables: {\n *      assets: // value for 'assets'\n *   },\n * });\n */\nexport function useAssetsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    AssetsQuery,\n    AssetsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<AssetsQuery, AssetsQueryVariables>(\n    AssetsDocument,\n    baseOptions\n  );\n}\nexport function useAssetsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    AssetsQuery,\n    AssetsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<AssetsQuery, AssetsQueryVariables>(\n    AssetsDocument,\n    baseOptions\n  );\n}\nexport type AssetsQueryHookResult = ReturnType<typeof useAssetsQuery>;\nexport type AssetsLazyQueryHookResult = ReturnType<typeof useAssetsLazyQuery>;\nexport type AssetsQueryResult = ApolloReactCommon.QueryResult<\n  AssetsQuery,\n  AssetsQueryVariables\n>;\nexport const HeadlinesDocument = gql`\n  query Headlines($asset: String!) {\n    getFeedHeadlines(request: { asset: $asset }) {\n      entries {\n        ... on Article {\n          sentiment {\n            sentiment\n          }\n          base {\n            title\n            content\n            domain\n            images\n            favicon\n            source\n          }\n        }\n        ... on Tweet {\n          sentiment {\n            sentiment\n          }\n          base {\n            title\n            content\n            domain\n            images\n            favicon\n            source\n          }\n        }\n        ... on RedditPost {\n          sentiment {\n            sentiment\n          }\n          base {\n            title\n            content\n            domain\n            images\n            favicon\n            source\n          }\n        }\n        ... on Video {\n          sentiment {\n            sentiment\n          }\n          base {\n            title\n            content\n            domain\n            images\n            favicon\n            source\n          }\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useHeadlinesQuery__\n *\n * To run a query within a React component, call `useHeadlinesQuery` and pass it any options that fit your needs.\n * When your component renders, `useHeadlinesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHeadlinesQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *   },\n * });\n */\nexport function useHeadlinesQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    HeadlinesQuery,\n    HeadlinesQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<HeadlinesQuery, HeadlinesQueryVariables>(\n    HeadlinesDocument,\n    baseOptions\n  );\n}\nexport function useHeadlinesLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    HeadlinesQuery,\n    HeadlinesQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<HeadlinesQuery, HeadlinesQueryVariables>(\n    HeadlinesDocument,\n    baseOptions\n  );\n}\nexport type HeadlinesQueryHookResult = ReturnType<typeof useHeadlinesQuery>;\nexport type HeadlinesLazyQueryHookResult = ReturnType<\n  typeof useHeadlinesLazyQuery\n>;\nexport type HeadlinesQueryResult = ApolloReactCommon.QueryResult<\n  HeadlinesQuery,\n  HeadlinesQueryVariables\n>;\nexport const GetAssetTagsDocument = gql`\n  query GetAssetTags($asset: String!, $timeFrame: String!) {\n    getTags(request: { limit: 20, asset: $asset, time_window: $timeFrame }) {\n      ok\n      error\n      tags {\n        tag\n        count\n      }\n    }\n  }\n`;\n\n/**\n * __useGetAssetTagsQuery__\n *\n * To run a query within a React component, call `useGetAssetTagsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAssetTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAssetTagsQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *      timeFrame: // value for 'timeFrame'\n *   },\n * });\n */\nexport function useGetAssetTagsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    GetAssetTagsQuery,\n    GetAssetTagsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    GetAssetTagsQuery,\n    GetAssetTagsQueryVariables\n  >(GetAssetTagsDocument, baseOptions);\n}\nexport function useGetAssetTagsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    GetAssetTagsQuery,\n    GetAssetTagsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    GetAssetTagsQuery,\n    GetAssetTagsQueryVariables\n  >(GetAssetTagsDocument, baseOptions);\n}\nexport type GetAssetTagsQueryHookResult = ReturnType<\n  typeof useGetAssetTagsQuery\n>;\nexport type GetAssetTagsLazyQueryHookResult = ReturnType<\n  typeof useGetAssetTagsLazyQuery\n>;\nexport type GetAssetTagsQueryResult = ApolloReactCommon.QueryResult<\n  GetAssetTagsQuery,\n  GetAssetTagsQueryVariables\n>;\nexport const GetPublicationsDocument = gql`\n  query GetPublications($asset: [String!]) {\n    getPublications(request: { assets: $asset }) {\n      entries {\n        ... on Article {\n          sentiment {\n            sentiment\n          }\n          base {\n            id\n            title\n            content\n            pub_date\n            source\n            excerpt\n            favicon\n          }\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useGetPublicationsQuery__\n *\n * To run a query within a React component, call `useGetPublicationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPublicationsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPublicationsQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *   },\n * });\n */\nexport function useGetPublicationsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    GetPublicationsQuery,\n    GetPublicationsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    GetPublicationsQuery,\n    GetPublicationsQueryVariables\n  >(GetPublicationsDocument, baseOptions);\n}\nexport function useGetPublicationsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    GetPublicationsQuery,\n    GetPublicationsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    GetPublicationsQuery,\n    GetPublicationsQueryVariables\n  >(GetPublicationsDocument, baseOptions);\n}\nexport type GetPublicationsQueryHookResult = ReturnType<\n  typeof useGetPublicationsQuery\n>;\nexport type GetPublicationsLazyQueryHookResult = ReturnType<\n  typeof useGetPublicationsLazyQuery\n>;\nexport type GetPublicationsQueryResult = ApolloReactCommon.QueryResult<\n  GetPublicationsQuery,\n  GetPublicationsQueryVariables\n>;\nexport const TweetsOnChartDocument = gql`\n  query tweetsOnChart($asset: String!, $limit: Int!) {\n    getTweetChart(\n      request: {\n        asset: $asset\n        resolution: \"M1\"\n        time_window: \"H1\"\n        tweet_limit: $limit\n      }\n    ) {\n      candles {\n        a\n        timestamp\n        pv\n        nv\n      }\n      tweets {\n        base {\n          id\n          source\n          content\n          author\n          pub_date\n        }\n        extended_tweet {\n          id_str\n          author_profile_image_url_http\n        }\n      }\n    }\n    getAssets(assets: [$asset]) {\n      assets {\n        id\n        name\n        price\n        price_change\n        historyM1 {\n          close\n          time\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useTweetsOnChartQuery__\n *\n * To run a query within a React component, call `useTweetsOnChartQuery` and pass it any options that fit your needs.\n * When your component renders, `useTweetsOnChartQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTweetsOnChartQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useTweetsOnChartQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    TweetsOnChartQuery,\n    TweetsOnChartQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    TweetsOnChartQuery,\n    TweetsOnChartQueryVariables\n  >(TweetsOnChartDocument, baseOptions);\n}\nexport function useTweetsOnChartLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    TweetsOnChartQuery,\n    TweetsOnChartQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    TweetsOnChartQuery,\n    TweetsOnChartQueryVariables\n  >(TweetsOnChartDocument, baseOptions);\n}\nexport type TweetsOnChartQueryHookResult = ReturnType<\n  typeof useTweetsOnChartQuery\n>;\nexport type TweetsOnChartLazyQueryHookResult = ReturnType<\n  typeof useTweetsOnChartLazyQuery\n>;\nexport type TweetsOnChartQueryResult = ApolloReactCommon.QueryResult<\n  TweetsOnChartQuery,\n  TweetsOnChartQueryVariables\n>;\n","import * as React from \"react\";\nimport { CSSProperties } from \"styled-components\";\nimport { useContext } from \"react\";\nimport { ThemeContext } from \"grommet\";\n\ninterface CryptoMoodIconProps {\n  width: number;\n  height: number;\n  style?: CSSProperties;\n}\n\nexport const CryptomoodSvg = (props: CryptoMoodIconProps) => {\n  const theme: any = useContext(ThemeContext);\n  return (\n    <div style={props.style}>\n      <svg\n        width={props.width}\n        height={props.height}\n        viewBox={\"0 0 155 39\"}\n        fill=\"none\"\n      >\n        <rect\n          x={1.478}\n          y={1.451}\n          width={152.043}\n          height={36.098}\n          rx={9}\n          fill={theme.cryptoMoodLogo.fill}\n          stroke={theme.cryptoMoodLogo.border}\n          strokeWidth={2}\n        />\n        <path\n          d=\"M32.49 20.475h-9.793a1.21 1.21 0 00-1.052.626l-2.969 5.326a.196.196 0 01-.169.101h-.267c-.657 0-1.265-.359-1.594-.943l-.087-.155a.201.201 0 010-.2l2.979-5.365a1.273 1.273 0 000-1.239l-3-5.352a.201.201 0 010-.2l.108-.194c.327-.58.932-.938 1.586-.938h.176c.069 0 .133.038.168.098l3.052 5.321a1.21 1.21 0 001.053.626h9.809c.645 0 1.05-.717.726-1.29l-4.384-7.774-.008-.016-.015-.026a2.973 2.973 0 00-2.571-1.504h-9.913a2.96 2.96 0 00-2.405 1.256c-.063.087-.121.178-.173.27L8.79 17.707a3.088 3.088 0 00-.399 1.527c0 .527.133 1.053.4 1.526l4.956 8.803c.068.122.145.239.228.347a2.964 2.964 0 002.35 1.186H26.227c.242 0 .478-.031.706-.088a3.009 3.009 0 001.878-1.426l.015-.024.003-.007 4.388-7.784c.322-.574-.082-1.29-.727-1.29z\"\n          fill=\"url(#prefix__paint0_linear)\"\n        />\n        <path\n          opacity={0.25}\n          d=\"M32.49 20.475h-9.793a1.21 1.21 0 00-1.052.626l-2.969 5.326a.196.196 0 01-.169.101h-.267c-.657 0-1.265-.359-1.594-.943l-.087-.155a.201.201 0 010-.2l2.979-5.365a1.273 1.273 0 000-1.239l-3-5.352a.201.201 0 010-.2l.108-.194c.327-.58.932-.938 1.586-.938h.176c.069 0 .133.038.168.098l3.052 5.321a1.21 1.21 0 001.053.626h9.809c.645 0 1.05-.717.726-1.29l-4.384-7.774-.008-.016-.015-.026a2.973 2.973 0 00-2.571-1.504h-9.913a2.96 2.96 0 00-2.405 1.256c-.063.087-.121.178-.173.27L8.79 17.707a3.088 3.088 0 00-.399 1.527c0 .527.133 1.053.4 1.526l4.956 8.803c.068.122.145.239.228.347a2.964 2.964 0 002.35 1.186H26.227c.242 0 .478-.031.706-.088a3.009 3.009 0 001.878-1.426l.015-.024.003-.007 4.388-7.784c.322-.574-.082-1.29-.727-1.29z\"\n          fill=\"#FF0BD1\"\n        />\n        <path\n          d=\"M44.211 14.142c1.537 0 2.927.839 3.854 2.01l1.793-1.555c-1.567-1.98-3.685-2.818-5.647-2.818-4.641 0-7.233 3.375-7.233 7.569 0 4.819 3.331 7.426 7.233 7.426 2.523 0 4.415-1.201 5.647-2.79l-1.793-1.565c-.907 1.162-2.238 2-3.854 2-2.73 0-4.691-2.06-4.691-5.071.001-3.125 1.912-5.206 4.691-5.206zM56.012 16.395c-1.202 0-2.297.597-3.065 1.667h-.03v-1.515h-2.256V26.64h2.256v-4.79c0-1.636.976-2.9 2.69-2.9.158 0 .425.011.681.032v-2.576c-.08-.01-.18-.01-.276-.01zM62.024 23.357h-.02l-2.719-6.81H56.91l4.001 9.527-1.775 4.66h2.375l5.411-14.188h-2.365l-2.533 6.811zM72.973 16.395c-1.3 0-2.375.475-3.125 1.375h-.04v-1.222h-2.254v14.186h2.256v-5.335h.03c.72.9 1.773 1.404 3.114 1.404 2.73 0 4.77-2.041 4.77-5.162 0-3.053-2.04-5.246-4.751-5.246zm-.374 8.306c-1.606 0-2.878-1.221-2.878-3.052 0-1.789 1.173-3.152 2.868-3.152 1.577 0 2.838 1.213 2.838 3.152 0 1.79-1.162 3.052-2.828 3.052zM82.326 24.641c-.63 0-.945-.374-.945-1.404v-4.72h2.898v-1.969H81.38v-3.607h-2.256v3.607h-1.202v1.97h1.202v4.93c0 2.254 1.054 3.355 2.749 3.355 1.29 0 1.912-.273 2.502-.596l-.592-2c-.52.281-1.074.434-1.458.434zM89.724 16.395c-3.115 0-5.175 2.233-5.175 5.215 0 2.96 2.06 5.193 5.175 5.193 3.015 0 5.164-2.122 5.164-5.193 0-3.092-2.149-5.215-5.164-5.215zm0 8.306c-1.695 0-2.878-1.364-2.878-3.091 0-1.758 1.153-3.113 2.878-3.113 1.616 0 2.868 1.263 2.868 3.113 0 1.818-1.27 3.091-2.868 3.091zM102.986 20.74h-.04l-4.73-8.8h-2.444v14.702h2.433V16.79h.03l3.923 7.024h1.596l3.922-7.024h.03v9.852h2.434V11.94h-2.444l-4.71 8.8zM116.197 16.395c-3.114 0-5.174 2.233-5.174 5.215 0 2.96 2.06 5.193 5.174 5.193 3.016 0 5.165-2.122 5.165-5.193-.002-3.092-2.149-5.215-5.165-5.215zm0 8.306c-1.694 0-2.878-1.364-2.878-3.091 0-1.758 1.154-3.113 2.878-3.113 1.616 0 2.868 1.263 2.868 3.113-.001 1.818-1.272 3.091-2.868 3.091zM127.429 16.395c-3.114 0-5.174 2.233-5.174 5.215 0 2.96 2.06 5.193 5.174 5.193 3.016 0 5.165-2.122 5.165-5.193 0-3.092-2.149-5.215-5.165-5.215zm0 8.306c-1.694 0-2.878-1.364-2.878-3.091 0-1.758 1.154-3.113 2.878-3.113 1.616 0 2.868 1.263 2.868 3.113 0 1.818-1.272 3.091-2.868 3.091zM141.392 17.76h-.048c-.739-.898-1.824-1.364-3.115-1.364-2.71 0-4.75 2.193-4.75 5.244 0 3.122 2.04 5.162 4.77 5.162 1.4 0 2.485-.545 3.204-1.516h.04v1.355h2.159V11.94h-2.256v5.82h-.004zm-2.789 6.942c-1.666 0-2.828-1.263-2.828-3.05 0-1.94 1.263-3.152 2.838-3.152 1.695 0 2.868 1.364 2.868 3.151 0 1.827-1.272 3.051-2.878 3.051z\"\n          fill={theme.cryptoMoodLogo.text}\n        />\n        <defs>\n          <linearGradient\n            id=\"prefix__paint0_linear\"\n            x1={14.968}\n            y1={31.187}\n            x2={27.828}\n            y2={7.967}\n            gradientUnits=\"userSpaceOnUse\"\n          >\n            <stop stopColor=\"#FF009E\" />\n            <stop offset={1} stopColor=\"#FF8820\" />\n          </linearGradient>\n        </defs>\n      </svg>\n    </div>\n  );\n};\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface IntervalProps {\n  inputIntervals: string[];\n  changeInterval: any;\n  currentInterval: string;\n  fontSize?: number;\n  padding?: number;\n}\n\ninterface IntervalInputProps {\n  active: boolean;\n  fontSize?: number;\n}\n\nconst StyledInterval = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding-bottom: 4px;\n  overflow-x: auto;\n  min-height: 31px;\n`;\n\nconst StyledIntervalInput = styled.input<IntervalInputProps>`\n  font-size: ${props => (props.fontSize ? props.fontSize + \"px\" : \"20px\")};\n  font-family: \"Averta\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n    Oxygen, Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif;\n  display: flex;\n  align-self: center;\n  justify-self: center;\n  outline: none;\n  cursor: pointer;\n  border: none;\n  padding: 6px 12px;\n  text-decoration: none;\n  border-radius: 8px;\n  font-weight: bold;\n  color: ${props =>\n    props.active ? props.theme.interval.textActive : props.theme.interval.text};\n  background-color: ${props =>\n    props.active\n      ? props.theme.interval.backgroundActive\n      : props.theme.interval.background};\n`;\n\n/*\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *            Example of use Interval Component            *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n * For now API is implemented in intervals as [5m, 15m, 1h, 4h, 1d];\n *\n * To use this component, parent component need to\n *    a, import Interval.\n *\n *    b, implement\n *                   const [currentInterval, setCurrentInterval] = useState(\"D1\");\n *\n *    c, implement\n *                   const changeInterval = useCallback((interval: string) => {\n *                     setCurrentInterval(interval);\n *                   }, []);\n *\n *    d, prepare wanted intervals\n *\n *                   const inputIntervalButtons = [\"5 min\", \"15 min\", \"1 h\", \"4 h\", \"1 d\"];\n *\n *    e, use component in Render method\n *\n *                   <Interval currentInterval={currentInterval} inputIntervals={inputIntervalButtons}\n *                   changeInterval={changeInterval}/>\n *\n */\n\nexport const Interval = (props: IntervalProps) => {\n  return (\n    <StyledInterval>\n      {props.inputIntervals.map(interval => {\n        const [intervalNumber, intervalText] = interval.split(\" \", 2);\n        return (\n          <StyledIntervalInput\n            key={interval}\n            type=\"submit\"\n            active={\n              props.currentInterval ===\n                intervalText[0].toUpperCase() + intervalNumber ||\n              (intervalText.includes(\"M\") &&\n                (props.currentInterval.includes(\"M\") &&\n                  props.currentInterval.includes(intervalNumber)))\n            }\n            fontSize={props.fontSize}\n            value={interval}\n            onClick={() => {\n              props.changeInterval(\n                intervalText.includes(\"M\")\n                  ? \"MN\" + intervalNumber\n                  : intervalText[0].toUpperCase() + intervalNumber\n              );\n            }}\n          />\n        );\n      })}\n    </StyledInterval>\n  );\n};\n","import styled, { css } from 'styled-components';\nimport { genericStyles } from '../../utils';\nimport { defaultProps } from '../../default-props';\nvar FIT_MAP = {\n  cover: 'cover',\n  contain: 'contain'\n};\nvar fitStyle = css([\"flex:1 1;overflow:hidden;object-fit:\", \";\"], function (props) {\n  return FIT_MAP[props.fit];\n});\nvar StyledImage = styled.img.withConfig({\n  displayName: \"StyledImage\",\n  componentId: \"ey4zx9-0\"\n})([\"\", \" \", \" \", \" \", \"\"], genericStyles, function (props) {\n  return props.fit && fitStyle;\n}, function (props) {\n  return props.theme.image && props.theme.image.extend;\n}, function (props) {\n  return props.opacityProp && \"opacity: \" + (props.opacityProp === true ? props.theme.global.opacity.medium : props.theme.global.opacity[props.opacityProp] || props.opacityProp) + \";\\n  \";\n});\nStyledImage.defaultProps = {};\nObject.setPrototypeOf(StyledImage.defaultProps, defaultProps);\nexport { StyledImage };","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useState } from 'react';\nimport { compose } from 'recompose';\nimport { withForwardRef } from '../hocs';\nimport { StyledImage } from './StyledImage';\n\nvar Image = function Image(_ref) {\n  var fallback = _ref.fallback,\n      forwardRef = _ref.forwardRef,\n      onError = _ref.onError,\n      opacity = _ref.opacity,\n      src = _ref.src,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"fallback\", \"forwardRef\", \"onError\", \"opacity\", \"src\"]);\n\n  var _useState = useState(false),\n      imageMissing = _useState[0],\n      setImageMissing = _useState[1];\n\n  var handleError = function handleError(event) {\n    if (onError) {\n      onError(event);\n    }\n\n    setImageMissing(true);\n  };\n\n  var extraProps = {\n    onError: (onError || fallback) && handleError\n  };\n  return React.createElement(StyledImage, _extends({}, rest, extraProps, {\n    ref: forwardRef,\n    opacityProp: opacity,\n    src: !imageMissing ? src : fallback\n  }));\n};\n\nvar ImageDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  ImageDoc = require('./doc').doc(Image); // eslint-disable-line global-require\n}\n\nvar ImageWrapper = compose(withForwardRef)(ImageDoc || Image);\nexport { ImageWrapper as Image };","module.exports = __webpack_public_path__ + \"static/media/euphoria.6ab414c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/normal.acc75d8f.svg\";","module.exports = __webpack_public_path__ + \"static/media/positive.ade4c38c.svg\";","module.exports = __webpack_public_path__ + \"static/media/negative.3ec6703a.svg\";","module.exports = __webpack_public_path__ + \"static/media/depression.78bd8a63.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.f448d0f5.svg\";","import styled, { css } from 'styled-components';\nimport { genericStyles } from '../../utils';\nimport { defaultProps } from '../../default-props';\nvar roundStyle = css([\"border-radius:\", \";\"], function (props) {\n  return props.theme.global.edgeSize[props.round.size];\n}); // overflow: hidden is needed for ie11\n\nvar StyledMeter = styled.svg.withConfig({\n  displayName: \"StyledMeter\",\n  componentId: \"nsxarx-0\"\n})([\"max-width:100%;overflow:hidden;\", \" \", \" path{transition:stroke 0.3s,stroke-width 0.3s;}\", \";\"], genericStyles, function (props) {\n  return props.round && roundStyle;\n}, function (props) {\n  return props.theme.meter && props.theme.meter.extend;\n});\nStyledMeter.defaultProps = {};\nObject.setPrototypeOf(StyledMeter.defaultProps, defaultProps);\nexport { StyledMeter };","import { normalizeColor } from '../../utils';\nexport var strokeProps = function strokeProps(color, theme) {\n  var result = {};\n\n  if (color) {\n    if (typeof color === 'object') {\n      result.stroke = normalizeColor(color.color, theme);\n\n      if (color.opacity) {\n        result.strokeOpacity = \"\" + (color.opacity === true ? theme.global.opacity.medium : theme.global.opacity[color.opacity]);\n      }\n    } else {\n      result.stroke = normalizeColor(color, theme);\n    }\n  }\n\n  return result;\n};\nvar neutralExp = /^neutral-\\d+/;\nexport var defaultColor = function defaultColor(index, theme) {\n  var neutralColors = Object.keys(theme.global.colors).filter(function (k) {\n    return neutralExp.test(k);\n  });\n  return neutralColors[index % neutralColors.length];\n};","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { parseMetricToNum } from '../../utils';\nimport { StyledMeter } from './StyledMeter';\nimport { strokeProps, defaultColor } from './utils';\n\nvar Bar = function Bar(props) {\n  var background = props.background,\n      max = props.max,\n      round = props.round,\n      size = props.size,\n      theme = props.theme,\n      thickness = props.thickness,\n      values = props.values,\n      rest = _objectWithoutPropertiesLoose(props, [\"background\", \"max\", \"round\", \"size\", \"theme\", \"thickness\", \"values\"]);\n\n  var width = size === 'full' ? 288 : parseMetricToNum(theme.global.size[size] || size);\n  var height = parseMetricToNum(theme.global.edgeSize[thickness] || thickness); // account for the round cap, if any\n\n  var capOffset = round ? height / 2 : 0;\n  var mid = height / 2;\n  var someHighlight = (values || []).some(function (v) {\n    return v.highlight;\n  });\n  var start = capOffset;\n  var paths = (values || []).filter(function (v) {\n    return v.value > 0;\n  }).map(function (valueArg, index) {\n    var color = valueArg.color,\n        highlight = valueArg.highlight,\n        label = valueArg.label,\n        onHover = valueArg.onHover,\n        value = valueArg.value,\n        pathRest = _objectWithoutPropertiesLoose(valueArg, [\"color\", \"highlight\", \"label\", \"onHover\", \"value\"]);\n\n    var key = \"p-\" + index;\n    var delta = value * (width - 2 * capOffset) / max;\n    var d = \"M \" + start + \",\" + mid + \" L \" + (start + delta) + \",\" + mid;\n    var colorName = color || (index === values.length - 1 ? theme.meter.color : defaultColor(index, theme));\n    var hoverProps;\n\n    if (onHover) {\n      hoverProps = {\n        onMouseOver: function onMouseOver() {\n          return onHover(true);\n        },\n        onMouseLeave: function onMouseLeave() {\n          return onHover(false);\n        }\n      };\n    }\n\n    start += delta;\n    return React.createElement(\"path\", _extends({\n      key: key,\n      d: d,\n      fill: \"none\"\n    }, strokeProps(someHighlight && !highlight ? background : colorName, theme), {\n      strokeWidth: height,\n      strokeLinecap: round ? 'round' : 'butt'\n    }, hoverProps, pathRest));\n  }).reverse(); // reverse so the caps looks right\n\n  return React.createElement(StyledMeter, _extends({\n    viewBox: \"0 0 \" + width + \" \" + height,\n    preserveAspectRatio: \"none\",\n    width: size === 'full' ? '100%' : width,\n    height: height,\n    round: round ? {\n      size: thickness\n    } : undefined\n  }, rest), React.createElement(\"path\", _extends({\n    d: \"M \" + capOffset + \",\" + mid + \" L \" + (width - capOffset) + \",\" + mid,\n    fill: \"none\"\n  }, strokeProps(background, theme), {\n    strokeWidth: height,\n    strokeLinecap: round ? 'round' : 'square'\n  })), paths);\n};\n\nBar.defaultProps = {\n  background: 'light-1'\n};\nObject.setPrototypeOf(Bar.defaultProps, defaultProps);\nvar BarWrapper = compose(withTheme)(Bar);\nexport { BarWrapper as Bar };","var POST_DECIMAL_DIGITS = 10;\nexport var baseUnit = 24;\nexport var polarToCartesian = function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n  var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n  return {\n    x: centerX + radius * Math.cos(angleInRadians),\n    y: centerY + radius * Math.sin(angleInRadians)\n  };\n};\nexport var arcCommands = function arcCommands(centerX, centerY, radius, startAngle, endAngle) {\n  // handle that we can't draw a complete circle\n  var normalizedEndAngle = endAngle;\n\n  if (endAngle - startAngle >= 360) {\n    normalizedEndAngle = startAngle + 359.99;\n  }\n\n  var start = polarToCartesian(centerX, centerY, radius, normalizedEndAngle);\n  var end = polarToCartesian(centerX, centerY, radius, startAngle);\n  var arcSweep = normalizedEndAngle - startAngle <= 180 ? '0' : '1';\n  var d = ['M', start.x.toFixed(POST_DECIMAL_DIGITS), start.y.toFixed(POST_DECIMAL_DIGITS), 'A', radius.toFixed(POST_DECIMAL_DIGITS), radius.toFixed(POST_DECIMAL_DIGITS), 0, arcSweep, 0, end.x.toFixed(POST_DECIMAL_DIGITS), end.y.toFixed(POST_DECIMAL_DIGITS)].join(' ');\n  return d;\n};\nexport var translateEndAngle = function translateEndAngle(startAngle, anglePer, value) {\n  return Math.min(360, Math.max(0, startAngle + anglePer * value));\n};","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { arcCommands, parseMetricToNum, translateEndAngle } from '../../utils';\nimport { StyledMeter } from './StyledMeter';\nimport { strokeProps, defaultColor } from './utils';\n\nvar Circle = function Circle(props) {\n  var background = props.background,\n      max = props.max,\n      round = props.round,\n      size = props.size,\n      theme = props.theme,\n      thickness = props.thickness,\n      values = props.values,\n      rest = _objectWithoutPropertiesLoose(props, [\"background\", \"max\", \"round\", \"size\", \"theme\", \"thickness\", \"values\"]);\n\n  var width = size === 'full' ? 288 : parseMetricToNum(theme.global.size[size] || size);\n  var height = parseMetricToNum(theme.global.edgeSize[thickness] || thickness);\n  var mid = width / 2;\n  var radius = width / 2 - height / 2;\n  var anglePer = 360 / max;\n  var someHighlight = (values || []).some(function (v) {\n    return v.highlight;\n  });\n  var startValue = 0;\n  var startAngle = 0;\n  var paths = [];\n  var pathCaps = [];\n  (values || []).filter(function (v) {\n    return v.value > 0;\n  }).forEach(function (valueArg, index) {\n    var color = valueArg.color,\n        highlight = valueArg.highlight,\n        label = valueArg.label,\n        onHover = valueArg.onHover,\n        value = valueArg.value,\n        pathRest = _objectWithoutPropertiesLoose(valueArg, [\"color\", \"highlight\", \"label\", \"onHover\", \"value\"]);\n\n    var key = \"p-\" + index;\n    var colorName = color || (index === values.length - 1 ? theme.meter.color : defaultColor(index, theme));\n    var endAngle;\n\n    if (startValue + value >= max) {\n      endAngle = 360;\n    } else {\n      endAngle = Math.min(360, translateEndAngle(startAngle, anglePer, value));\n    }\n\n    var hoverProps;\n\n    if (onHover) {\n      hoverProps = {\n        onMouseOver: function onMouseOver() {\n          return onHover(true);\n        },\n        onMouseLeave: function onMouseLeave() {\n          return onHover(false);\n        }\n      };\n    }\n\n    var stroke = strokeProps(someHighlight && !highlight ? background : colorName, theme);\n\n    if (round) {\n      var d1 = arcCommands(width / 2, width / 2, radius, startAngle, endAngle);\n      paths.unshift(React.createElement(\"path\", _extends({\n        key: key,\n        d: d1,\n        fill: \"none\"\n      }, stroke, {\n        strokeWidth: height,\n        strokeLinecap: \"round\"\n      }, hoverProps, pathRest))); // To handle situations where the last values are small, redraw\n      // a dot at the end. Give just a bit of angle to avoid anti-aliasing\n      // leakage around the edge.\n\n      var d2 = arcCommands(width / 2, width / 2, radius, endAngle - 0.5, endAngle);\n      var pathCap = React.createElement(\"path\", _extends({\n        key: key + \"-\",\n        d: d2,\n        fill: \"none\"\n      }, stroke, {\n        strokeWidth: height,\n        strokeLinecap: \"round\"\n      }, hoverProps, pathRest)); // If we are on a large enough path to not need re-drawing previous\n      // ones, clear the pathCaps we've collected already.\n\n      if (endAngle - startAngle > 2 * anglePer) {\n        pathCaps = [];\n      }\n\n      pathCaps.unshift(pathCap);\n    } else {\n      var d = arcCommands(width / 2, width / 2, radius, startAngle, endAngle);\n      paths.push(React.createElement(\"path\", _extends({\n        key: key,\n        d: d,\n        fill: \"none\"\n      }, stroke, {\n        strokeWidth: height,\n        strokeLinecap: \"butt\"\n      }, hoverProps, pathRest)));\n    }\n\n    startValue += value;\n    startAngle = endAngle;\n  });\n  return React.createElement(StyledMeter, _extends({\n    viewBox: \"0 0 \" + width + \" \" + width,\n    width: size === 'full' ? '100%' : width,\n    height: size === 'full' ? '100%' : width\n  }, rest), React.createElement(\"circle\", _extends({\n    cx: mid,\n    cy: mid,\n    r: radius\n  }, strokeProps(background, theme), {\n    strokeWidth: height,\n    strokeLinecap: round ? 'round' : 'square',\n    fill: \"none\"\n  })), paths, pathCaps);\n};\n\nCircle.defaultProps = {};\nObject.setPrototypeOf(Circle.defaultProps, defaultProps);\nvar CircleWrapper = compose(withTheme)(Circle);\nexport { CircleWrapper as Circle };","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport { Bar } from './Bar';\nimport { Circle } from './Circle';\n\nvar deriveMax = function deriveMax(values) {\n  var max = 100;\n\n  if (values && values.length > 1) {\n    max = 0;\n    values.forEach(function (v) {\n      max += v.value;\n    });\n  }\n\n  return max;\n};\n\nvar Meter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Meter, _Component);\n\n  function Meter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {});\n\n    return _this;\n  }\n\n  Meter.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var max = prevState.max;\n    var nextMax = deriveMax(nextProps.values);\n\n    if (!max || nextMax !== max) {\n      return {\n        max: nextMax\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = Meter.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        type = _this$props.type,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"type\"]);\n\n    var max = this.state.max;\n    var content;\n\n    if (type === 'bar') {\n      content = React.createElement(Bar, _extends({\n        max: max\n      }, rest));\n    } else if (type === 'circle') {\n      content = React.createElement(Circle, _extends({\n        max: max\n      }, rest));\n    }\n\n    return content;\n  };\n\n  return Meter;\n}(Component);\n\n_defineProperty(Meter, \"defaultProps\", {\n  background: {\n    color: 'light-2',\n    opacity: 'medium'\n  },\n  size: 'medium',\n  thickness: 'medium',\n  type: 'bar'\n});\n\nvar MeterDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  MeterDoc = require('./doc').doc(Meter); // eslint-disable-line global-require\n}\n\nvar MeterWrapper = MeterDoc || Meter;\nexport { MeterWrapper as Meter };","import _curry2 from './internal/_curry2.js';\n/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`;\n * otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {a} default The default value.\n * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.\n * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value\n * @example\n *\n *      const defaultTo42 = R.defaultTo(42);\n *\n *      defaultTo42(null);  //=> 42\n *      defaultTo42(undefined);  //=> 42\n *      defaultTo42(false);  //=> false\n *      defaultTo42('Ramda');  //=> 'Ramda'\n *      // parseInt('string') results in NaN\n *      defaultTo42(parseInt('string')); //=> 42\n */\n\nvar defaultTo =\n/*#__PURE__*/\n_curry2(function defaultTo(d, v) {\n  return v == null || v !== v ? d : v;\n});\n\nexport default defaultTo;","import _curry2 from './internal/_curry2.js';\n/**\n * Retrieve the value at a given path.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> {a} -> a | Undefined\n * @param {Array} path The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path`.\n * @see R.prop\n * @example\n *\n *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n */\n\nvar path =\n/*#__PURE__*/\n_curry2(function path(paths, obj) {\n  var val = obj;\n  var idx = 0;\n\n  while (idx < paths.length) {\n    if (val == null) {\n      return;\n    }\n\n    val = val[paths[idx]];\n    idx += 1;\n  }\n\n  return val;\n});\n\nexport default path;","import _curry3 from './internal/_curry3.js';\nimport defaultTo from './defaultTo.js';\nimport path from './path.js';\n/**\n * If the given, non-null object has a value at the given path, returns the\n * value at that path. Otherwise returns the provided default value.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig a -> [Idx] -> {a} -> a\n * @param {*} d The default value.\n * @param {Array} p The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path` of the supplied object or the default value.\n * @example\n *\n *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n */\n\nvar pathOr =\n/*#__PURE__*/\n_curry3(function pathOr(d, p, obj) {\n  return defaultTo(d, path(p, obj));\n});\n\nexport default pathOr;","import styled from \"styled-components\";\n\nexport const HoverContainer = styled.div`\n  border-radius: 8px;\n  :hover {\n    background: #0000ff0f;\n  }\n`;\n\nexport const StyledIcon = styled.a`\n  position: fixed;\n  bottom: 8px;\n  right: 0;\n  transform: translate3d(119px, 0, 0);\n  transition: ease 0.7s;\n  :hover {\n    right: 0;\n    transform: translate3d(7px, 0, 0);\n    transition: ease 0.7s;\n  }\n`;\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","import { useChartSentimentsQuery } from \"../../../generated/apollo\";\n\nexport const useChartData = ({\n  activeAsset,\n  currentInterval\n}: {\n  activeAsset: string;\n  currentInterval: string;\n}) => {\n  let newsData = [] as number[];\n  let sentimentData = [] as number[];\n  let { data, loading } = useChartSentimentsQuery({\n    fetchPolicy: \"no-cache\",\n    variables: {\n      currencyId: activeAsset,\n      resolution: currentInterval,\n      page_size: currentInterval === \"D1\" ? \"MN1\" : \"\"\n    }\n  });\n  data &&\n    data.getHistoricNewsSentiments.candles.slice(0, 25).map((item: any) => {\n      return newsData.unshift(item.a);\n    });\n  data &&\n    data.getHistoricSocialSentiments.candles.slice(0, 25).map((item: any) => {\n      return sentimentData.unshift(item.a);\n    });\n\n  const labels = Array.from(Array(newsData.length).keys());\n  const minmax = newsData.concat(sentimentData) as any;\n  const min = Math.abs(Math.min(...minmax));\n  const max = Math.abs(Math.max(...minmax));\n  const offset = (max - min) * 0.2;\n\n  const socialBaseLine = new Array(newsData.length).fill(min + offset);\n  const newsBaseLine = new Array(newsData.length).fill(min + offset * 2);\n\n  sentimentData = sentimentData.map(x => x + min + offset);\n  newsData = newsData.map(x => x + min + offset * 2);\n\n  return {\n    newsData,\n    sentimentData,\n    socialBaseLine,\n    newsBaseLine,\n    minmax,\n    labels,\n    loading\n  };\n};\n","import React, { memo } from \"react\";\nimport { Image, Box } from \"grommet\";\n\ninterface Props {\n  id: string;\n  icon: string;\n  name: string;\n  activeId: string;\n  onClick: (id: string) => void;\n}\n\nconst AssetComponent = ({ id, icon, name, activeId, onClick }: Props) => {\n  return (\n    <Box\n      pad=\"7px\"\n      background={id.toUpperCase() === activeId ? \"#0000ff0f\" : \"none\"}\n      round=\"8px\"\n      fill={false}\n      flex={false}\n      onClick={() => onClick(id)}\n      style={{ cursor: \"pointer\" }}\n    >\n      <Image src={icon} alt={name} width=\"40px\" height=\"40px\" />\n    </Box>\n  );\n};\n\nconst AssetMemo = memo(AssetComponent);\n\nexport const Asset = AssetMemo;\n","import { Box, Text, Heading, Image, ThemeContext } from \"grommet\";\nimport React, { useContext } from \"react\";\nimport Euphoria from \"./../utils/euphoria.svg\";\nimport Normal from \"./../utils/normal.svg\";\nimport Positive from \"./../utils/positive.svg\";\nimport Negative from \"./../utils/negative.svg\";\nimport Depression from \"./../utils/depression.svg\";\n\ninterface Props {\n  asset?: {\n    id: string;\n    name: string;\n    price: number;\n    price_change: number;\n    social_sentiment_value?: number | null;\n  };\n}\n\nconst moodsTypes = [\"Depression\", \"Negative\", \"Normal\", \"Positive\", \"Euphoria\"];\nconst moodColors = [\"#E8354D\", \"#FC7E1E\", \"#FFCE2B\", \"#ACD91A\", \"#4ECC58\"];\nconst moodIcons = [Depression, Negative, Normal, Positive, Euphoria];\n\nexport const SmallHeader = (props: Props) => {\n  const theme: any = useContext(ThemeContext);\n  const asset = props.asset;\n  const socSentiment = (asset && asset.social_sentiment_value) || 0;\n  const mood = Math.round((socSentiment / 20) * 5 + 2.5);\n  const sentiment = moodsTypes[mood];\n\n  return (\n    <Box pad=\"medium\">\n      <Box direction=\"row\">\n        <Text size=\"24px\" weight=\"bold\" color={theme.sentimentNews.secondary}>\n          <Text size=\"24px\" weight=\"bold\" color={theme.sentimentNews.primary}>\n            {asset && asset.id}\n          </Text>{\" \"}\n          {asset && \"social sentiment\"}\n        </Text>\n      </Box>\n      <Box direction=\"row\" align=\"center\">\n        <Heading\n          size=\"49px\"\n          color={moodColors[mood]}\n          margin={{ vertical: \"small\" }}\n        >\n          {asset && sentiment}\n        </Heading>\n\n        <Box width=\"xsmall\" height=\"xsmall\" pad=\"medium\">\n          {asset && <Image fit=\"cover\" src={moodIcons[mood]} />}\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n","import { Box, Text, Heading, ThemeContext } from \"grommet\";\nimport React, { useContext } from \"react\";\n\ninterface Props {\n  asset?: {\n    id: string;\n    name: string;\n    price: number;\n    price_change: number;\n  };\n}\n\nexport const LargeHeader = (props: Props) => {\n  const theme: any = useContext(ThemeContext);\n\n  return (\n    <Box direction=\"row\" justify=\"between\">\n      <Box direction=\"column\">\n        <Heading size=\"28px\" margin=\"none\" color={theme.sentimentNews.primary}>\n          {props.asset && props.asset.id}\n        </Heading>\n        <Text size=\"14px\" color={theme.sentimentNews.secondary}>\n          {props.asset && props.asset.name}\n        </Text>\n      </Box>\n      <Box direction=\"column\">\n        <Box direction=\"row\" align=\"end\">\n          {props.asset && (\n            <Text color=\"#4ECC58\">${props.asset.price.toFixed(4)}</Text>\n          )}\n        </Box>\n        <Box direction=\"row\">\n          {props.asset && (\n            <Text\n              color={\n                props.asset && props.asset.price_change > 0\n                  ? \"#4ECC58\"\n                  : \"#E8354D\"\n              }\n            >\n              {props.asset.price_change.toFixed(2)}%\n            </Text>\n          )}\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n","import { Box, Text, Heading, Image, Meter, ThemeContext } from \"grommet\";\nimport React, { useContext } from \"react\";\nimport { HoverContainer } from \"./../styled\";\nimport Logo from \"./../utils/logo.svg\";\n\ninterface Props {\n  content: string;\n  domain: string;\n  favicon: string;\n  images: string[];\n  source: string;\n  title: string;\n  sentiment: number;\n}\n\nexport const Headlines = (props: Props) => {\n  const theme: any = useContext(ThemeContext);\n\n  return (\n    <a\n      href={props.source}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      style={{ textDecoration: \"none\" }}\n    >\n      <HoverContainer>\n        <Box pad=\"medium\" fill>\n          <Box direction=\"row\" align=\"center\" gap=\"xsmall\">\n            <Image\n              src={props.favicon}\n              fallback={Logo}\n              alt=\"src icon\"\n              style={{ width: \"15px\", height: \"15px\", borderRadius: \"20px\" }}\n            />\n            <Text size=\"11px\" color={theme.sentimentNews.secondary}>\n              {props.domain}\n            </Text>\n          </Box>\n          <Box justify=\"between\" direction=\"row\" gap=\"small\">\n            <Box fill>\n              <Heading\n                margin={{ vertical: \"small\" }}\n                size=\"16px\"\n                color={theme.sentimentNews.primary}\n                truncate\n              >\n                {props.title}\n              </Heading>\n              <Text\n                size=\"12px\"\n                color={theme.sentimentNews.secondary}\n                style={{\n                  lineHeight: \"16px\",\n                  maxHeight: \"48px\",\n                  overflow: \"hidden\"\n                }}\n              >\n                {props.content}\n              </Text>\n            </Box>\n            <Box direction=\"column\" flex=\"grow\">\n              <Box height=\"64px\" width=\"64px\">\n                <Image\n                  fit=\"cover\"\n                  src={props.images[0]}\n                  fallback={Logo}\n                  style={{ borderRadius: \"8px\" }}\n                />\n              </Box>\n              <Meter\n                round\n                size=\"64px\"\n                thickness=\"xsmall\"\n                values={[\n                  {\n                    value: props.sentiment * 100,\n                    label: \"sentiment\",\n                    color: props.sentiment > 0 ? \"green\" : \"red\"\n                  }\n                ]}\n                background={{ color: \"#EEEEEE\" }}\n                margin={{ top: \"xsmall\" }}\n              />\n            </Box>\n          </Box>\n        </Box>\n      </HoverContainer>\n    </a>\n  );\n};\n","import React, {\n  useState,\n  useRef,\n  useCallback,\n  useContext,\n  useMemo\n} from \"react\";\nimport { Box, Text, ThemeContext } from \"grommet\";\nimport { Line } from \"react-chartjs-2\";\nimport * as R from \"ramda\";\n\nimport {\n  useAssetsQuery,\n  AssetsQuery,\n  useHeadlinesQuery,\n  HeadlinesQuery\n} from \"../../generated/apollo\";\nimport { Interval } from \"../../components/interval\";\nimport { CryptomoodSvg } from \"../../components/cryptomood-svg\";\nimport { StyledIcon } from \"./styled\";\nimport { useChartData } from \"./utils/utils\";\nimport { Asset } from \"./components/asset\";\nimport { SmallHeader } from \"./components/small-header\";\nimport { LargeHeader } from \"./components/large-header\";\nimport { Headlines } from \"./components/headlines\";\n\nexport const SentimentNewsComponent = () => {\n  const params = useRef(new URLSearchParams(window.location.search));\n  const theme: any = useContext(ThemeContext);\n  const direction =\n    params.current.get(\"direction\") === \"row\" ? \"row\" : \"column\";\n  const size = params.current.get(\"size\") === \"large\" ? \"large\" : \"mini\";\n  const [currentInterval, setCurrentInterval] = useState(\"H1\");\n  const changeInterval = useCallback((interval: string) => {\n    setCurrentInterval(interval);\n  }, []);\n  const inputIntervalButtons = [\"1 m\", \"15 m\", \"1 H\", \"1 D\"];\n  const activeAssets = params.current.get(\"assets\") || \"BTC,ETH,XRP\";\n  const currencies = activeAssets.toUpperCase().split(\",\");\n  const [activeAsset, setActiveAsset] = useState(currencies[0]);\n\n  const { data } = useAssetsQuery({\n    variables: {\n      assets: currencies\n    }\n  });\n\n  const assets = R.pathOr<AssetsQuery[\"getAssets\"][\"assets\"]>(\n    [],\n    [\"getAssets\", \"assets\"],\n    data\n  );\n\n  const {\n    newsData,\n    sentimentData,\n    socialBaseLine,\n    newsBaseLine,\n    labels,\n    loading\n  } = useChartData({\n    activeAsset,\n    currentInterval\n  });\n\n  const chartData = useMemo(\n    () => ({\n      labels: labels,\n      datasets: [\n        {\n          label: \"newsBaseLine\",\n          data: newsBaseLine,\n          borderColor: \"rgba(252, 186, 3,0.8)\",\n          borderWidth: 1,\n          pointRadius: 0,\n          fill: false,\n          borderDash: [5, 5]\n        },\n        {\n          label: \"socialBaseLine\",\n          data: socialBaseLine,\n          borderColor: \"rgba(0,0,255,0.8)\",\n          borderWidth: 1,\n          pointRadius: 0,\n          fill: false,\n          borderDash: [5, 5]\n        },\n\n        {\n          label: \"Social Sentiment\",\n          data: sentimentData,\n          backgroundColor: \"#cde0fd\",\n          borderColor: \"rgba(0,0,255,0.8)\",\n          pointRadius: 0,\n          lineTension: 0\n          //steppedLine: \"middle\"\n          //fill: false\n        },\n        {\n          label: \"News Sentiment\",\n          data: newsData,\n          backgroundColor: \"#ffe6c2\",\n          borderColor: \"rgba(252, 186, 3,0.8)\",\n          pointRadius: 0,\n          lineTension: 0\n          //steppedLine: \"middle\"\n          //fill: \"false\"\n        }\n      ]\n    }),\n    [labels, newsData, sentimentData, newsBaseLine, socialBaseLine]\n  );\n\n  const { data: headlineData } = useHeadlinesQuery({\n    variables: {\n      asset: activeAsset\n    }\n  });\n\n  const headlines = R.pathOr<HeadlinesQuery[\"getFeedHeadlines\"][\"entries\"]>(\n    [],\n    [\"getFeedHeadlines\", \"entries\"],\n    headlineData\n  ).filter(a => a.__typename === \"Article\");\n\n  return (\n    <Box background={theme.sentimentNews.background} pad=\"none\" height=\"100vh\">\n      <StyledIcon target=\"_\" href={\"https://cryptomood.com\"}>\n        <CryptomoodSvg width={155} height={40} />\n      </StyledIcon>\n      {size === \"mini\" ? (\n        assets && (\n          <SmallHeader asset={assets.find(asset => asset.id === activeAsset)} />\n        )\n      ) : (\n        <Box direction={direction === \"row\" ? \"row\" : \"column\"}>\n          {currencies.length > 1 && (\n            <Box\n              pad=\"8px\"\n              direction={direction === \"row\" ? \"column\" : \"row\"}\n              style={{ minWidth: \"70px\", minHeight: \"70px\" }}\n            >\n              {/*beware of switched direction logic */}\n              {assets.map(a => (\n                <Asset\n                  key={a.id}\n                  id={a.id}\n                  name={a.name}\n                  icon={a.icon}\n                  activeId={activeAsset}\n                  onClick={setActiveAsset}\n                />\n              ))}\n            </Box>\n          )}\n          <Box\n            direction=\"column\"\n            pad=\"xsmall\"\n            fill={direction === \"row\" ? true : false}\n            flex={direction !== \"row\" ? \"grow\" : \"shrink\"}\n          >\n            <Box\n              flex={direction !== \"row\" && \"grow\"}\n              pad={{ horizontal: \"small\", vertical: \"xsmall\" }}\n            >\n              {assets && (\n                <LargeHeader\n                  asset={assets.find(asset => asset.id === activeAsset)}\n                />\n              )}\n            </Box>\n            <Box pad={{ horizontal: \"small\", vertical: \"xsmall\" }}>\n              <Interval\n                currentInterval={currentInterval}\n                inputIntervals={inputIntervalButtons}\n                changeInterval={changeInterval}\n                fontSize={15}\n              />\n            </Box>\n            <Box style={{ position: \"relative\" }}>\n              <Box style={{ position: \"absolute\", left: \"6px\" }}>\n                <Text size=\"small\" color=\"rgb(252, 186, 3)\" weight=\"bold\">\n                  News Sentiment\n                </Text>\n                <Text size=\"small\" color=\"rgb(0,0,255)\" weight=\"bold\">\n                  Social Sentiment\n                </Text>\n              </Box>\n            </Box>\n\n            <Box style={{ opacity: loading ? 0.5 : 1 }} fill>\n              <div\n                style={{\n                  height: direction === \"row\" ? \"calc(100vh - 115px)\" : \"250px\",\n                  position: \"relative\"\n                }}\n              >\n                <Line\n                  data={chartData}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      xAxes: [\n                        {\n                          ticks: {\n                            display: false\n                          },\n                          gridLines: {\n                            display: false,\n                            drawBorder: false,\n                            tickMarkLength: 0\n                          }\n                        }\n                      ],\n                      yAxes: [\n                        {\n                          ticks: {\n                            display: false\n                          },\n                          gridLines: {\n                            color: \"transparent\",\n                            display: false,\n                            //suggestedMin: Math.min(minmax),\n                            //suggestedMax: Math.max(minmax),\n                            drawBorder: false,\n                            tickMarkLength: 0\n                          }\n                        }\n                      ]\n                    },\n                    legend: {\n                      display: false\n                      /*labels: {\n                          filter: function (item: any) {\n                            // Logic to remove a line legend item\n                            return !item.text.includes(\"line\");\n                          }\n                        }*/\n                    }\n                  }}\n                />\n              </div>\n            </Box>\n          </Box>\n          <Box\n            direction=\"column\"\n            pad=\"small\"\n            fill\n            overflow={{ vertical: \"scroll\" }}\n            style={{ minHeight: \"200px\" }}\n          >\n            {headlines.map(a => (\n              <Headlines\n                content={a.base.content}\n                domain={a.base.domain}\n                favicon={a.base.favicon}\n                images={a.base.images}\n                source={a.base.source}\n                title={a.base.title}\n                sentiment={a.sentiment.sentiment}\n                key={a.base.source}\n              />\n            ))}\n          </Box>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default SentimentNewsComponent;\n"],"sourceRoot":""}
{"version":3,"sources":["widgets/popular-currencies/assets/cryptomood.svg","widgets/popular-currencies/styles.ts","widgets/popular-currencies/components/currencyItem.tsx","widgets/popular-currencies/component.tsx"],"names":["module","exports","OrderKey","styled","div","StyledIcon","a","CurrencyItem","curr","order","theme","useContext","ThemeContext","arrowLink","change","LinkUp","color","size","LinkDown","Box","pad","direction","align","flex","alignContent","style","background","popularCurrencies","orderBg","orderColor","Image","src","icon","alt","id","width","height","minWidth","margin","fallback","cryptomood","Text","weight","primary","name","PopularCurrenciesComponent","useState","currentInterval","setCurrentInterval","changeInterval","useCallback","interval","useTopAssetsQuery","variables","time_window","data","loading","overflow","target","href","Heading","textAlign","maxWidth","inputIntervals","fill","justify","top","getAssetsBySentiment","assets","slice","map","key"],"mappings":"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","file":"static/js/17.558a638b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptomood.29a3f832.svg\";","import styled from \"styled-components\";\n\nexport const OrderKey = styled.div`\n  border-radius: 50px;\n  width: 19px;\n  height: 19px;\n  min-height: 19px;\n  min-width: 19px;\n  text-align: center;\n  line-height: 19px;\n\n  font-size: 12px;\n`;\n\nexport const StyledIcon = styled.a`\n  position: fixed;\n  top: 1em;\n  right: 0;\n  transform: translate3d(119px, 0, 0);\n  transition: ease 0.7s;\n  :hover {\n    right: 0;\n    transform: translate3d(7px, 0, 0);\n    transition: ease 0.7s;\n  }\n`;\n","import React, { useContext } from \"react\";\nimport { Box, Text, Image, ThemeContext } from \"grommet\";\nimport { LinkUp, LinkDown } from \"grommet-icons\";\nimport { OrderKey } from \"./../styles\";\nimport cryptomood from \"../assets/cryptomood.svg\";\n\ninterface CurrencyValue {\n  id: string;\n  name: string;\n  icon: string;\n  change: number;\n}\n\nexport const CurrencyItem = ({\n  curr,\n  order\n}: {\n  curr: CurrencyValue;\n  order: number;\n}) => {\n  const theme: any = useContext(ThemeContext);\n  const arrowLink =\n    curr.change > 0 ? (\n      <LinkUp color=\"#4CD964\" size=\"19px\" />\n    ) : (\n      curr.change < 0 && <LinkDown color=\"#FF4E3D\" size=\"19px\" />\n    );\n\n  return (\n    <Box\n      pad=\"small\"\n      direction=\"row\"\n      align=\"center\"\n      flex=\"shrink\"\n      alignContent=\"center\"\n    >\n      <OrderKey\n        style={{\n          background: theme.popularCurrencies.orderBg,\n          color: theme.popularCurrencies.orderColor\n        }}\n      >\n        {order}\n      </OrderKey>\n      <Image\n        src={curr.icon}\n        alt={curr.id}\n        width=\"48px\"\n        height=\"48px\"\n        style={{ minWidth: \"48px\", margin: \"0px 10px\" }}\n        fallback={cryptomood}\n      />\n      <Text size=\"22px\" weight=\"bold\" color={theme.primary}>\n        {curr.name}\n      </Text>\n      <Box direction=\"column\" margin=\"medium\">\n        {arrowLink}\n      </Box>\n    </Box>\n  );\n};\n","import React, { useState, useCallback, useContext } from \"react\";\nimport { Box, Heading, ThemeContext, Text } from \"grommet\";\nimport { useTopAssetsQuery } from \"../../generated/apollo\";\n\nimport { Interval } from \"../../components/interval\";\nimport { CryptomoodSvg } from \"../../components/cryptomood-svg\";\nimport { StyledIcon } from \"./styles\";\nimport { CurrencyItem } from \"./components/currencyItem\";\n\ninterface CurrencyValue {\n  id: string;\n  name: string;\n  icon: string;\n  change: number;\n}\n\nexport const PopularCurrenciesComponent = () => {\n  const theme: any = useContext(ThemeContext);\n\n  //const currencies = [\"btc\", \"eth\", \"xrp\", \"neo\", \"xlm\", \"trx\", \"bsv\", \"ada\", \"zec\", \"ltc\"]\n  const [currentInterval, setCurrentInterval] = useState(\"D1\");\n  const changeInterval = useCallback((interval: string) => {\n    setCurrentInterval(interval);\n  }, []);\n  //const inputIntervalButtons = [\"5 min\", \"15 min\", \"1 h\", \"4 h\", \"1 d\"];\n  const inputIntervalButtons = [\"1 Day\", \"1 Week\", \"2 Weeks\", \"1 Month\"];\n\n  const { data, loading } = useTopAssetsQuery({\n    variables: {\n      time_window: currentInterval\n    }\n  });\n\n  return (\n    <Box overflow=\"hidden\">\n      <Box background={theme.popularCurrencies.background} pad=\"20px\">\n        <StyledIcon target=\"_\" href={\"https://cryptomood.com\"}>\n          <CryptomoodSvg width={155} height={40} />\n        </StyledIcon>\n        <Box direction=\"row\">\n          <Heading\n            size=\"32px\"\n            color={theme.primary}\n            textAlign=\"center\"\n            style={{ width: \"100%\", maxWidth: \"none\" }}\n          >\n            Most popular cryptocurrencies\n          </Heading>\n        </Box>\n        <Box pad=\"small\">\n          <Interval\n            currentInterval={currentInterval}\n            inputIntervals={inputIntervalButtons}\n            changeInterval={changeInterval}\n          />\n        </Box>\n        {loading ? (\n          <Box fill flex justify=\"center\" align=\"center\">\n            <Text>loading...</Text>\n          </Box>\n        ) : (\n          data && (\n            <Box direction=\"row-responsive\" margin={{ top: \"30px\" }}>\n              <Box direction=\"column\" fill>\n                <Box flex=\"shrink\" alignContent=\"center\">\n                  {data &&\n                    data.getAssetsBySentiment.assets\n                      .slice(0, 5)\n                      .map((curr: CurrencyValue, key: number) => (\n                        <CurrencyItem\n                          curr={curr}\n                          order={key + 1}\n                          key={curr.id}\n                        />\n                      ))}\n                </Box>\n              </Box>\n              <Box direction=\"column\" fill>\n                <Box flex=\"shrink\" alignContent=\"center\">\n                  {data &&\n                    data.getAssetsBySentiment.assets\n                      .slice(5, 10)\n                      .map((curr: CurrencyValue, key: number) => (\n                        <CurrencyItem\n                          curr={curr}\n                          order={key + 6}\n                          key={curr.id}\n                        />\n                      ))}\n                </Box>\n              </Box>\n            </Box>\n          )\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default PopularCurrenciesComponent;\n"],"sourceRoot":""}
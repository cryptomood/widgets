{"version":3,"sources":["generated/apollo.ts","components/cryptomood-svg.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/interval.tsx","widgets/emotion-meter/components/meter-svg.tsx","widgets/emotion-meter/components/handle-svg.tsx","widgets/emotion-meter/components/meter.tsx","widgets/emotion-meter/styles.tsx","widgets/emotion-meter/utils/utils.ts","widgets/emotion-meter/emotion-meter.tsx"],"names":["FragmentSentimentFragmentDoc","gql","CryptoSentimentDocument","useCryptoSentimentQuery","baseOptions","ApolloReactHooks","GetDailyOverviewDocument","useGetDailyOverviewQuery","GetAssetDetailsDocument","GetSentimentDocument","TwitterInfluenceDocument","useTwitterInfluenceQuery","TopAssetsDocument","useTopAssetsQuery","ChartSentimentsDocument","useChartSentimentsQuery","AssetsDocument","useAssetsQuery","HeadlinesDocument","useHeadlinesQuery","GetAssetTagsDocument","useGetAssetTagsQuery","GetPublicationsDocument","TweetsOnChartDocument","useTweetsOnChartQuery","CryptomoodSvg","props","theme","useContext","ThemeContext","style","width","height","viewBox","fill","x","y","rx","cryptoMoodLogo","stroke","border","strokeWidth","d","opacity","text","id","x1","y1","x2","y2","gradientUnits","stopColor","offset","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","TypeError","StyledInterval","styled","div","StyledIntervalInput","input","fontSize","active","interval","textActive","backgroundActive","background","Interval","inputIntervals","map","split","intervalNumber","intervalText","key","type","currentInterval","toUpperCase","includes","onClick","changeInterval","MeterSvg","maxWidth","maxHeight","xmlns","strokeLinecap","mask-type","maskUnits","mask","transform","cx","cy","r","gradientTransform","colors","sentimentMeter","gradientFromSentimentText","stopOpacity","HandleSvg","rotate","Math","max","min","sentiment","position","bottom","transition","right","emotionMeter","handle","Meter","display","flex","justifyContent","overflow","minWidth","minHeight","sentimentText","Sentiment","StyledAsset","span","brand","StyledH1","h1","header","Container","StyledWidget","StyledIcon","a","StyledH2","h2","colorFromSentimentText","inputIntervalButtons","EmotionMeterComponent","sentimentValue","useState","setCurrentInterval","asset","useRef","URLSearchParams","window","location","search","current","get","data","useQuery","fetchPolicy","variables","resolution","getSentimentValue","social_sentiment_value","useCallback","Depression","Sad","Normal","Happy","Euphoria","getEmotionMoodText","target","href"],"mappings":"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","file":"static/js/12.402f8a46.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\nimport * as ApolloReactCommon from \"@apollo/react-common\";\nimport * as ApolloReactHooks from \"@apollo/react-hooks\";\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type AddCommentRequest = {\n  commentId?: Maybe<Scalars[\"ID\"]>;\n  postId: Scalars[\"String\"];\n  content: Scalars[\"String\"];\n};\n\nexport type AddCommentResponse = {\n  __typename: \"AddCommentResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  comment?: Maybe<Comment>;\n};\n\nexport type Alarm = {\n  __typename: \"Alarm\";\n  id: Scalars[\"ID\"];\n  enabled: Scalars[\"Boolean\"];\n  parts: Array<AlarmPart>;\n};\n\nexport type AlarmEnableRequest = {\n  alarm_id: Scalars[\"ID\"];\n  enabled: Scalars[\"Boolean\"];\n};\n\nexport type AlarmEnableResponse = {\n  __typename: \"AlarmEnableResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  enabled: Scalars[\"Boolean\"];\n};\n\nexport type AlarmOption = {\n  __typename: \"AlarmOption\";\n  id: Scalars[\"ID\"];\n  code: Scalars[\"String\"];\n  position: Scalars[\"Int\"];\n  has_custom: Scalars[\"Boolean\"];\n  childs: Array<AlarmOption>;\n};\n\nexport type AlarmPart = {\n  __typename: \"AlarmPart\";\n  asset: Scalars[\"String\"];\n  alarm_options: Array<AlarmOption>;\n  custom?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type AlarmPartRequest = {\n  asset: Scalars[\"String\"];\n  alarm_options: Array<Scalars[\"ID\"]>;\n  custom?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type Article = {\n  __typename: \"Article\";\n  base: BaseModel;\n  sentiment: SentimentModel;\n  named_entities: NamedEntitiesModel;\n  comments: Array<Comment>;\n  comment_count: Scalars[\"Int\"];\n  votes: Array<PostVote>;\n  votes_value: Scalars[\"Int\"];\n  my_vote: Scalars[\"Int\"];\n  topicsLength: Scalars[\"Int\"];\n  topics: Array<Article>;\n};\n\nexport type Asset = {\n  __typename: \"Asset\";\n  id: Scalars[\"ID\"];\n  name: Scalars[\"String\"];\n  cap: Scalars[\"Float\"];\n  price: Scalars[\"Float\"];\n  icon: Scalars[\"String\"];\n  social_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  news_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  social_sentiments: Array<Scalars[\"Float\"]>;\n  news_sentiments: Array<Scalars[\"Float\"]>;\n  social_sentiment_volumes: Array<Scalars[\"Int\"]>;\n  news_sentiment_volumes: Array<Scalars[\"Int\"]>;\n  price_change: Scalars[\"Float\"];\n  articlesCount: Scalars[\"Int\"];\n  tweetsCount: Scalars[\"Int\"];\n  redditPostsCount: Scalars[\"Int\"];\n  telegramMessagesCount: Scalars[\"Int\"];\n  bitmexMessagesCount: Scalars[\"Int\"];\n  historyM1: Array<Histocandle>;\n  historyH1: Array<Histocandle>;\n};\n\nexport type AssetDetailsResponse = {\n  __typename: \"AssetDetailsResponse\";\n  id: Scalars[\"ID\"];\n  icon: Scalars[\"String\"];\n  name: Scalars[\"String\"];\n  social_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  news_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  change?: Maybe<SentimentChange>;\n  stats?: Maybe<GetPublicationsStatsResponse>;\n  transactions?: Maybe<GenericCount>;\n};\n\nexport type AssetListResponse = {\n  __typename: \"AssetListResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  assets: Array<LimitedAsset>;\n};\n\nexport type AssetSentiment = {\n  __typename: \"AssetSentiment\";\n  id: Scalars[\"ID\"];\n  name: Scalars[\"String\"];\n  icon: Scalars[\"String\"];\n  change: Scalars[\"Float\"];\n};\n\nexport type AssetsFilter = {\n  assets?: Maybe<Array<Scalars[\"String\"]>>;\n  allAssets?: Maybe<Scalars[\"Boolean\"]>;\n};\n\nexport type AssetsResponse = {\n  __typename: \"AssetsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  assets: Array<Asset>;\n};\n\nexport type BaseGetResponse = {\n  __typename: \"BaseGetResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type BaseModel = {\n  __typename: \"BaseModel\";\n  id: Scalars[\"ID\"];\n  title: Scalars[\"String\"];\n  content: Scalars[\"String\"];\n  crawler: Scalars[\"String\"];\n  pub_date: Scalars[\"Int\"];\n  created: Scalars[\"Int\"];\n  source: Scalars[\"String\"];\n  excerpt: Scalars[\"String\"];\n  videos: Array<Scalars[\"String\"]>;\n  images: Array<Scalars[\"String\"]>;\n  links: Array<Scalars[\"String\"]>;\n  author: Scalars[\"String\"];\n  lang: Scalars[\"String\"];\n  weight: Scalars[\"Float\"];\n  spam: Scalars[\"Float\"];\n  domain: Scalars[\"String\"];\n  favicon: Scalars[\"String\"];\n  editors_pick: Scalars[\"Boolean\"];\n};\n\nexport type CancelUserSubscriptionRequest = {\n  userId: Scalars[\"Int\"];\n  planId: Scalars[\"Int\"];\n};\n\nexport type Candle = {\n  __typename: \"Candle\";\n  id: Scalars[\"ID\"];\n  timestamp: Scalars[\"Int\"];\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  pv: Scalars[\"Int\"];\n  nv: Scalars[\"Int\"];\n  ps: Scalars[\"Float\"];\n  ns: Scalars[\"Float\"];\n  a: Scalars[\"Float\"];\n};\n\nexport type CandleId = {\n  __typename: \"CandleId\";\n  year: Scalars[\"Int\"];\n  month: Scalars[\"Int\"];\n  day: Scalars[\"Int\"];\n  hour: Scalars[\"Int\"];\n  minute: Scalars[\"Int\"];\n};\n\nexport type Category = {\n  __typename: \"Category\";\n  id: Scalars[\"ID\"];\n  text: Scalars[\"String\"];\n  stats?: Maybe<CategoryStats>;\n};\n\nexport type CategoryStats = {\n  __typename: \"CategoryStats\";\n  posts: Scalars[\"Int\"];\n};\n\nexport type ChangePasswordResponse = {\n  __typename: \"ChangePasswordResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  user?: Maybe<User>;\n};\n\nexport type ChangeProfileResponse = {\n  __typename: \"ChangeProfileResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  user?: Maybe<User>;\n};\n\nexport type ChangeSettingsRequest = {\n  savedPosts?: Maybe<Array<Scalars[\"String\"]>>;\n  defaultExchange?: Maybe<Scalars[\"String\"]>;\n  theme?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type ChangeSettingsResponse = {\n  __typename: \"ChangeSettingsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type ChannelLocalization = {\n  __typename: \"ChannelLocalization\";\n  description: Scalars[\"String\"];\n  title: Scalars[\"String\"];\n  force_send_fields: Array<Scalars[\"String\"]>;\n  null_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type ChannelSnippet = {\n  __typename: \"ChannelSnippet\";\n  country: Scalars[\"String\"];\n  custom_url: Scalars[\"String\"];\n  default_language: Scalars[\"String\"];\n  description: Scalars[\"String\"];\n  localized: ChannelLocalization;\n  published_at: Scalars[\"String\"];\n  thumbnails: ThumbnailDetails;\n  title: Scalars[\"String\"];\n  force_send_fields: Array<Scalars[\"String\"]>;\n  null_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type ChannelStatistics = {\n  __typename: \"ChannelStatistics\";\n  comment_count: Scalars[\"Float\"];\n  hidden_subscriber_count: Scalars[\"Boolean\"];\n  subscriber_count: Scalars[\"Float\"];\n  video_count: Scalars[\"Float\"];\n  view_count: Scalars[\"Float\"];\n  force_send_fields: Array<Scalars[\"String\"]>;\n  null_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type Comment = {\n  __typename: \"Comment\";\n  id: Scalars[\"ID\"];\n  user: User;\n  user_id: Scalars[\"ID\"];\n  post: Scalars[\"String\"];\n  votes: Array<CommentVote>;\n  my_vote: Scalars[\"Boolean\"];\n  reply_to?: Maybe<Comment>;\n  reply_to_id?: Maybe<Scalars[\"ID\"]>;\n  content: Scalars[\"String\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type CommentVote = {\n  __typename: \"CommentVote\";\n  id: Scalars[\"ID\"];\n  user_id: Scalars[\"ID\"];\n  comment_id: Scalars[\"ID\"];\n  value: Scalars[\"Int\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type CommentVoteRequest = {\n  commentId: Scalars[\"ID\"];\n};\n\nexport type CommentVoteResponse = {\n  __typename: \"CommentVoteResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  votes: Array<CommentVote>;\n  my_vote: Scalars[\"Boolean\"];\n};\n\nexport type CursorPagination = {\n  cursor: Scalars[\"Int\"];\n};\n\nexport type DailySummaryRequest = {\n  asset: Scalars[\"String\"];\n};\n\nexport type DailySummaryResponse = {\n  __typename: \"DailySummaryResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  id: Scalars[\"ID\"];\n  maxTrans: Scalars[\"Float\"];\n  biggestTrans: Array<Transaction>;\n  transToEx: Scalars[\"Float\"];\n  transFromEx: Scalars[\"Float\"];\n  socialSentimentSma: Array<Scalars[\"Float\"]>;\n  newsSentimentSma: Array<Scalars[\"Float\"]>;\n  promoted: Array<Article>;\n  editorsPick?: Maybe<Article>;\n};\n\nexport type DeleteAlarmRequest = {\n  alarm_id: Scalars[\"ID\"];\n};\n\nexport type EmotionListResponse = {\n  __typename: \"EmotionListResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  emotions: Array<Scalars[\"String\"]>;\n};\n\nexport type Event = {\n  __typename: \"Event\";\n  id: Scalars[\"ID\"];\n  title: Scalars[\"String\"];\n  description: Scalars[\"String\"];\n  start: Scalars[\"Int\"];\n  thumbnail: Scalars[\"String\"];\n  location_name: Scalars[\"String\"];\n  location_link: Scalars[\"String\"];\n  ticket_link: Scalars[\"String\"];\n  ticket_provider: Scalars[\"String\"];\n};\n\nexport type Exchange = {\n  __typename: \"Exchange\";\n  id: Scalars[\"ID\"];\n  name: Scalars[\"String\"];\n  url: Scalars[\"String\"];\n  icon: Scalars[\"String\"];\n};\n\nexport type ExtendedTweet = {\n  __typename: \"ExtendedTweet\";\n  favourite_count: Scalars[\"Int\"];\n  filter_level: Scalars[\"String\"];\n  id_str: Scalars[\"String\"];\n  in_reply_to_screen_name: Scalars[\"String\"];\n  in_reply_to_status_id_str: Scalars[\"String\"];\n  in_reply_to_user_id_str: Scalars[\"String\"];\n  is_quote_status: Scalars[\"String\"];\n  lang: Scalars[\"String\"];\n  possibly_sensitive: Scalars[\"Boolean\"];\n  quote_count: Scalars[\"Int\"];\n  reply_count: Scalars[\"Int\"];\n  retweet_count: Scalars[\"Int\"];\n  user_mentions: Array<Scalars[\"String\"]>;\n  source: Scalars[\"String\"];\n  author_created_at: Scalars[\"String\"];\n  author_default_profile: Scalars[\"Boolean\"];\n  author_default_profile_image: Scalars[\"Boolean\"];\n  author_followers_count: Scalars[\"Int\"];\n  author_friends_count: Scalars[\"Int\"];\n  author_id_str: Scalars[\"String\"];\n  author_lang: Scalars[\"String\"];\n  author_location: Scalars[\"String\"];\n  author_name: Scalars[\"String\"];\n  author_screen_name: Scalars[\"String\"];\n  author_profile_image_url_http: Scalars[\"String\"];\n  author_statuses_count: Scalars[\"Int\"];\n  categories: Array<Scalars[\"String\"]>;\n  truncated: Scalars[\"Boolean\"];\n  full_text: Scalars[\"String\"];\n};\n\nexport type GenericCount = {\n  __typename: \"GenericCount\";\n  count: Scalars[\"Int\"];\n};\n\nexport type GetAlarmOptionsResponse = {\n  __typename: \"GetAlarmOptionsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  options: Array<AlarmOption>;\n};\n\nexport type GetAlarmsResponse = {\n  __typename: \"GetAlarmsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  alarms: Array<Alarm>;\n};\n\nexport type GetArticlesResponse = {\n  __typename: \"GetArticlesResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  articles: Array<Article>;\n};\n\nexport type GetAssetDetailsRequest = {\n  assets: Array<Scalars[\"String\"]>;\n  time_window: Scalars[\"String\"];\n};\n\nexport type GetAssetsBySentimentRequest = {\n  time_window: Scalars[\"String\"];\n};\n\nexport type GetAssetsBySentimentResponse = {\n  __typename: \"GetAssetsBySentimentResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  assets: Array<AssetSentiment>;\n};\n\nexport type GetCategoriesResponse = {\n  __typename: \"GetCategoriesResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  categories: Array<Category>;\n};\n\nexport type GetChatbotQueryResponse = {\n  __typename: \"GetChatbotQueryResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  message: Scalars[\"String\"];\n};\n\nexport type GetChatbotRawQueryRequest = {\n  asset: Scalars[\"String\"];\n  indicators: Array<Scalars[\"String\"]>;\n  resImg?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetChatbotRawQueryResponse = {\n  __typename: \"GetChatbotRawQueryResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  message: Scalars[\"String\"];\n  images: Array<Scalars[\"String\"]>;\n};\n\nexport type GetCommentsResponse = {\n  __typename: \"GetCommentsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  comments: Array<Comment>;\n};\n\nexport type GetEventsRequest = {\n  asset: Scalars[\"String\"];\n};\n\nexport type GetEventsResponse = {\n  __typename: \"GetEventsResponse\";\n  events: Array<Event>;\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetFeedHeadlinesResponse = {\n  __typename: \"GetFeedHeadlinesResponse\";\n  entries: Array<Publication>;\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetGeneratedOverviewResponse = {\n  __typename: \"GetGeneratedOverviewResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  message: Array<Scalars[\"String\"]>;\n  images: Array<Scalars[\"String\"]>;\n};\n\nexport type GetHistoricGithubIndicatorResponse = {\n  __typename: \"GetHistoricGithubIndicatorResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  candles: Array<GithubCandle>;\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetNotificationConfigRequest = {\n  token: Scalars[\"String\"];\n};\n\nexport type GetPublicationsResponse = {\n  __typename: \"GetPublicationsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  publications: Array<Maybe<Publication>>;\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetPublicationsSearchResponse = {\n  __typename: \"GetPublicationsSearchResponse\";\n  entries: Array<Publication>;\n};\n\nexport type GetPublicationsStatsRequest = {\n  asset: Scalars[\"String\"];\n  time_window?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type GetPublicationsStatsResponse = {\n  __typename: \"GetPublicationsStatsResponse\";\n  articles_count: Scalars[\"Int\"];\n  tweets_count: Scalars[\"Int\"];\n  reddit_posts_count: Scalars[\"Int\"];\n  telegram_messages_count: Scalars[\"Int\"];\n  bitmex_messages_count: Scalars[\"Int\"];\n};\n\nexport type GetRedditPostsResponse = {\n  __typename: \"GetRedditPostsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  reddit_posts: Array<RedditPost>;\n};\n\nexport type GetRelatedArticlesResponse = {\n  __typename: \"GetRelatedArticlesResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  related: Array<Article>;\n};\n\nexport type GetSentimentsResponse = {\n  __typename: \"GetSentimentsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  candles: Array<Candle>;\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetSentimentValueRequest = {\n  asset: Scalars[\"String\"];\n  time_window: Scalars[\"String\"];\n};\n\nexport type GetSentimentValueResponse = {\n  __typename: \"GetSentimentValueResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  social_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  news_sentiment_value?: Maybe<Scalars[\"Float\"]>;\n  social_sentiment_sma: Array<Scalars[\"Float\"]>;\n  news_sentiment_sma: Array<Scalars[\"Float\"]>;\n};\n\nexport type GetTagsRequest = {\n  limit: Scalars[\"Int\"];\n  asset: Scalars[\"String\"];\n  time_window: Scalars[\"String\"];\n};\n\nexport type GetTagsResponse = {\n  __typename: \"GetTagsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  tags: Array<TagCount>;\n};\n\nexport type GetTopicsResponse = {\n  __typename: \"GetTopicsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  topics: Array<Topic>;\n};\n\nexport type GetTopTwitterInfluencersRequest = {\n  limit?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetTopTwitterInfluencersResponse = {\n  __typename: \"GetTopTwitterInfluencersResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  users: Array<TwitterUser>;\n};\n\nexport type GetTransactionsResponse = {\n  __typename: \"GetTransactionsResponse\";\n  transactions: Array<Transaction>;\n  count: Scalars[\"Int\"];\n  cursor?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetTweetChartRequest = {\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  time_window?: Maybe<Scalars[\"String\"]>;\n  tweet_limit?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type GetTweetsResponse = {\n  __typename: \"GetTweetsResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  tweets: Array<Tweet>;\n};\n\nexport type GetVideosResponse = {\n  __typename: \"GetVideosResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  videos: Array<Video>;\n};\n\nexport type GithubCandle = {\n  __typename: \"GithubCandle\";\n  id: Scalars[\"ID\"];\n  timestamp: Scalars[\"Int\"];\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  sum: Scalars[\"Int\"];\n};\n\nexport type HeadlinesFeedRequest = {\n  asset?: Maybe<Scalars[\"String\"]>;\n  categories?: Maybe<Array<Scalars[\"String\"]>>;\n  text?: Maybe<Scalars[\"String\"]>;\n  pagination?: Maybe<CursorPagination>;\n};\n\nexport type Histocandle = {\n  __typename: \"Histocandle\";\n  time: Scalars[\"Int\"];\n  close: Scalars[\"Float\"];\n  high: Scalars[\"Float\"];\n  low: Scalars[\"Float\"];\n  open: Scalars[\"Float\"];\n  volume_from: Scalars[\"Float\"];\n  volume_to: Scalars[\"Float\"];\n};\n\nexport type HistoricGithubIndicatorRequest = {\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  event_type: Scalars[\"Int\"];\n  time_window?: Maybe<Scalars[\"String\"]>;\n  pagination?: Maybe<CursorPagination>;\n};\n\nexport type HistoricPublicationsRequest = {\n  asset: Scalars[\"String\"];\n  timeframe?: Maybe<Scalars[\"String\"]>;\n  weight?: Maybe<WeightParameter>;\n  pagination?: Maybe<CursorPagination>;\n  expressionFilter?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type HistoricSentimentsRequest = {\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  emotion?: Maybe<Scalars[\"String\"]>;\n  page_size?: Maybe<Scalars[\"String\"]>;\n  pagination?: Maybe<CursorPagination>;\n};\n\nexport type HistoricTransactionsRequest = {\n  asset: Scalars[\"String\"];\n  time_window?: Maybe<Scalars[\"String\"]>;\n  pagination?: Maybe<CursorPagination>;\n  expressionFilter?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type LimitedAsset = {\n  __typename: \"LimitedAsset\";\n  id: Scalars[\"ID\"];\n  name: Scalars[\"String\"];\n  icon: Scalars[\"String\"];\n};\n\nexport type LoginLog = {\n  __typename: \"LoginLog\";\n  id: Scalars[\"ID\"];\n  user: User;\n  ip: Scalars[\"String\"];\n  location: Scalars[\"String\"];\n};\n\nexport type Membership = {\n  __typename: \"Membership\";\n  id: Scalars[\"ID\"];\n  user_id: Scalars[\"ID\"];\n  plan_id: Scalars[\"ID\"];\n  due: Scalars[\"String\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type Mutation = {\n  __typename: \"Mutation\";\n  signUp: SignUpResponse;\n  signIn: SignInResponse;\n  refreshToken: RefreshTokenResponse;\n  signOut: SignOutResponse;\n  changePassword: ChangePasswordResponse;\n  passwordChangeRequest: BaseGetResponse;\n  changeProfile: ChangeProfileResponse;\n  updateUserWatchlist: UpdateUserWatchlistResponse;\n  updateUserSubscription: UpdateUserSubscriptionResponse;\n  cancelUserSubscription: UpdateUserSubscriptionResponse;\n  changeSettings: ChangeSettingsResponse;\n  postVote: PostVotingResponse;\n  commentUpvote: CommentVoteResponse;\n  commentUnvote: CommentVoteResponse;\n  addComment: AddCommentResponse;\n  setAlarm: SetAlarmResponse;\n  deleteAlarm: BaseGetResponse;\n  setAlarmEnabled: AlarmEnableResponse;\n  setNotificationToken: NotificationToken;\n};\n\nexport type MutationSignUpArgs = {\n  request: SignUpRequest;\n};\n\nexport type MutationSignInArgs = {\n  email: Scalars[\"String\"];\n  password: Scalars[\"String\"];\n};\n\nexport type MutationRefreshTokenArgs = {\n  request: RefreshTokenRequest;\n};\n\nexport type MutationChangePasswordArgs = {\n  password: Scalars[\"String\"];\n};\n\nexport type MutationPasswordChangeRequestArgs = {\n  request: PasswordChangeRequest;\n};\n\nexport type MutationChangeProfileArgs = {\n  bio?: Maybe<Scalars[\"String\"]>;\n  avatar?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type MutationUpdateUserWatchlistArgs = {\n  assets: Array<Scalars[\"String\"]>;\n};\n\nexport type MutationUpdateUserSubscriptionArgs = {\n  request: UpdateUserSubscriptionRequest;\n};\n\nexport type MutationCancelUserSubscriptionArgs = {\n  request: CancelUserSubscriptionRequest;\n};\n\nexport type MutationChangeSettingsArgs = {\n  request: ChangeSettingsRequest;\n};\n\nexport type MutationPostVoteArgs = {\n  request: PostVoteRequest;\n};\n\nexport type MutationCommentUpvoteArgs = {\n  request: CommentVoteRequest;\n};\n\nexport type MutationCommentUnvoteArgs = {\n  request: CommentVoteRequest;\n};\n\nexport type MutationAddCommentArgs = {\n  request: AddCommentRequest;\n};\n\nexport type MutationSetAlarmArgs = {\n  request: SetAlarmRequest;\n};\n\nexport type MutationDeleteAlarmArgs = {\n  request: DeleteAlarmRequest;\n};\n\nexport type MutationSetAlarmEnabledArgs = {\n  request: AlarmEnableRequest;\n};\n\nexport type MutationSetNotificationTokenArgs = {\n  request: SetNotificationTokenRequest;\n};\n\nexport type NamedEntitiesModel = {\n  __typename: \"NamedEntitiesModel\";\n  symbols: Array<Scalars[\"String\"]>;\n  tags: Array<Scalars[\"String\"]>;\n};\n\nexport type NotificationToken = {\n  __typename: \"NotificationToken\";\n  id: Scalars[\"ID\"];\n  token: Scalars[\"String\"];\n  notification_other: Scalars[\"Boolean\"];\n  notification_alarms: Scalars[\"Boolean\"];\n  notification_important: Scalars[\"Boolean\"];\n};\n\nexport type PasswordChangeRequest = {\n  email?: Maybe<Scalars[\"String\"]>;\n  token?: Maybe<Scalars[\"String\"]>;\n  password?: Maybe<Scalars[\"String\"]>;\n  passwordRepeat?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type PostVote = {\n  __typename: \"PostVote\";\n  id: Scalars[\"ID\"];\n  user_id: Scalars[\"ID\"];\n  post: Scalars[\"String\"];\n  value: Scalars[\"Int\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type PostVoteRequest = {\n  postId: Scalars[\"String\"];\n  value: Scalars[\"Int\"];\n};\n\nexport type PostVotingResponse = {\n  __typename: \"PostVotingResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  publication?: Maybe<Publication>;\n};\n\nexport type PriceUpdate = {\n  __typename: \"PriceUpdate\";\n  price: Scalars[\"Float\"];\n};\n\nexport type Publication = Article | Tweet | RedditPost | Video;\n\nexport type PublicationByIdRequest = {\n  id: Scalars[\"String\"];\n};\n\nexport type PublicationsSearchRequest = {\n  assets?: Maybe<Array<Scalars[\"String\"]>>;\n  categories?: Maybe<Array<Scalars[\"String\"]>>;\n  text?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type Query = {\n  __typename: \"Query\";\n  getAssets: AssetsResponse;\n  getAssetList: AssetListResponse;\n  getMyProfile: UserProfileResponse;\n  getTopics: GetTopicsResponse;\n  getEmotions: EmotionListResponse;\n  getHistoricSocialSentiments: GetSentimentsResponse;\n  getHistoricNewsSentiments: GetSentimentsResponse;\n  getHistoricBuzzSentiments: GetSentimentsResponse;\n  getHistoricTransactions: GetTransactionsResponse;\n  getHistoricArticles: GetArticlesResponse;\n  getHistoricTweets: GetTweetsResponse;\n  getHistoricRedditPosts: GetRedditPostsResponse;\n  getHistoricVideos: GetVideosResponse;\n  getHistoricPublications: GetPublicationsResponse;\n  getHistoricGithubIndicator: GetHistoricGithubIndicatorResponse;\n  getFeedHeadlines: GetFeedHeadlinesResponse;\n  getEvents: GetEventsResponse;\n  getUserById: UserProfileResponse;\n  getDailySummary: DailySummaryResponse;\n  getCategories: GetCategoriesResponse;\n  getPublications: GetPublicationsSearchResponse;\n  getPublication: Publication;\n  getSocialChart: SocialChartResponse;\n  getAlarmOptions: GetAlarmOptionsResponse;\n  getAlarms?: Maybe<GetAlarmsResponse>;\n  getComments: GetCommentsResponse;\n  getRelatedArticles: GetRelatedArticlesResponse;\n  getPublicationStats: GetPublicationsStatsResponse;\n  getChatbotQuery: GetChatbotQueryResponse;\n  getChatbotRawQuery: GetChatbotRawQueryResponse;\n  getGeneratedOverview: GetGeneratedOverviewResponse;\n  getTags: GetTagsResponse;\n  getSentimentValue: GetSentimentValueResponse;\n  getTopTwitterInfluencers: GetTopTwitterInfluencersResponse;\n  getAssetsBySentiment: GetAssetsBySentimentResponse;\n  getExchanges: Array<Exchange>;\n  getNotificationTokens: Array<NotificationToken>;\n  getNotificationConfig: NotificationToken;\n  getAssetDetails: Array<AssetDetailsResponse>;\n  getTweetChart: TweetChartResponse;\n};\n\nexport type QueryGetAssetsArgs = {\n  assets?: Maybe<Array<Scalars[\"String\"]>>;\n  limit?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type QueryGetTopicsArgs = {\n  asset: Scalars[\"String\"];\n};\n\nexport type QueryGetHistoricSocialSentimentsArgs = {\n  request: HistoricSentimentsRequest;\n};\n\nexport type QueryGetHistoricNewsSentimentsArgs = {\n  request: HistoricSentimentsRequest;\n};\n\nexport type QueryGetHistoricBuzzSentimentsArgs = {\n  request: HistoricSentimentsRequest;\n};\n\nexport type QueryGetHistoricTransactionsArgs = {\n  request: HistoricTransactionsRequest;\n};\n\nexport type QueryGetHistoricArticlesArgs = {\n  request: HistoricPublicationsRequest;\n};\n\nexport type QueryGetHistoricTweetsArgs = {\n  request: HistoricPublicationsRequest;\n};\n\nexport type QueryGetHistoricRedditPostsArgs = {\n  request: HistoricPublicationsRequest;\n};\n\nexport type QueryGetHistoricVideosArgs = {\n  request: HistoricPublicationsRequest;\n};\n\nexport type QueryGetHistoricPublicationsArgs = {\n  request: HistoricPublicationsRequest;\n};\n\nexport type QueryGetHistoricGithubIndicatorArgs = {\n  request: HistoricGithubIndicatorRequest;\n};\n\nexport type QueryGetFeedHeadlinesArgs = {\n  request: HeadlinesFeedRequest;\n};\n\nexport type QueryGetEventsArgs = {\n  request: GetEventsRequest;\n};\n\nexport type QueryGetUserByIdArgs = {\n  id: Scalars[\"Int\"];\n};\n\nexport type QueryGetDailySummaryArgs = {\n  request: DailySummaryRequest;\n};\n\nexport type QueryGetPublicationsArgs = {\n  request: PublicationsSearchRequest;\n};\n\nexport type QueryGetPublicationArgs = {\n  request: PublicationByIdRequest;\n};\n\nexport type QueryGetSocialChartArgs = {\n  request: SocialChartRequest;\n};\n\nexport type QueryGetCommentsArgs = {\n  request: PublicationByIdRequest;\n};\n\nexport type QueryGetRelatedArticlesArgs = {\n  request: PublicationByIdRequest;\n};\n\nexport type QueryGetPublicationStatsArgs = {\n  request: GetPublicationsStatsRequest;\n};\n\nexport type QueryGetChatbotQueryArgs = {\n  query: Scalars[\"String\"];\n};\n\nexport type QueryGetChatbotRawQueryArgs = {\n  request: GetChatbotRawQueryRequest;\n};\n\nexport type QueryGetGeneratedOverviewArgs = {\n  asset: Scalars[\"String\"];\n};\n\nexport type QueryGetTagsArgs = {\n  request: GetTagsRequest;\n};\n\nexport type QueryGetSentimentValueArgs = {\n  request?: Maybe<GetSentimentValueRequest>;\n};\n\nexport type QueryGetTopTwitterInfluencersArgs = {\n  limit?: Maybe<Scalars[\"Int\"]>;\n  resolution: Scalars[\"String\"];\n};\n\nexport type QueryGetAssetsBySentimentArgs = {\n  request: GetAssetsBySentimentRequest;\n};\n\nexport type QueryGetNotificationConfigArgs = {\n  request: GetNotificationConfigRequest;\n};\n\nexport type QueryGetAssetDetailsArgs = {\n  request: GetAssetDetailsRequest;\n};\n\nexport type QueryGetTweetChartArgs = {\n  request: GetTweetChartRequest;\n};\n\nexport type RedditPost = {\n  __typename: \"RedditPost\";\n  base: BaseModel;\n  sentiment: SentimentModel;\n  named_entities: NamedEntitiesModel;\n  reddit_post_model: RedditPostModel;\n  comments: Array<Comment>;\n  votes: Array<PostVote>;\n  votes_value: Scalars[\"Int\"];\n  my_vote: Scalars[\"Int\"];\n  comment_count: Scalars[\"Int\"];\n};\n\nexport type RedditPostModel = {\n  __typename: \"RedditPostModel\";\n  id: Scalars[\"ID\"];\n  url: Scalars[\"String\"];\n  author: Scalars[\"String\"];\n  self_text: Scalars[\"String\"];\n  name: Scalars[\"String\"];\n  permalink: Scalars[\"String\"];\n  deleted: Scalars[\"Boolean\"];\n  ups: Scalars[\"Int\"];\n  downs: Scalars[\"Int\"];\n  likes: Scalars[\"Boolean\"];\n  num_comments: Scalars[\"Int\"];\n  score: Scalars[\"Int\"];\n  domain: Scalars[\"String\"];\n  subreddit_id: Scalars[\"String\"];\n  hidden: Scalars[\"Boolean\"];\n  locked: Scalars[\"Boolean\"];\n  thumbnail: Scalars[\"String\"];\n  gilded: Scalars[\"Int\"];\n  distinguished: Scalars[\"String\"];\n  stickied: Scalars[\"Boolean\"];\n  is_reddit_media_domain: Scalars[\"Boolean\"];\n  hot_rate: Scalars[\"Float\"];\n  subreddit: Scalars[\"String\"];\n  is_self: Scalars[\"Boolean\"];\n  nsfw: Scalars[\"Boolean\"];\n  is_update: Scalars[\"Boolean\"];\n};\n\nexport type RefreshTokenRequest = {\n  token: Scalars[\"String\"];\n};\n\nexport type RefreshTokenResponse = {\n  __typename: \"RefreshTokenResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  accessToken: Scalars[\"String\"];\n  refreshToken: Scalars[\"String\"];\n};\n\nexport type Role = {\n  __typename: \"Role\";\n  id: Scalars[\"ID\"];\n  label: Scalars[\"String\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type SentimentChange = {\n  __typename: \"SentimentChange\";\n  change: Scalars[\"Float\"];\n};\n\nexport type SentimentModel = {\n  __typename: \"SentimentModel\";\n  sentiment: Scalars[\"Float\"];\n  market_impact: Scalars[\"Float\"];\n};\n\nexport type SetAlarmRequest = {\n  update_id?: Maybe<Scalars[\"ID\"]>;\n  parts: Array<AlarmPartRequest>;\n  enabled: Scalars[\"Boolean\"];\n};\n\nexport type SetAlarmResponse = {\n  __typename: \"SetAlarmResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type SetNotificationTokenRequest = {\n  token: Scalars[\"String\"];\n  notification_other?: Maybe<Scalars[\"Boolean\"]>;\n  notification_alarms?: Maybe<Scalars[\"Boolean\"]>;\n  notification_important?: Maybe<Scalars[\"Boolean\"]>;\n};\n\nexport type Settings = {\n  __typename: \"Settings\";\n  id: Scalars[\"ID\"];\n  saved_posts: Array<Scalars[\"String\"]>;\n  default_exchange: Scalars[\"String\"];\n  theme: Scalars[\"String\"];\n};\n\nexport type SignInResponse = {\n  __typename: \"SignInResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  token: Scalars[\"String\"];\n  refreshToken: Scalars[\"String\"];\n};\n\nexport type SignOutResponse = {\n  __typename: \"SignOutResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type SignUpRequest = {\n  email: Scalars[\"String\"];\n  password: Scalars[\"String\"];\n  referral?: Maybe<Scalars[\"String\"]>;\n  username: Scalars[\"String\"];\n};\n\nexport type SignUpResponse = {\n  __typename: \"SignUpResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  user?: Maybe<User>;\n};\n\nexport type SocialChartData = {\n  __typename: \"SocialChartData\";\n  positive: Scalars[\"Int\"];\n  neutral: Scalars[\"Int\"];\n  negative: Scalars[\"Int\"];\n};\n\nexport type SocialChartRequest = {\n  publicationId: Scalars[\"String\"];\n};\n\nexport type SocialChartResponse = {\n  __typename: \"SocialChartResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  values: Array<SocialChartData>;\n};\n\nexport type Subscription = {\n  __typename: \"Subscription\";\n  assetPrice: PriceUpdate;\n  socialSentimentSubscription: Candle;\n  newsSentimentSubscription: Candle;\n  buzzSentimentSubscription: Candle;\n  article: Article;\n  tweet: Tweet;\n  redditPost: RedditPost;\n  video: Video;\n};\n\nexport type SubscriptionAssetPriceArgs = {\n  asset?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type TagCount = {\n  __typename: \"TagCount\";\n  tag: Scalars[\"String\"];\n  count: Scalars[\"Int\"];\n};\n\nexport type Tags = {\n  __typename: \"Tags\";\n  id: Scalars[\"ID\"];\n  label: Scalars[\"String\"];\n  visible: Scalars[\"Boolean\"];\n  createdAt: Scalars[\"String\"];\n  updatedAt: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n};\n\nexport type Thumbnail = {\n  __typename: \"Thumbnail\";\n  height: Scalars[\"Float\"];\n  url: Scalars[\"String\"];\n  width: Scalars[\"Float\"];\n  force_send_fields: Array<Scalars[\"String\"]>;\n  null_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type ThumbnailDetails = {\n  __typename: \"ThumbnailDetails\";\n  default: Thumbnail;\n  high: Thumbnail;\n  maxres: Thumbnail;\n  medium: Thumbnail;\n  standard: Thumbnail;\n  force_send_fields: Array<Scalars[\"String\"]>;\n  null_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type Topic = {\n  __typename: \"Topic\";\n  id: Scalars[\"ID\"];\n  weight: Scalars[\"Float\"];\n  title: Scalars[\"String\"];\n  source: Scalars[\"String\"];\n  crawler: Scalars[\"String\"];\n  pub_date: Scalars[\"Int\"];\n  symbols: Array<Scalars[\"String\"]>;\n  topics: Array<Scalars[\"String\"]>;\n};\n\nexport type Transaction = {\n  __typename: \"Transaction\";\n  id: Scalars[\"ID\"];\n  hash: Scalars[\"String\"];\n  from_address: Scalars[\"String\"];\n  to_address: Scalars[\"String\"];\n  from_owner: Scalars[\"String\"];\n  to_owner: Scalars[\"String\"];\n  time: Scalars[\"Int\"];\n  comment: Scalars[\"String\"];\n  asset: Scalars[\"String\"];\n  size: Scalars[\"Float\"];\n  USD_size: Scalars[\"Float\"];\n};\n\nexport type Tweet = {\n  __typename: \"Tweet\";\n  base: BaseModel;\n  sentiment: SentimentModel;\n  named_entities: NamedEntitiesModel;\n  extended_tweet: ExtendedTweet;\n  comments: Array<Comment>;\n  votes: Array<PostVote>;\n  votes_value: Scalars[\"Int\"];\n  my_vote: Scalars[\"Int\"];\n  comment_count: Scalars[\"Int\"];\n};\n\nexport type TweetChartResponse = {\n  __typename: \"TweetChartResponse\";\n  candles: Array<Candle>;\n  tweets: Array<Tweet>;\n};\n\nexport type TwitterUser = {\n  __typename: \"TwitterUser\";\n  id_str: Scalars[\"String\"];\n  name: Scalars[\"String\"];\n  screen_name: Scalars[\"String\"];\n  profile_banner_url: Scalars[\"String\"];\n  profile_image_url_https: Scalars[\"String\"];\n  order_change: Scalars[\"Int\"];\n};\n\nexport type UpdateUserSubscriptionRequest = {\n  userId: Scalars[\"Int\"];\n  planId: Scalars[\"Int\"];\n};\n\nexport type UpdateUserSubscriptionResponse = {\n  __typename: \"UpdateUserSubscriptionResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type UpdateUserWatchlistResponse = {\n  __typename: \"UpdateUserWatchlistResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n};\n\nexport type User = {\n  __typename: \"User\";\n  id: Scalars[\"ID\"];\n  email: Scalars[\"String\"];\n  password: Scalars[\"String\"];\n  username: Scalars[\"String\"];\n  role?: Maybe<Role>;\n  bio: Scalars[\"String\"];\n  avatar: Scalars[\"String\"];\n  referral: Scalars[\"String\"];\n  created_at: Scalars[\"String\"];\n  updated_at: Scalars[\"String\"];\n  deletedAt: Scalars[\"String\"];\n  watchlist: Array<Scalars[\"String\"]>;\n  memberships?: Maybe<Array<Membership>>;\n  settings: Settings;\n  notification_tokens: Array<Scalars[\"String\"]>;\n};\n\nexport type UserProfileResponse = {\n  __typename: \"UserProfileResponse\";\n  ok: Scalars[\"Boolean\"];\n  error: Scalars[\"String\"];\n  user?: Maybe<User>;\n};\n\nexport type Video = {\n  __typename: \"Video\";\n  base: BaseModel;\n  sentiment: SentimentModel;\n  named_entities: NamedEntitiesModel;\n  channel_snippet: ChannelSnippet;\n  channel_statistics: ChannelStatistics;\n  video_statistics: VideoStatistics;\n  comments: Array<Comment>;\n  votes: Array<PostVote>;\n  votes_value: Scalars[\"Int\"];\n  my_vote: Scalars[\"Int\"];\n  comment_count: Scalars[\"Int\"];\n};\n\nexport type VideoStatistics = {\n  __typename: \"VideoStatistics\";\n  comment_count: Scalars[\"Float\"];\n  dislike_count: Scalars[\"Float\"];\n  favorite_count: Scalars[\"Float\"];\n  like_count: Scalars[\"Float\"];\n  view_count: Scalars[\"Float\"];\n  force_send_fields: Array<Scalars[\"String\"]>;\n};\n\nexport type WeightParameter = {\n  gte: Scalars[\"Float\"];\n  lte: Scalars[\"Float\"];\n};\n\nexport type CryptoSentimentQueryVariables = {\n  assets: Array<Scalars[\"String\"]>;\n  time_window: Scalars[\"String\"];\n};\n\nexport type CryptoSentimentQuery = { __typename: \"Query\" } & {\n  getAssetDetails: Array<\n    { __typename: \"AssetDetailsResponse\" } & Pick<\n      AssetDetailsResponse,\n      \"id\" | \"name\" | \"icon\" | \"social_sentiment_value\" | \"news_sentiment_value\"\n    >\n  >;\n};\n\nexport type GetDailyOverviewQueryVariables = {\n  asset: Scalars[\"String\"];\n};\n\nexport type GetDailyOverviewQuery = { __typename: \"Query\" } & {\n  getAssets: { __typename: \"AssetsResponse\" } & {\n    assets: Array<\n      { __typename: \"Asset\" } & Pick<\n        Asset,\n        \"id\" | \"news_sentiment_value\" | \"social_sentiment_value\"\n      >\n    >;\n  };\n  getGeneratedOverview: { __typename: \"GetGeneratedOverviewResponse\" } & Pick<\n    GetGeneratedOverviewResponse,\n    \"ok\" | \"error\" | \"message\" | \"images\"\n  >;\n};\n\nexport type GetAssetDetailsQueryVariables = {\n  assets: Array<Scalars[\"String\"]>;\n  timeWindow: Scalars[\"String\"];\n};\n\nexport type GetAssetDetailsQuery = { __typename: \"Query\" } & {\n  getAssetDetails: Array<\n    { __typename: \"AssetDetailsResponse\" } & Pick<\n      AssetDetailsResponse,\n      \"id\" | \"name\" | \"social_sentiment_value\" | \"news_sentiment_value\"\n    > & {\n        stats: Maybe<\n          { __typename: \"GetPublicationsStatsResponse\" } & Pick<\n            GetPublicationsStatsResponse,\n            | \"articles_count\"\n            | \"tweets_count\"\n            | \"reddit_posts_count\"\n            | \"telegram_messages_count\"\n            | \"bitmex_messages_count\"\n          >\n        >;\n        transactions: Maybe<\n          { __typename: \"GenericCount\" } & Pick<GenericCount, \"count\">\n        >;\n      }\n  >;\n};\n\nexport type GetSentimentQueryVariables = {\n  asset: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n};\n\nexport type GetSentimentQuery = { __typename: \"Query\" } & {\n  getSentimentValue: { __typename: \"GetSentimentValueResponse\" } & Pick<\n    GetSentimentValueResponse,\n    \"ok\" | \"error\" | \"social_sentiment_value\" | \"news_sentiment_value\"\n  >;\n};\n\nexport type TwitterInfluenceQueryVariables = {\n  limit?: Maybe<Scalars[\"Int\"]>;\n  resolution: Scalars[\"String\"];\n};\n\nexport type TwitterInfluenceQuery = { __typename: \"Query\" } & {\n  getTopTwitterInfluencers: {\n    __typename: \"GetTopTwitterInfluencersResponse\";\n  } & Pick<GetTopTwitterInfluencersResponse, \"ok\" | \"error\"> & {\n      users: Array<\n        { __typename: \"TwitterUser\" } & Pick<\n          TwitterUser,\n          \"name\" | \"screen_name\" | \"profile_image_url_https\" | \"order_change\"\n        >\n      >;\n    };\n};\n\nexport type TopAssetsQueryVariables = {\n  time_window: Scalars[\"String\"];\n};\n\nexport type TopAssetsQuery = { __typename: \"Query\" } & {\n  getAssetsBySentiment: { __typename: \"GetAssetsBySentimentResponse\" } & Pick<\n    GetAssetsBySentimentResponse,\n    \"ok\" | \"error\"\n  > & {\n      assets: Array<\n        { __typename: \"AssetSentiment\" } & Pick<\n          AssetSentiment,\n          \"id\" | \"icon\" | \"change\" | \"name\"\n        >\n      >;\n    };\n};\n\nexport type FragmentSentimentFragment = { __typename: \"Candle\" } & Pick<\n  Candle,\n  \"id\" | \"asset\" | \"resolution\" | \"a\" | \"pv\" | \"nv\"\n>;\n\nexport type ChartSentimentsQueryVariables = {\n  currencyId: Scalars[\"String\"];\n  resolution: Scalars[\"String\"];\n  page_size?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type ChartSentimentsQuery = { __typename: \"Query\" } & {\n  getHistoricNewsSentiments: { __typename: \"GetSentimentsResponse\" } & {\n    candles: Array<{ __typename: \"Candle\" } & FragmentSentimentFragment>;\n  };\n  getHistoricSocialSentiments: { __typename: \"GetSentimentsResponse\" } & {\n    candles: Array<{ __typename: \"Candle\" } & FragmentSentimentFragment>;\n  };\n};\n\nexport type AssetsQueryVariables = {\n  assets?: Maybe<Array<Scalars[\"String\"]>>;\n};\n\nexport type AssetsQuery = { __typename: \"Query\" } & {\n  getAssets: { __typename: \"AssetsResponse\" } & Pick<\n    AssetsResponse,\n    \"ok\" | \"error\"\n  > & {\n      assets: Array<\n        { __typename: \"Asset\" } & Pick<\n          Asset,\n          | \"id\"\n          | \"name\"\n          | \"price\"\n          | \"icon\"\n          | \"social_sentiment_value\"\n          | \"price_change\"\n        >\n      >;\n    };\n};\n\nexport type HeadlinesQueryVariables = {\n  asset: Scalars[\"String\"];\n};\n\nexport type HeadlinesQuery = { __typename: \"Query\" } & {\n  getFeedHeadlines: { __typename: \"GetFeedHeadlinesResponse\" } & {\n    entries: Array<\n      | ({ __typename: \"Article\" } & {\n          sentiment: { __typename: \"SentimentModel\" } & Pick<\n            SentimentModel,\n            \"sentiment\"\n          >;\n          base: { __typename: \"BaseModel\" } & Pick<\n            BaseModel,\n            \"title\" | \"content\" | \"domain\" | \"images\" | \"favicon\" | \"source\"\n          >;\n        })\n      | ({ __typename: \"Tweet\" } & {\n          sentiment: { __typename: \"SentimentModel\" } & Pick<\n            SentimentModel,\n            \"sentiment\"\n          >;\n          base: { __typename: \"BaseModel\" } & Pick<\n            BaseModel,\n            \"title\" | \"content\" | \"domain\" | \"images\" | \"favicon\" | \"source\"\n          >;\n        })\n      | ({ __typename: \"RedditPost\" } & {\n          sentiment: { __typename: \"SentimentModel\" } & Pick<\n            SentimentModel,\n            \"sentiment\"\n          >;\n          base: { __typename: \"BaseModel\" } & Pick<\n            BaseModel,\n            \"title\" | \"content\" | \"domain\" | \"images\" | \"favicon\" | \"source\"\n          >;\n        })\n      | ({ __typename: \"Video\" } & {\n          sentiment: { __typename: \"SentimentModel\" } & Pick<\n            SentimentModel,\n            \"sentiment\"\n          >;\n          base: { __typename: \"BaseModel\" } & Pick<\n            BaseModel,\n            \"title\" | \"content\" | \"domain\" | \"images\" | \"favicon\" | \"source\"\n          >;\n        })\n    >;\n  };\n};\n\nexport type GetAssetTagsQueryVariables = {\n  asset: Scalars[\"String\"];\n  timeFrame: Scalars[\"String\"];\n};\n\nexport type GetAssetTagsQuery = { __typename: \"Query\" } & {\n  getTags: { __typename: \"GetTagsResponse\" } & Pick<\n    GetTagsResponse,\n    \"ok\" | \"error\"\n  > & {\n      tags: Array<{ __typename: \"TagCount\" } & Pick<TagCount, \"tag\" | \"count\">>;\n    };\n};\n\nexport type GetPublicationsQueryVariables = {\n  asset?: Maybe<Array<Scalars[\"String\"]>>;\n};\n\nexport type GetPublicationsQuery = { __typename: \"Query\" } & {\n  getPublications: { __typename: \"GetPublicationsSearchResponse\" } & {\n    entries: Array<\n      | ({ __typename: \"Article\" } & {\n          sentiment: { __typename: \"SentimentModel\" } & Pick<\n            SentimentModel,\n            \"sentiment\"\n          >;\n          base: { __typename: \"BaseModel\" } & Pick<\n            BaseModel,\n            | \"id\"\n            | \"title\"\n            | \"content\"\n            | \"pub_date\"\n            | \"source\"\n            | \"excerpt\"\n            | \"favicon\"\n          >;\n        })\n      | { __typename: \"Tweet\" }\n      | { __typename: \"RedditPost\" }\n      | { __typename: \"Video\" }\n    >;\n  };\n};\n\nexport type TweetsOnChartQueryVariables = {\n  asset: Scalars[\"String\"];\n  limit: Scalars[\"Int\"];\n};\n\nexport type TweetsOnChartQuery = { __typename: \"Query\" } & {\n  getTweetChart: { __typename: \"TweetChartResponse\" } & {\n    candles: Array<\n      { __typename: \"Candle\" } & Pick<Candle, \"a\" | \"timestamp\" | \"pv\" | \"nv\">\n    >;\n    tweets: Array<\n      { __typename: \"Tweet\" } & {\n        base: { __typename: \"BaseModel\" } & Pick<\n          BaseModel,\n          \"id\" | \"source\" | \"content\" | \"author\" | \"pub_date\"\n        >;\n        extended_tweet: { __typename: \"ExtendedTweet\" } & Pick<\n          ExtendedTweet,\n          \"id_str\" | \"author_profile_image_url_http\"\n        >;\n      }\n    >;\n  };\n  getAssets: { __typename: \"AssetsResponse\" } & {\n    assets: Array<\n      { __typename: \"Asset\" } & Pick<\n        Asset,\n        \"id\" | \"name\" | \"price\" | \"price_change\"\n      > & {\n          historyM1: Array<\n            { __typename: \"Histocandle\" } & Pick<Histocandle, \"close\" | \"time\">\n          >;\n        }\n    >;\n  };\n};\n\nexport const FragmentSentimentFragmentDoc = gql`\n  fragment FragmentSentiment on Candle {\n    id\n    asset\n    resolution\n    a\n    pv\n    nv\n  }\n`;\nexport const CryptoSentimentDocument = gql`\n  query CryptoSentiment($assets: [String!]!, $time_window: String!) {\n    getAssetDetails(request: { assets: $assets, time_window: $time_window }) {\n      id\n      name\n      icon\n      social_sentiment_value\n      news_sentiment_value\n    }\n  }\n`;\n\n/**\n * __useCryptoSentimentQuery__\n *\n * To run a query within a React component, call `useCryptoSentimentQuery` and pass it any options that fit your needs.\n * When your component renders, `useCryptoSentimentQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCryptoSentimentQuery({\n *   variables: {\n *      assets: // value for 'assets'\n *      time_window: // value for 'time_window'\n *   },\n * });\n */\nexport function useCryptoSentimentQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    CryptoSentimentQuery,\n    CryptoSentimentQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    CryptoSentimentQuery,\n    CryptoSentimentQueryVariables\n  >(CryptoSentimentDocument, baseOptions);\n}\nexport function useCryptoSentimentLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    CryptoSentimentQuery,\n    CryptoSentimentQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    CryptoSentimentQuery,\n    CryptoSentimentQueryVariables\n  >(CryptoSentimentDocument, baseOptions);\n}\nexport type CryptoSentimentQueryHookResult = ReturnType<\n  typeof useCryptoSentimentQuery\n>;\nexport type CryptoSentimentLazyQueryHookResult = ReturnType<\n  typeof useCryptoSentimentLazyQuery\n>;\nexport type CryptoSentimentQueryResult = ApolloReactCommon.QueryResult<\n  CryptoSentimentQuery,\n  CryptoSentimentQueryVariables\n>;\nexport const GetDailyOverviewDocument = gql`\n  query GetDailyOverview($asset: String!) {\n    getAssets(assets: [$asset]) {\n      assets {\n        id\n        news_sentiment_value\n        social_sentiment_value\n      }\n    }\n    getGeneratedOverview(asset: $asset) {\n      ok\n      error\n      message\n      images\n    }\n  }\n`;\n\n/**\n * __useGetDailyOverviewQuery__\n *\n * To run a query within a React component, call `useGetDailyOverviewQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetDailyOverviewQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetDailyOverviewQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *   },\n * });\n */\nexport function useGetDailyOverviewQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    GetDailyOverviewQuery,\n    GetDailyOverviewQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    GetDailyOverviewQuery,\n    GetDailyOverviewQueryVariables\n  >(GetDailyOverviewDocument, baseOptions);\n}\nexport function useGetDailyOverviewLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    GetDailyOverviewQuery,\n    GetDailyOverviewQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    GetDailyOverviewQuery,\n    GetDailyOverviewQueryVariables\n  >(GetDailyOverviewDocument, baseOptions);\n}\nexport type GetDailyOverviewQueryHookResult = ReturnType<\n  typeof useGetDailyOverviewQuery\n>;\nexport type GetDailyOverviewLazyQueryHookResult = ReturnType<\n  typeof useGetDailyOverviewLazyQuery\n>;\nexport type GetDailyOverviewQueryResult = ApolloReactCommon.QueryResult<\n  GetDailyOverviewQuery,\n  GetDailyOverviewQueryVariables\n>;\nexport const GetAssetDetailsDocument = gql`\n  query GetAssetDetails($assets: [String!]!, $timeWindow: String!) {\n    getAssetDetails(request: { assets: $assets, time_window: $timeWindow }) {\n      id\n      name\n      social_sentiment_value\n      news_sentiment_value\n      stats {\n        articles_count\n        tweets_count\n        reddit_posts_count\n        telegram_messages_count\n        bitmex_messages_count\n      }\n      transactions {\n        count\n      }\n    }\n  }\n`;\n\n/**\n * __useGetAssetDetailsQuery__\n *\n * To run a query within a React component, call `useGetAssetDetailsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAssetDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAssetDetailsQuery({\n *   variables: {\n *      assets: // value for 'assets'\n *      timeWindow: // value for 'timeWindow'\n *   },\n * });\n */\nexport function useGetAssetDetailsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    GetAssetDetailsQuery,\n    GetAssetDetailsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    GetAssetDetailsQuery,\n    GetAssetDetailsQueryVariables\n  >(GetAssetDetailsDocument, baseOptions);\n}\nexport function useGetAssetDetailsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    GetAssetDetailsQuery,\n    GetAssetDetailsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    GetAssetDetailsQuery,\n    GetAssetDetailsQueryVariables\n  >(GetAssetDetailsDocument, baseOptions);\n}\nexport type GetAssetDetailsQueryHookResult = ReturnType<\n  typeof useGetAssetDetailsQuery\n>;\nexport type GetAssetDetailsLazyQueryHookResult = ReturnType<\n  typeof useGetAssetDetailsLazyQuery\n>;\nexport type GetAssetDetailsQueryResult = ApolloReactCommon.QueryResult<\n  GetAssetDetailsQuery,\n  GetAssetDetailsQueryVariables\n>;\nexport const GetSentimentDocument = gql`\n  query GetSentiment($asset: String!, $resolution: String!) {\n    getSentimentValue(request: { asset: $asset, time_window: $resolution }) {\n      ok\n      error\n      social_sentiment_value\n      news_sentiment_value\n    }\n  }\n`;\n\n/**\n * __useGetSentimentQuery__\n *\n * To run a query within a React component, call `useGetSentimentQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSentimentQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSentimentQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *      resolution: // value for 'resolution'\n *   },\n * });\n */\nexport function useGetSentimentQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    GetSentimentQuery,\n    GetSentimentQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    GetSentimentQuery,\n    GetSentimentQueryVariables\n  >(GetSentimentDocument, baseOptions);\n}\nexport function useGetSentimentLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    GetSentimentQuery,\n    GetSentimentQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    GetSentimentQuery,\n    GetSentimentQueryVariables\n  >(GetSentimentDocument, baseOptions);\n}\nexport type GetSentimentQueryHookResult = ReturnType<\n  typeof useGetSentimentQuery\n>;\nexport type GetSentimentLazyQueryHookResult = ReturnType<\n  typeof useGetSentimentLazyQuery\n>;\nexport type GetSentimentQueryResult = ApolloReactCommon.QueryResult<\n  GetSentimentQuery,\n  GetSentimentQueryVariables\n>;\nexport const TwitterInfluenceDocument = gql`\n  query twitterInfluence($limit: Int, $resolution: String!) {\n    getTopTwitterInfluencers(limit: $limit, resolution: $resolution) {\n      ok\n      error\n      users {\n        name\n        screen_name\n        profile_image_url_https\n        order_change\n      }\n    }\n  }\n`;\n\n/**\n * __useTwitterInfluenceQuery__\n *\n * To run a query within a React component, call `useTwitterInfluenceQuery` and pass it any options that fit your needs.\n * When your component renders, `useTwitterInfluenceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTwitterInfluenceQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      resolution: // value for 'resolution'\n *   },\n * });\n */\nexport function useTwitterInfluenceQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    TwitterInfluenceQuery,\n    TwitterInfluenceQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    TwitterInfluenceQuery,\n    TwitterInfluenceQueryVariables\n  >(TwitterInfluenceDocument, baseOptions);\n}\nexport function useTwitterInfluenceLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    TwitterInfluenceQuery,\n    TwitterInfluenceQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    TwitterInfluenceQuery,\n    TwitterInfluenceQueryVariables\n  >(TwitterInfluenceDocument, baseOptions);\n}\nexport type TwitterInfluenceQueryHookResult = ReturnType<\n  typeof useTwitterInfluenceQuery\n>;\nexport type TwitterInfluenceLazyQueryHookResult = ReturnType<\n  typeof useTwitterInfluenceLazyQuery\n>;\nexport type TwitterInfluenceQueryResult = ApolloReactCommon.QueryResult<\n  TwitterInfluenceQuery,\n  TwitterInfluenceQueryVariables\n>;\nexport const TopAssetsDocument = gql`\n  query TopAssets($time_window: String!) {\n    getAssetsBySentiment(request: { time_window: $time_window }) {\n      ok\n      error\n      assets {\n        id\n        icon\n        change\n        name\n      }\n    }\n  }\n`;\n\n/**\n * __useTopAssetsQuery__\n *\n * To run a query within a React component, call `useTopAssetsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTopAssetsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTopAssetsQuery({\n *   variables: {\n *      time_window: // value for 'time_window'\n *   },\n * });\n */\nexport function useTopAssetsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    TopAssetsQuery,\n    TopAssetsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<TopAssetsQuery, TopAssetsQueryVariables>(\n    TopAssetsDocument,\n    baseOptions\n  );\n}\nexport function useTopAssetsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    TopAssetsQuery,\n    TopAssetsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<TopAssetsQuery, TopAssetsQueryVariables>(\n    TopAssetsDocument,\n    baseOptions\n  );\n}\nexport type TopAssetsQueryHookResult = ReturnType<typeof useTopAssetsQuery>;\nexport type TopAssetsLazyQueryHookResult = ReturnType<\n  typeof useTopAssetsLazyQuery\n>;\nexport type TopAssetsQueryResult = ApolloReactCommon.QueryResult<\n  TopAssetsQuery,\n  TopAssetsQueryVariables\n>;\nexport const ChartSentimentsDocument = gql`\n  query ChartSentiments(\n    $currencyId: String!\n    $resolution: String!\n    $page_size: String\n  ) {\n    getHistoricNewsSentiments(\n      request: {\n        asset: $currencyId\n        resolution: $resolution\n        page_size: $page_size\n      }\n    ) {\n      candles {\n        ...FragmentSentiment\n      }\n    }\n    getHistoricSocialSentiments(\n      request: {\n        asset: $currencyId\n        resolution: $resolution\n        page_size: $page_size\n      }\n    ) {\n      candles {\n        ...FragmentSentiment\n      }\n    }\n  }\n  ${FragmentSentimentFragmentDoc}\n`;\n\n/**\n * __useChartSentimentsQuery__\n *\n * To run a query within a React component, call `useChartSentimentsQuery` and pass it any options that fit your needs.\n * When your component renders, `useChartSentimentsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useChartSentimentsQuery({\n *   variables: {\n *      currencyId: // value for 'currencyId'\n *      resolution: // value for 'resolution'\n *      page_size: // value for 'page_size'\n *   },\n * });\n */\nexport function useChartSentimentsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    ChartSentimentsQuery,\n    ChartSentimentsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    ChartSentimentsQuery,\n    ChartSentimentsQueryVariables\n  >(ChartSentimentsDocument, baseOptions);\n}\nexport function useChartSentimentsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    ChartSentimentsQuery,\n    ChartSentimentsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    ChartSentimentsQuery,\n    ChartSentimentsQueryVariables\n  >(ChartSentimentsDocument, baseOptions);\n}\nexport type ChartSentimentsQueryHookResult = ReturnType<\n  typeof useChartSentimentsQuery\n>;\nexport type ChartSentimentsLazyQueryHookResult = ReturnType<\n  typeof useChartSentimentsLazyQuery\n>;\nexport type ChartSentimentsQueryResult = ApolloReactCommon.QueryResult<\n  ChartSentimentsQuery,\n  ChartSentimentsQueryVariables\n>;\nexport const AssetsDocument = gql`\n  query Assets($assets: [String!]) {\n    getAssets(assets: $assets) {\n      ok\n      error\n      assets {\n        id\n        name\n        price\n        icon\n        social_sentiment_value\n        price_change\n      }\n    }\n  }\n`;\n\n/**\n * __useAssetsQuery__\n *\n * To run a query within a React component, call `useAssetsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAssetsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAssetsQuery({\n *   variables: {\n *      assets: // value for 'assets'\n *   },\n * });\n */\nexport function useAssetsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    AssetsQuery,\n    AssetsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<AssetsQuery, AssetsQueryVariables>(\n    AssetsDocument,\n    baseOptions\n  );\n}\nexport function useAssetsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    AssetsQuery,\n    AssetsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<AssetsQuery, AssetsQueryVariables>(\n    AssetsDocument,\n    baseOptions\n  );\n}\nexport type AssetsQueryHookResult = ReturnType<typeof useAssetsQuery>;\nexport type AssetsLazyQueryHookResult = ReturnType<typeof useAssetsLazyQuery>;\nexport type AssetsQueryResult = ApolloReactCommon.QueryResult<\n  AssetsQuery,\n  AssetsQueryVariables\n>;\nexport const HeadlinesDocument = gql`\n  query Headlines($asset: String!) {\n    getFeedHeadlines(request: { asset: $asset }) {\n      entries {\n        ... on Article {\n          sentiment {\n            sentiment\n          }\n          base {\n            title\n            content\n            domain\n            images\n            favicon\n            source\n          }\n        }\n        ... on Tweet {\n          sentiment {\n            sentiment\n          }\n          base {\n            title\n            content\n            domain\n            images\n            favicon\n            source\n          }\n        }\n        ... on RedditPost {\n          sentiment {\n            sentiment\n          }\n          base {\n            title\n            content\n            domain\n            images\n            favicon\n            source\n          }\n        }\n        ... on Video {\n          sentiment {\n            sentiment\n          }\n          base {\n            title\n            content\n            domain\n            images\n            favicon\n            source\n          }\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useHeadlinesQuery__\n *\n * To run a query within a React component, call `useHeadlinesQuery` and pass it any options that fit your needs.\n * When your component renders, `useHeadlinesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHeadlinesQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *   },\n * });\n */\nexport function useHeadlinesQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    HeadlinesQuery,\n    HeadlinesQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<HeadlinesQuery, HeadlinesQueryVariables>(\n    HeadlinesDocument,\n    baseOptions\n  );\n}\nexport function useHeadlinesLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    HeadlinesQuery,\n    HeadlinesQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<HeadlinesQuery, HeadlinesQueryVariables>(\n    HeadlinesDocument,\n    baseOptions\n  );\n}\nexport type HeadlinesQueryHookResult = ReturnType<typeof useHeadlinesQuery>;\nexport type HeadlinesLazyQueryHookResult = ReturnType<\n  typeof useHeadlinesLazyQuery\n>;\nexport type HeadlinesQueryResult = ApolloReactCommon.QueryResult<\n  HeadlinesQuery,\n  HeadlinesQueryVariables\n>;\nexport const GetAssetTagsDocument = gql`\n  query GetAssetTags($asset: String!, $timeFrame: String!) {\n    getTags(request: { limit: 20, asset: $asset, time_window: $timeFrame }) {\n      ok\n      error\n      tags {\n        tag\n        count\n      }\n    }\n  }\n`;\n\n/**\n * __useGetAssetTagsQuery__\n *\n * To run a query within a React component, call `useGetAssetTagsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAssetTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAssetTagsQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *      timeFrame: // value for 'timeFrame'\n *   },\n * });\n */\nexport function useGetAssetTagsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    GetAssetTagsQuery,\n    GetAssetTagsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    GetAssetTagsQuery,\n    GetAssetTagsQueryVariables\n  >(GetAssetTagsDocument, baseOptions);\n}\nexport function useGetAssetTagsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    GetAssetTagsQuery,\n    GetAssetTagsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    GetAssetTagsQuery,\n    GetAssetTagsQueryVariables\n  >(GetAssetTagsDocument, baseOptions);\n}\nexport type GetAssetTagsQueryHookResult = ReturnType<\n  typeof useGetAssetTagsQuery\n>;\nexport type GetAssetTagsLazyQueryHookResult = ReturnType<\n  typeof useGetAssetTagsLazyQuery\n>;\nexport type GetAssetTagsQueryResult = ApolloReactCommon.QueryResult<\n  GetAssetTagsQuery,\n  GetAssetTagsQueryVariables\n>;\nexport const GetPublicationsDocument = gql`\n  query GetPublications($asset: [String!]) {\n    getPublications(request: { assets: $asset }) {\n      entries {\n        ... on Article {\n          sentiment {\n            sentiment\n          }\n          base {\n            id\n            title\n            content\n            pub_date\n            source\n            excerpt\n            favicon\n          }\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useGetPublicationsQuery__\n *\n * To run a query within a React component, call `useGetPublicationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPublicationsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPublicationsQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *   },\n * });\n */\nexport function useGetPublicationsQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    GetPublicationsQuery,\n    GetPublicationsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    GetPublicationsQuery,\n    GetPublicationsQueryVariables\n  >(GetPublicationsDocument, baseOptions);\n}\nexport function useGetPublicationsLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    GetPublicationsQuery,\n    GetPublicationsQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    GetPublicationsQuery,\n    GetPublicationsQueryVariables\n  >(GetPublicationsDocument, baseOptions);\n}\nexport type GetPublicationsQueryHookResult = ReturnType<\n  typeof useGetPublicationsQuery\n>;\nexport type GetPublicationsLazyQueryHookResult = ReturnType<\n  typeof useGetPublicationsLazyQuery\n>;\nexport type GetPublicationsQueryResult = ApolloReactCommon.QueryResult<\n  GetPublicationsQuery,\n  GetPublicationsQueryVariables\n>;\nexport const TweetsOnChartDocument = gql`\n  query tweetsOnChart($asset: String!, $limit: Int!) {\n    getTweetChart(\n      request: {\n        asset: $asset\n        resolution: \"M1\"\n        time_window: \"H1\"\n        tweet_limit: $limit\n      }\n    ) {\n      candles {\n        a\n        timestamp\n        pv\n        nv\n      }\n      tweets {\n        base {\n          id\n          source\n          content\n          author\n          pub_date\n        }\n        extended_tweet {\n          id_str\n          author_profile_image_url_http\n        }\n      }\n    }\n    getAssets(assets: [$asset]) {\n      assets {\n        id\n        name\n        price\n        price_change\n        historyM1 {\n          close\n          time\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useTweetsOnChartQuery__\n *\n * To run a query within a React component, call `useTweetsOnChartQuery` and pass it any options that fit your needs.\n * When your component renders, `useTweetsOnChartQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTweetsOnChartQuery({\n *   variables: {\n *      asset: // value for 'asset'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useTweetsOnChartQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    TweetsOnChartQuery,\n    TweetsOnChartQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    TweetsOnChartQuery,\n    TweetsOnChartQueryVariables\n  >(TweetsOnChartDocument, baseOptions);\n}\nexport function useTweetsOnChartLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    TweetsOnChartQuery,\n    TweetsOnChartQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    TweetsOnChartQuery,\n    TweetsOnChartQueryVariables\n  >(TweetsOnChartDocument, baseOptions);\n}\nexport type TweetsOnChartQueryHookResult = ReturnType<\n  typeof useTweetsOnChartQuery\n>;\nexport type TweetsOnChartLazyQueryHookResult = ReturnType<\n  typeof useTweetsOnChartLazyQuery\n>;\nexport type TweetsOnChartQueryResult = ApolloReactCommon.QueryResult<\n  TweetsOnChartQuery,\n  TweetsOnChartQueryVariables\n>;\n","import * as React from \"react\";\nimport { CSSProperties } from \"styled-components\";\nimport { useContext } from \"react\";\nimport { ThemeContext } from \"grommet\";\n\ninterface CryptoMoodIconProps {\n  width: number;\n  height: number;\n  style?: CSSProperties;\n}\n\nexport const CryptomoodSvg = (props: CryptoMoodIconProps) => {\n  const theme: any = useContext(ThemeContext);\n  return (\n    <div style={props.style}>\n      <svg\n        width={props.width}\n        height={props.height}\n        viewBox={\"0 0 155 39\"}\n        fill=\"none\"\n      >\n        <rect\n          x={1.478}\n          y={1.451}\n          width={152.043}\n          height={36.098}\n          rx={9}\n          fill={theme.cryptoMoodLogo.fill}\n          stroke={theme.cryptoMoodLogo.border}\n          strokeWidth={2}\n        />\n        <path\n          d=\"M32.49 20.475h-9.793a1.21 1.21 0 00-1.052.626l-2.969 5.326a.196.196 0 01-.169.101h-.267c-.657 0-1.265-.359-1.594-.943l-.087-.155a.201.201 0 010-.2l2.979-5.365a1.273 1.273 0 000-1.239l-3-5.352a.201.201 0 010-.2l.108-.194c.327-.58.932-.938 1.586-.938h.176c.069 0 .133.038.168.098l3.052 5.321a1.21 1.21 0 001.053.626h9.809c.645 0 1.05-.717.726-1.29l-4.384-7.774-.008-.016-.015-.026a2.973 2.973 0 00-2.571-1.504h-9.913a2.96 2.96 0 00-2.405 1.256c-.063.087-.121.178-.173.27L8.79 17.707a3.088 3.088 0 00-.399 1.527c0 .527.133 1.053.4 1.526l4.956 8.803c.068.122.145.239.228.347a2.964 2.964 0 002.35 1.186H26.227c.242 0 .478-.031.706-.088a3.009 3.009 0 001.878-1.426l.015-.024.003-.007 4.388-7.784c.322-.574-.082-1.29-.727-1.29z\"\n          fill=\"url(#prefix__paint0_linear)\"\n        />\n        <path\n          opacity={0.25}\n          d=\"M32.49 20.475h-9.793a1.21 1.21 0 00-1.052.626l-2.969 5.326a.196.196 0 01-.169.101h-.267c-.657 0-1.265-.359-1.594-.943l-.087-.155a.201.201 0 010-.2l2.979-5.365a1.273 1.273 0 000-1.239l-3-5.352a.201.201 0 010-.2l.108-.194c.327-.58.932-.938 1.586-.938h.176c.069 0 .133.038.168.098l3.052 5.321a1.21 1.21 0 001.053.626h9.809c.645 0 1.05-.717.726-1.29l-4.384-7.774-.008-.016-.015-.026a2.973 2.973 0 00-2.571-1.504h-9.913a2.96 2.96 0 00-2.405 1.256c-.063.087-.121.178-.173.27L8.79 17.707a3.088 3.088 0 00-.399 1.527c0 .527.133 1.053.4 1.526l4.956 8.803c.068.122.145.239.228.347a2.964 2.964 0 002.35 1.186H26.227c.242 0 .478-.031.706-.088a3.009 3.009 0 001.878-1.426l.015-.024.003-.007 4.388-7.784c.322-.574-.082-1.29-.727-1.29z\"\n          fill=\"#FF0BD1\"\n        />\n        <path\n          d=\"M44.211 14.142c1.537 0 2.927.839 3.854 2.01l1.793-1.555c-1.567-1.98-3.685-2.818-5.647-2.818-4.641 0-7.233 3.375-7.233 7.569 0 4.819 3.331 7.426 7.233 7.426 2.523 0 4.415-1.201 5.647-2.79l-1.793-1.565c-.907 1.162-2.238 2-3.854 2-2.73 0-4.691-2.06-4.691-5.071.001-3.125 1.912-5.206 4.691-5.206zM56.012 16.395c-1.202 0-2.297.597-3.065 1.667h-.03v-1.515h-2.256V26.64h2.256v-4.79c0-1.636.976-2.9 2.69-2.9.158 0 .425.011.681.032v-2.576c-.08-.01-.18-.01-.276-.01zM62.024 23.357h-.02l-2.719-6.81H56.91l4.001 9.527-1.775 4.66h2.375l5.411-14.188h-2.365l-2.533 6.811zM72.973 16.395c-1.3 0-2.375.475-3.125 1.375h-.04v-1.222h-2.254v14.186h2.256v-5.335h.03c.72.9 1.773 1.404 3.114 1.404 2.73 0 4.77-2.041 4.77-5.162 0-3.053-2.04-5.246-4.751-5.246zm-.374 8.306c-1.606 0-2.878-1.221-2.878-3.052 0-1.789 1.173-3.152 2.868-3.152 1.577 0 2.838 1.213 2.838 3.152 0 1.79-1.162 3.052-2.828 3.052zM82.326 24.641c-.63 0-.945-.374-.945-1.404v-4.72h2.898v-1.969H81.38v-3.607h-2.256v3.607h-1.202v1.97h1.202v4.93c0 2.254 1.054 3.355 2.749 3.355 1.29 0 1.912-.273 2.502-.596l-.592-2c-.52.281-1.074.434-1.458.434zM89.724 16.395c-3.115 0-5.175 2.233-5.175 5.215 0 2.96 2.06 5.193 5.175 5.193 3.015 0 5.164-2.122 5.164-5.193 0-3.092-2.149-5.215-5.164-5.215zm0 8.306c-1.695 0-2.878-1.364-2.878-3.091 0-1.758 1.153-3.113 2.878-3.113 1.616 0 2.868 1.263 2.868 3.113 0 1.818-1.27 3.091-2.868 3.091zM102.986 20.74h-.04l-4.73-8.8h-2.444v14.702h2.433V16.79h.03l3.923 7.024h1.596l3.922-7.024h.03v9.852h2.434V11.94h-2.444l-4.71 8.8zM116.197 16.395c-3.114 0-5.174 2.233-5.174 5.215 0 2.96 2.06 5.193 5.174 5.193 3.016 0 5.165-2.122 5.165-5.193-.002-3.092-2.149-5.215-5.165-5.215zm0 8.306c-1.694 0-2.878-1.364-2.878-3.091 0-1.758 1.154-3.113 2.878-3.113 1.616 0 2.868 1.263 2.868 3.113-.001 1.818-1.272 3.091-2.868 3.091zM127.429 16.395c-3.114 0-5.174 2.233-5.174 5.215 0 2.96 2.06 5.193 5.174 5.193 3.016 0 5.165-2.122 5.165-5.193 0-3.092-2.149-5.215-5.165-5.215zm0 8.306c-1.694 0-2.878-1.364-2.878-3.091 0-1.758 1.154-3.113 2.878-3.113 1.616 0 2.868 1.263 2.868 3.113 0 1.818-1.272 3.091-2.868 3.091zM141.392 17.76h-.048c-.739-.898-1.824-1.364-3.115-1.364-2.71 0-4.75 2.193-4.75 5.244 0 3.122 2.04 5.162 4.77 5.162 1.4 0 2.485-.545 3.204-1.516h.04v1.355h2.159V11.94h-2.256v5.82h-.004zm-2.789 6.942c-1.666 0-2.828-1.263-2.828-3.05 0-1.94 1.263-3.152 2.838-3.152 1.695 0 2.868 1.364 2.868 3.151 0 1.827-1.272 3.051-2.878 3.051z\"\n          fill={theme.cryptoMoodLogo.text}\n        />\n        <defs>\n          <linearGradient\n            id=\"prefix__paint0_linear\"\n            x1={14.968}\n            y1={31.187}\n            x2={27.828}\n            y2={7.967}\n            gradientUnits=\"userSpaceOnUse\"\n          >\n            <stop stopColor=\"#FF009E\" />\n            <stop offset={1} stopColor=\"#FF8820\" />\n          </linearGradient>\n        </defs>\n      </svg>\n    </div>\n  );\n};\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface IntervalProps {\n  inputIntervals: string[];\n  changeInterval: any;\n  currentInterval: string;\n  fontSize?: number;\n  padding?: number;\n}\n\ninterface IntervalInputProps {\n  active: boolean;\n  fontSize?: number;\n}\n\nconst StyledInterval = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding-bottom: 4px;\n  overflow-x: auto;\n  min-height: 31px;\n`;\n\nconst StyledIntervalInput = styled.input<IntervalInputProps>`\n  font-size: ${props => (props.fontSize ? props.fontSize + \"px\" : \"20px\")};\n  font-family: \"Averta\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n    Oxygen, Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif;\n  display: flex;\n  align-self: center;\n  justify-self: center;\n  outline: none;\n  cursor: pointer;\n  border: none;\n  padding: 6px 12px;\n  text-decoration: none;\n  border-radius: 8px;\n  font-weight: bold;\n  color: ${props =>\n    props.active ? props.theme.interval.textActive : props.theme.interval.text};\n  background-color: ${props =>\n    props.active\n      ? props.theme.interval.backgroundActive\n      : props.theme.interval.background};\n`;\n\n/*\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *            Example of use Interval Component            *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *\n * For now API is implemented in intervals as [5m, 15m, 1h, 4h, 1d];\n *\n * To use this component, parent component need to\n *    a, import Interval.\n *\n *    b, implement\n *                   const [currentInterval, setCurrentInterval] = useState(\"D1\");\n *\n *    c, implement\n *                   const changeInterval = useCallback((interval: string) => {\n *                     setCurrentInterval(interval);\n *                   }, []);\n *\n *    d, prepare wanted intervals\n *\n *                   const inputIntervalButtons = [\"5 min\", \"15 min\", \"1 h\", \"4 h\", \"1 d\"];\n *\n *    e, use component in Render method\n *\n *                   <Interval currentInterval={currentInterval} inputIntervals={inputIntervalButtons}\n *                   changeInterval={changeInterval}/>\n *\n */\n\nexport const Interval = (props: IntervalProps) => {\n  return (\n    <StyledInterval>\n      {props.inputIntervals.map(interval => {\n        const [intervalNumber, intervalText] = interval.split(\" \", 2);\n        return (\n          <StyledIntervalInput\n            key={interval}\n            type=\"submit\"\n            active={\n              props.currentInterval ===\n                intervalText[0].toUpperCase() + intervalNumber ||\n              (intervalText.includes(\"M\") &&\n                (props.currentInterval.includes(\"M\") &&\n                  props.currentInterval.includes(intervalNumber)))\n            }\n            fontSize={props.fontSize}\n            value={interval}\n            onClick={() => {\n              props.changeInterval(\n                intervalText.includes(\"M\")\n                  ? \"MN\" + intervalNumber\n                  : intervalText[0].toUpperCase() + intervalNumber\n              );\n            }}\n          />\n        );\n      })}\n    </StyledInterval>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { ThemeContext } from \"grommet\";\n\ninterface MeterSvgProps {\n  gradientFromSentimentText: string;\n}\n\nexport const MeterSvg = (props: MeterSvgProps) => {\n  const theme: any = useContext(ThemeContext);\n  return (\n    <svg\n      style={{ maxWidth: \"100%\", maxHeight: \"100%\" }}\n      viewBox={\"0 0 525 276\"}\n      width=\"100%\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M260.537 267.743H64.7354C64.7354 267.743 65.6471 69.2059 263.5 69.2059C461.353 69.2059 456.338 267.743 456.338 267.743H260.537Z\"\n        fill=\"url(#paint0_radial)\"\n      />\n      <path\n        d=\"M456.338 264.096C456.338 155.957 368.675 68.2941 260.537 68.2941C152.399 68.2941 64.7354 155.957 64.7354 264.096\"\n        stroke=\"#EEEEEE\"\n        strokeWidth=\"15\"\n        strokeLinecap=\"round\"\n      />\n      <mask\n        id=\"mask0\"\n        mask-type=\"alpha\"\n        maskUnits=\"userSpaceOnUse\"\n        x=\"50\"\n        y=\"57\"\n        width=\"421\"\n        height=\"219\"\n      >\n        <path\n          d=\"M462.72 267.515C462.72 155.726 372.2 65.1029 260.537 65.1029C148.874 65.1029 58.3528 155.726 58.3528 267.515\"\n          stroke=\"#B4B4B4\"\n          strokeWidth=\"15\"\n          strokeLinecap=\"round\"\n        />\n      </mask>\n      <g mask=\"url(#mask0)\">\n        <rect\n          x=\"403.456\"\n          y=\"180.535\"\n          width=\"59.7206\"\n          height=\"113.515\"\n          transform=\"rotate(-23.0094 403.456 180.535)\"\n          fill=\"#4ECC58\"\n        />\n        <path\n          d=\"M476.792 161.85L347.216 45.3998L262.416 269.161L476.792 161.85Z\"\n          fill=\"#ACD91A\"\n        />\n        <path\n          d=\"M343.601 55.5473L175.248 59.9247L264.461 274.54L343.601 55.5473Z\"\n          fill=\"#FFCE2B\"\n        />\n        <path\n          d=\"M172.301 53.3527L44.7054 188.353L265.784 270.158L172.301 53.3527Z\"\n          fill=\"#FC7E1E\"\n        />\n        <path\n          d=\"M54.3107 188.455L51.3506 281.788L269.53 243.531L54.3107 188.455Z\"\n          fill=\"#E8354D\"\n        />\n      </g>\n      <path\n        d=\"M24.0112 242.596C36.7687 242.596 47.1107 232.254 47.1107 219.497C47.1107 206.739 36.7687 196.397 24.0112 196.397C11.2536 196.397 0.911621 206.739 0.911621 219.497C0.911621 232.254 11.2536 242.596 24.0112 242.596Z\"\n        fill=\"#E8354D\"\n      />\n      <path\n        d=\"M9.74194 216.843C9.74194 217.32 9.93119 217.777 10.268 218.113C10.6049 218.45 11.0617 218.64 11.5381 218.64H12.108C12.3512 218.652 12.5943 218.614 12.8226 218.53C13.0509 218.445 13.2597 218.315 13.4361 218.147C13.6126 217.98 13.7531 217.778 13.8491 217.554C13.9451 217.33 13.9946 217.089 13.9946 216.846C13.9946 216.602 13.9451 216.361 13.8491 216.137C13.7531 215.914 13.6126 215.712 13.4361 215.544C13.2597 215.376 13.0509 215.246 12.8226 215.161C12.5943 215.077 12.3512 215.039 12.108 215.052H11.5381C11.0625 215.052 10.6064 215.24 10.2696 215.576C9.93292 215.912 9.74315 216.368 9.74194 216.843Z\"\n        fill=\"#701A25\"\n      />\n      <path\n        d=\"M9.97002 212.891C9.64178 213.488 9.67369 214.14 10.0475 214.345L14.0684 216.561C14.4422 216.766 15.0121 216.451 15.3403 215.854C15.6685 215.257 15.6321 214.605 15.2628 214.4L11.2465 212.184C10.8681 211.979 10.2983 212.294 9.97002 212.891Z\"\n        fill=\"#701A25\"\n      />\n      <path\n        d=\"M37.7377 212.891C38.0705 213.488 38.034 214.14 37.6602 214.345L33.6393 216.561C33.2655 216.766 32.6957 216.451 32.3674 215.854C32.0392 215.257 32.0757 214.605 32.4495 214.4L36.4704 212.184C36.8396 211.979 37.4095 212.294 37.7377 212.891Z\"\n        fill=\"#701A25\"\n      />\n      <path\n        d=\"M34.1179 216.843C34.1173 217.079 34.1634 217.313 34.2534 217.531C34.3435 217.75 34.4758 217.948 34.6427 218.115C34.8096 218.282 35.0078 218.414 35.226 218.504C35.4442 218.594 35.6781 218.64 35.9141 218.64H36.484C36.7271 218.652 36.9703 218.614 37.1986 218.53C37.4269 218.445 37.6357 218.315 37.8121 218.147C37.9886 217.98 38.1291 217.778 38.2251 217.554C38.3211 217.33 38.3706 217.089 38.3706 216.846C38.3706 216.602 38.3211 216.361 38.2251 216.137C38.1291 215.914 37.9886 215.712 37.8121 215.544C37.6357 215.376 37.4269 215.246 37.1986 215.161C36.9703 215.077 36.7271 215.039 36.484 215.052H35.9141C35.6784 215.051 35.445 215.097 35.2271 215.187C35.0092 215.277 34.8111 215.408 34.6443 215.575C34.4774 215.741 34.3451 215.939 34.2547 216.157C34.1644 216.374 34.1179 216.608 34.1179 216.843Z\"\n        fill=\"#701A25\"\n      />\n      <path\n        d=\"M30.8494 228.418C30.6228 228.419 30.4012 228.352 30.2128 228.226C30.0244 228.1 29.8778 227.921 29.7917 227.712C29.2721 226.631 28.4514 225.724 27.4284 225.098C26.4053 224.473 25.2234 224.157 24.0248 224.188C20.3458 224.188 18.1758 227.835 18.1576 227.835C18.0825 227.964 17.9825 228.078 17.8635 228.169C17.7445 228.26 17.6087 228.326 17.464 228.365C17.3192 228.403 17.1682 228.413 17.0197 228.393C16.8712 228.373 16.7281 228.325 16.5985 228.249C16.4689 228.174 16.3553 228.074 16.2643 227.955C16.1733 227.836 16.1067 227.701 16.0681 227.556C16.0296 227.411 16.02 227.26 16.0398 227.112C16.0596 226.963 16.1085 226.82 16.1836 226.69C16.2976 226.494 19.0147 221.899 24.0066 221.89C25.6603 221.856 27.2881 222.304 28.6906 223.181C30.093 224.058 31.2092 225.325 31.9024 226.827C32.0202 227.105 32.0235 227.419 31.9117 227.7C31.7999 227.98 31.582 228.206 31.3052 228.327C31.1606 228.386 31.0058 228.417 30.8494 228.418Z\"\n        fill=\"#701A25\"\n      />\n      <path\n        d=\"M94.6728 112.214C107.43 112.214 117.772 101.872 117.772 89.1142C117.772 76.3567 107.43 66.0146 94.6728 66.0146C81.9153 66.0146 71.5732 76.3567 71.5732 89.1142C71.5732 101.872 81.9153 112.214 94.6728 112.214Z\"\n        fill=\"#FC7E1E\"\n      />\n      <path\n        d=\"M80.7637 86.461C80.7631 86.6967 80.809 86.9301 80.8988 87.148C80.9885 87.3659 81.1204 87.564 81.2868 87.7308C81.4533 87.8977 81.651 88.03 81.8686 88.1204C82.0863 88.2107 82.3196 88.2572 82.5553 88.2572H83.1252C83.3683 88.2694 83.6115 88.2321 83.8398 88.1475C84.0681 88.0629 84.2768 87.9327 84.4533 87.765C84.6298 87.5972 84.7703 87.3953 84.8663 87.1715C84.9623 86.9477 85.0118 86.7068 85.0118 86.4633C85.0118 86.2198 84.9623 85.9788 84.8663 85.7551C84.7703 85.5313 84.6298 85.3294 84.4533 85.1616C84.2768 84.9938 84.0681 84.8637 83.8398 84.7791C83.6115 84.6944 83.3683 84.6571 83.1252 84.6694H82.5371C82.0651 84.6742 81.614 84.8651 81.282 85.2005C80.9499 85.536 80.7637 85.989 80.7637 86.461Z\"\n        fill=\"#63320A\"\n      />\n      <path\n        d=\"M105.135 86.461C105.135 86.9374 105.324 87.3943 105.661 87.7311C105.998 88.068 106.455 88.2572 106.931 88.2572H107.501C107.744 88.2694 107.988 88.2321 108.216 88.1475C108.444 88.0629 108.653 87.9327 108.829 87.765C109.006 87.5972 109.146 87.3953 109.242 87.1715C109.338 86.9477 109.388 86.7068 109.388 86.4633C109.388 86.2198 109.338 85.9788 109.242 85.7551C109.146 85.5313 109.006 85.3294 108.829 85.1616C108.653 84.9938 108.444 84.8637 108.216 84.7791C107.988 84.6944 107.744 84.6571 107.501 84.6694H106.931C106.456 84.6694 106 84.858 105.663 85.1939C105.326 85.5297 105.136 85.9854 105.135 86.461Z\"\n        fill=\"#63320A\"\n      />\n      <path\n        d=\"M101.511 98.0358C101.285 98.0362 101.064 97.9691 100.877 97.8433C100.689 97.7174 100.543 97.5384 100.458 97.3292C99.9361 96.2494 99.1143 95.3427 98.0908 94.7178C97.0672 94.0928 95.8853 93.776 94.6864 93.8052C91.012 93.8052 88.842 97.4523 88.8192 97.4523C88.6675 97.714 88.418 97.9048 88.1256 97.9826C87.8332 98.0604 87.5219 98.0189 87.2601 97.8671C86.9983 97.7154 86.8076 97.4659 86.7298 97.1735C86.652 96.8811 86.6935 96.5698 86.8453 96.308C86.9592 96.112 89.6808 91.5167 94.6682 91.5076C96.3219 91.4733 97.9497 91.9221 99.3522 92.799C100.755 93.676 101.871 94.943 102.564 96.4448C102.622 96.5833 102.651 96.7319 102.651 96.8819C102.651 97.0319 102.621 97.1804 102.564 97.3189C102.506 97.4574 102.422 97.5831 102.315 97.6889C102.209 97.7947 102.083 97.8785 101.944 97.9355C101.807 97.9957 101.66 98.0298 101.511 98.0358Z\"\n        fill=\"#63320A\"\n      />\n      <path\n        d=\"M267.1 46.1991C279.857 46.1991 290.199 35.8571 290.199 23.0996C290.199 10.342 279.857 0 267.1 0C254.342 0 244 10.342 244 23.0996C244 35.8571 254.342 46.1991 267.1 46.1991Z\"\n        fill=\"#FFCE2B\"\n      />\n      <path\n        d=\"M252.831 20.3324C252.83 20.5685 252.876 20.8023 252.966 21.0205C253.056 21.2387 253.188 21.4369 253.355 21.6039C253.522 21.7708 253.72 21.9031 253.939 21.9931C254.157 22.0832 254.391 22.1292 254.627 22.1286H255.197C255.673 22.1286 256.13 21.9394 256.467 21.6025C256.804 21.2657 256.993 20.8088 256.993 20.3324C256.993 19.8561 256.804 19.3992 256.467 19.0623C256.13 18.7255 255.673 18.5363 255.197 18.5363H254.627C254.15 18.5363 253.694 18.7255 253.357 19.0623C253.02 19.3992 252.831 19.8561 252.831 20.3324Z\"\n        fill=\"#594208\"\n      />\n      <path\n        d=\"M277.207 20.3324C277.206 20.5685 277.252 20.8023 277.342 21.0205C277.432 21.2387 277.564 21.4369 277.731 21.6039C277.898 21.7708 278.096 21.9031 278.315 21.9931C278.533 22.0832 278.767 22.1292 279.003 22.1286H279.573C280.049 22.1286 280.506 21.9394 280.843 21.6025C281.18 21.2657 281.369 20.8088 281.369 20.3324C281.369 19.8561 281.18 19.3992 280.843 19.0623C280.506 18.7255 280.049 18.5363 279.573 18.5363H279.003C278.526 18.5363 278.069 18.7255 277.733 19.0623C277.396 19.3992 277.207 19.8561 277.207 20.3324Z\"\n        fill=\"#594208\"\n      />\n      <path\n        d=\"M270.181 31.0548C270.046 31.0549 269.911 31.0302 269.785 30.9818L261.401 27.8636C261.117 27.7584 260.887 27.5449 260.761 27.27C260.635 26.9952 260.623 26.6815 260.728 26.3979C260.834 26.1144 261.047 25.8843 261.322 25.7582C261.597 25.6321 261.911 25.6203 262.194 25.7255L270.578 28.8483C270.827 28.9421 271.036 29.1204 271.168 29.3521C271.299 29.5838 271.345 29.8544 271.298 30.1167C271.251 30.379 271.114 30.6165 270.909 30.7879C270.705 30.9593 270.448 31.0537 270.181 31.0548Z\"\n        fill=\"#594208\"\n      />\n      <path\n        d=\"M431.114 112.214C443.872 112.214 454.214 101.872 454.214 89.1142C454.214 76.3567 443.872 66.0146 431.114 66.0146C418.357 66.0146 408.015 76.3567 408.015 89.1142C408.015 101.872 418.357 112.214 431.114 112.214Z\"\n        fill=\"#ACD91A\"\n      />\n      <path\n        d=\"M416.85 86.4611C416.849 86.6971 416.895 86.9309 416.985 87.1491C417.075 87.3673 417.207 87.5656 417.374 87.7325C417.541 87.8994 417.74 88.0317 417.958 88.1217C418.176 88.2118 418.41 88.2578 418.646 88.2572H419.216C419.676 88.234 420.109 88.0349 420.427 87.701C420.744 87.3672 420.921 86.9241 420.921 86.4633C420.921 86.0026 420.744 85.5595 420.427 85.2256C420.109 84.8918 419.676 84.6926 419.216 84.6694H418.646C418.41 84.6688 418.177 84.7147 417.959 84.8045C417.741 84.8943 417.543 85.0261 417.376 85.1926C417.209 85.359 417.077 85.5567 416.986 85.7744C416.896 85.992 416.85 86.2254 416.85 86.4611Z\"\n        fill=\"#495C0B\"\n      />\n      <path\n        d=\"M441.212 86.461C441.211 86.6967 441.257 86.9301 441.347 87.148C441.437 87.3659 441.569 87.564 441.735 87.7308C441.901 87.8977 442.099 88.03 442.317 88.1204C442.535 88.2107 442.768 88.2572 443.004 88.2572H443.573C443.817 88.2694 444.06 88.2321 444.288 88.1475C444.516 88.0629 444.725 87.9327 444.902 87.765C445.078 87.5972 445.218 87.3953 445.314 87.1715C445.411 86.9477 445.46 86.7068 445.46 86.4633C445.46 86.2198 445.411 85.9788 445.314 85.7551C445.218 85.5313 445.078 85.3294 444.902 85.1616C444.725 84.9938 444.516 84.8637 444.288 84.7791C444.06 84.6944 443.817 84.6571 443.573 84.6694H443.035C442.797 84.6652 442.561 84.7084 442.34 84.7965C442.119 84.8846 441.918 85.0159 441.748 85.1827C441.578 85.3495 441.443 85.5485 441.351 85.7679C441.259 85.9874 441.212 86.223 441.212 86.461Z\"\n        fill=\"#495C0B\"\n      />\n      <path\n        d=\"M431.128 99.1847C426.113 99.1847 423.405 94.5803 423.291 94.3842C423.139 94.1225 423.098 93.8111 423.176 93.5187C423.253 93.2264 423.444 92.9768 423.706 92.8251C423.968 92.6734 424.279 92.6318 424.571 92.7096C424.864 92.7874 425.113 92.9782 425.265 93.24C425.301 93.3083 427.471 96.887 431.119 96.887C432.317 96.9209 433.5 96.6087 434.526 95.9878C435.552 95.3669 436.378 94.4636 436.904 93.3858C437.02 93.1065 437.242 92.8848 437.522 92.7694C437.801 92.654 438.115 92.6543 438.394 92.7704C438.674 92.8865 438.895 93.1087 439.011 93.3883C439.126 93.6679 439.126 93.9818 439.01 94.2611C438.315 95.7579 437.2 97.0202 435.801 97.8944C434.401 98.7686 432.777 99.2169 431.128 99.1847Z\"\n        fill=\"#495C0B\"\n      />\n      <path\n        d=\"M501.776 242.596C514.533 242.596 524.875 232.254 524.875 219.497C524.875 206.739 514.533 196.397 501.776 196.397C489.018 196.397 478.676 206.739 478.676 219.497C478.676 232.254 489.018 242.596 501.776 242.596Z\"\n        fill=\"#4ECC58\"\n      />\n      <path\n        d=\"M487.511 216.843C487.511 217.079 487.557 217.312 487.646 217.53C487.736 217.748 487.868 217.946 488.034 218.113C488.201 218.28 488.399 218.412 488.616 218.503C488.834 218.593 489.067 218.64 489.303 218.64H489.873C490.116 218.652 490.359 218.614 490.587 218.53C490.816 218.445 491.024 218.315 491.201 218.147C491.377 217.98 491.518 217.778 491.614 217.554C491.71 217.33 491.759 217.089 491.759 216.846C491.759 216.602 491.71 216.361 491.614 216.137C491.518 215.914 491.377 215.712 491.201 215.544C491.024 215.376 490.816 215.246 490.587 215.161C490.359 215.077 490.116 215.039 489.873 215.052H489.303C488.828 215.052 488.372 215.24 488.036 215.576C487.7 215.912 487.511 216.368 487.511 216.843Z\"\n        fill=\"#1F5223\"\n      />\n      <path\n        d=\"M511.883 216.843C511.883 217.079 511.929 217.313 512.02 217.531C512.11 217.749 512.242 217.947 512.409 218.113C512.576 218.28 512.774 218.413 512.992 218.503C513.21 218.593 513.443 218.64 513.679 218.64H514.249C514.492 218.652 514.735 218.614 514.963 218.53C515.192 218.445 515.401 218.315 515.577 218.147C515.753 217.98 515.894 217.778 515.99 217.554C516.086 217.33 516.135 217.089 516.135 216.846C516.135 216.602 516.086 216.361 515.99 216.137C515.894 215.914 515.753 215.712 515.577 215.544C515.401 215.376 515.192 215.246 514.963 215.161C514.735 215.077 514.492 215.039 514.249 215.052H513.679C513.203 215.052 512.747 215.24 512.411 215.576C512.074 215.912 511.884 216.368 511.883 216.843Z\"\n        fill=\"#1F5223\"\n      />\n      <path\n        d=\"M492.996 222.314C492.996 222.314 496.137 229.608 501.776 229.64C508.318 229.64 510.561 222.314 510.561 222.314H492.996Z\"\n        fill=\"#1F5223\"\n      />\n      <defs>\n        <radialGradient\n          id=\"paint0_radial\"\n          cx=\"0\"\n          cy=\"0\"\n          r=\"1\"\n          gradientUnits=\"userSpaceOnUse\"\n          gradientTransform=\"translate(262.816 74.2206) rotate(90.1683) scale(155.229 306.189)\"\n        >\n          <stop\n            stopColor={\n              theme.colors.sentimentMeter[props.gradientFromSentimentText]\n            }\n            stopOpacity=\"0.52\"\n          />\n          <stop\n            offset=\"1\"\n            stopColor={\n              theme.colors.sentimentMeter[props.gradientFromSentimentText]\n            }\n            stopOpacity=\"0\"\n          />\n        </radialGradient>\n      </defs>\n    </svg>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { ThemeContext } from \"grommet\";\n\nexport const HandleSvg = (props: HandleSvgProps) => {\n  const rotate = Math.max(-90, Math.min(90, (props.sentiment / 10) * 90));\n\n  const theme: any = useContext(ThemeContext);\n\n  // for now not using shake as it can cause animation troubles.\n\n  // useEffect(() => {\n  //   const interval = setInterval(() => {\n  //     setShaking((Math.random() - 0.5) * 6);\n  //   }, 600);\n  //   return () => {\n  //     clearInterval(interval);\n  //   };\n  // }, []);\n\n  return (\n    <div style={{ position: \"absolute\", height: \"100%\", bottom: \"-20%\" }}>\n      <div\n        style={{\n          position: \"absolute\",\n          transition: \"transform 1s ease\",\n          transform: `rotate(${rotate}deg)`,\n          bottom: \"-39%\",\n          height: \"125%\",\n          right: \"-3px\"\n        }}\n      >\n        <svg\n          style={{\n            height: \"52%\"\n          }}\n          viewBox=\"0 0 9 191\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <line\n            x1=\"3.72021\"\n            y1=\"3.92651\"\n            x2=\"3.72021\"\n            y2=\"176.088\"\n            stroke={theme.emotionMeter.handle}\n            strokeWidth=\"7\"\n            strokeLinecap=\"round\"\n          />\n          <circle\n            cx=\"4.33088\"\n            cy=\"186.331\"\n            r=\"3.83088\"\n            fill={theme.emotionMeter.handle}\n            stroke={theme.emotionMeter.handle}\n          />\n        </svg>\n      </div>\n    </div>\n  );\n};\n\ninterface HandleSvgProps {\n  sentiment: number;\n}\n","import React from \"react\";\nimport { MeterSvg } from \"./meter-svg\";\nimport { HandleSvg } from \"./handle-svg\";\n\nexport const Meter = (props: MeterProps) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flex: 1,\n        position: \"relative\",\n        justifyContent: \"center\",\n        overflow: \"hidden\",\n        minWidth: \"415px\",\n        minHeight: \"100px\"\n      }}\n    >\n      <MeterSvg gradientFromSentimentText={props.sentimentText} />\n      <HandleSvg sentiment={props.sentiment} />\n    </div>\n  );\n};\n\ninterface MeterProps {\n  sentiment: number;\n  sentimentText: string;\n}\n","import styled from \"styled-components\";\n\nexport const StyledAsset = styled.span`\n  color: ${props => props.theme.colors.brand};\n`;\n\nexport const StyledH1 = styled.h1`\n  text-align: center;\n  margin: 0.5em 0;\n  color: ${props => props.theme.emotionMeter.header};\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n  height: 100vh;\n  width: 100vw;\n  background-color: ${props => props.theme.emotionMeter.background};\n`;\n\nexport const StyledWidget = styled.div`\n  flex: 1;\n  height: 100%;\n  display: flex;\n  max-height: 100%;\n  position: relative;\n  overflow: hidden;\n  min-width: 415px;\n  padding: 6px;\n  flex-direction: column;\n`;\n\nexport const StyledIcon = styled.a`\n  position: fixed;\n  bottom: 1px;\n  right: 0;\n  transform: translate3d(119px, 0, 0);\n  transition: ease 0.7s;\n  :hover {\n    right: 0;\n    transform: translate3d(7px, 0, 0);\n    transition: ease 0.7s;\n  }\n`;\n\nexport const StyledH2 = styled.h2<{ colorFromSentimentText: string }>`\n  text-align: center;\n  margin: 0.5em 0;\n  padding-bottom: 30px;\n  color: ${props =>\n    props.theme.colors.sentimentMeter[props.colorFromSentimentText]};\n`;\n","enum Sentiment {\n  Euphoria = \"euphoria\",\n  Happy = \"happy\",\n  Normal = \"normal\",\n  Sad = \"sad\",\n  Depression = \"depression\"\n}\n\nexport function getPrettySentiment(sentimentValue: number) {\n  if (sentimentValue <= -6.5) return Sentiment.Depression;\n  else if (sentimentValue >= -6.5 && sentimentValue <= -2) return Sentiment.Sad;\n  else if (sentimentValue >= -2 && sentimentValue <= 2) return Sentiment.Normal;\n  else if (sentimentValue >= 2 && sentimentValue <= 6.5) return Sentiment.Happy;\n  else if (sentimentValue >= -6.5) return Sentiment.Euphoria;\n  else return Sentiment.Normal;\n}\n\nexport function getEmotionMoodText(sentiment: Sentiment) {\n  switch (sentiment) {\n    case Sentiment.Euphoria: {\n      return \"Nice and dandy like cotton candy\";\n    }\n    case Sentiment.Happy: {\n      return \"So far, so good\";\n    }\n    case Sentiment.Normal: {\n      return \"Not great, not terrible\";\n    }\n    case Sentiment.Sad: {\n      return \"Nothing much\";\n    }\n    case Sentiment.Depression: {\n      return \"Somebody, call the ambulance\";\n    }\n    default:\n      return \"Somebody, call the ambulance\";\n  }\n}\n","import React, { useCallback, useRef, useState } from \"react\";\n\nimport { GetSentimentDocument } from \"../../generated/apollo\";\nimport { Meter } from \"./components/meter\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Interval } from \"../../components/interval\";\nimport { CryptomoodSvg } from \"../../components/cryptomood-svg\";\nimport * as S from \"./styles\";\nimport { getEmotionMoodText, getPrettySentiment } from \"./utils/utils\";\n\nconst inputIntervalButtons = [\n  \"5 minutes\",\n  \"15 minutes\",\n  \"1 hour\",\n  \"4 hours\",\n  \"1 day\"\n];\n\nexport const EmotionMeterComponent = () => {\n  const [currentInterval, setCurrentInterval] = useState(\"D1\");\n\n  const params = useRef(new URLSearchParams(window.location.search));\n\n  const asset = params.current.get(\"asset\") || \"BTC\";\n\n  const { data } = useQuery(GetSentimentDocument, {\n    fetchPolicy: \"cache-and-network\",\n    variables: {\n      asset: `${asset}`,\n      resolution: `${currentInterval}`\n    }\n  });\n\n  const sentiment =\n    (data &&\n      data.getSentimentValue &&\n      data.getSentimentValue.social_sentiment_value) ||\n    null;\n\n  const changeInterval = useCallback((interval: string) => {\n    setCurrentInterval(interval);\n  }, []);\n\n  const sentimentText = getPrettySentiment(sentiment);\n  return (\n    <S.Container>\n      <S.StyledWidget>\n        <S.StyledH1>\n          Social sentiment for <S.StyledAsset>{asset}</S.StyledAsset>\n        </S.StyledH1>\n\n        <Interval\n          inputIntervals={inputIntervalButtons}\n          changeInterval={changeInterval}\n          currentInterval={currentInterval}\n        />\n\n        <Meter sentimentText={sentimentText} sentiment={sentiment} />\n\n        <S.StyledH2 colorFromSentimentText={sentimentText}>\n          {getEmotionMoodText(sentimentText)}\n        </S.StyledH2>\n      </S.StyledWidget>\n\n      <S.StyledIcon target=\"_\" href={\"https://cryptomood.com\"}>\n        <CryptomoodSvg width={155} height={40} />\n      </S.StyledIcon>\n    </S.Container>\n  );\n};\n\nexport default EmotionMeterComponent;\n"],"sourceRoot":""}